<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>单摆锤强化学习实例</title>
    <link href="/2025/07/03/%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/"/>
    <url>/2025/07/03/%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">gym                 <span class="hljs-number">0.26</span><span class="hljs-number">.2</span><br>gym-notices         <span class="hljs-number">0.0</span><span class="hljs-number">.8</span><br>pygame              <span class="hljs-number">2.1</span><span class="hljs-number">.0</span><br>torch               <span class="hljs-number">1.9</span><span class="hljs-number">.0</span>+cu111<br></code></pre></td></tr></table></figure><h1 id="游戏搭建与测试"><a href="#游戏搭建与测试" class="headerlink" title="游戏搭建与测试"></a>游戏搭建与测试</h1><p>测试游戏使用的是 gym 库的<font style="color:#080808;">CartPole-v1 游戏模型。</font></p><p><img src="/.io//%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/0.png"></p><p>首先要对游戏环境进行初始化和启动：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 初始化pygame</span><br>pygame.init()<br><span class="hljs-comment"># 生成环境</span><br>env = gym.make(<span class="hljs-string">&#x27;CartPole-v1&#x27;</span>, render_mode=<span class="hljs-string">&#x27;human&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后，是人类玩家通过键盘来玩游戏，测试和了解游戏的规则以及难度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 人类</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">human_play</span>(<span class="hljs-params">action_max</span>):<br>    <span class="hljs-comment"># 游戏初始化</span><br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;游戏开始！&quot;</span>)<br>    state, _ = env.reset()<br>    start_time = time.time()  <span class="hljs-comment"># 设定游戏开始时间</span><br>    step = <span class="hljs-number">0</span><br>    fail = <span class="hljs-literal">False</span><br><br>    <span class="hljs-comment"># 小车的信息参数</span><br>    car_position = state[<span class="hljs-number">0</span>] <span class="hljs-comment"># 小车位置</span><br>    car_speed = state[<span class="hljs-number">1</span>]    <span class="hljs-comment"># 小车速度</span><br>    pole_angle = state[<span class="hljs-number">2</span>]   <span class="hljs-comment"># 杆子的角度</span><br>    pole_speed = state[<span class="hljs-number">3</span>]   <span class="hljs-comment"># 杆子的尖端速度</span><br><br>    <span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, action_max + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 渲染画面</span><br>        env.render()<br><br>        time.sleep(<span class="hljs-number">0.2</span>)<br>        <span class="hljs-comment"># 以非阻塞方式获取键盘的输入值</span><br>        key = pygame.key.get_pressed()<br>        action = <span class="hljs-number">0</span><br><br>        <span class="hljs-comment"># 如果键盘没有输入，那么游戏也继续执行下去，输入值将随机选择</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> key[pygame.K_LEFT] <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> key[pygame.K_RIGHT]:<br>            action = env.action_space.sample()<br><br>        <span class="hljs-comment"># 键盘左箭头为0，右箭头为1</span><br>        <span class="hljs-keyword">if</span> key[pygame.K_LEFT]:<br>            action = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">elif</span> key[pygame.K_RIGHT]:<br>            action = <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># agent与环境进行一步交互</span><br>        state, _, terminated, _, _ = env.step(action)<br>        <span class="hljs-comment"># print(&#x27;state = &#123;0&#125;:.2f; reward = &#123;1&#125;&#x27;.format(state, reward))</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;步骤=<span class="hljs-subst">&#123;step&#125;</span> 行为=<span class="hljs-subst">&#123;action&#125;</span>&quot;</span><br>              <span class="hljs-string">f&quot; 车速=<span class="hljs-subst">&#123;car_speed:<span class="hljs-number">.2</span>f&#125;</span> 位置=<span class="hljs-subst">&#123;car_position:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span><br>              <span class="hljs-string">f&quot; 角度=<span class="hljs-subst">&#123;pole_angle:<span class="hljs-number">.2</span>f&#125;</span> 尖端速度=<span class="hljs-subst">&#123;pole_speed:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br><br>        <span class="hljs-comment"># 判断当前episode 是否完成</span><br>        <span class="hljs-keyword">if</span> terminated:<br>            fail = <span class="hljs-literal">True</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Done!&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-comment"># 游戏结束后，计算游戏时间和步骤总数</span><br>    end_time = time.time()<br>    game_time = end_time - start_time<br>    <span class="hljs-keyword">if</span> fail:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;游戏失败！你坚持了 <span class="hljs-subst">&#123;game_time:<span class="hljs-number">.2</span>f&#125;</span> 秒 <span class="hljs-subst">&#123;step&#125;</span> 步。&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;游戏通关！你坚持了 <span class="hljs-subst">&#123;game_time:<span class="hljs-number">.2</span>f&#125;</span> 秒 <span class="hljs-subst">&#123;step&#125;</span> 步。&quot;</span>)<br></code></pre></td></tr></table></figure><p>游戏结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">步骤=<span class="hljs-number">1</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">2</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">3</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">4</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">5</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">6</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">7</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">8</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">9</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">10</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">11</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">12</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">13</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">14</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">15</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">16</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>Done!<br>游戏失败！你坚持了 <span class="hljs-number">3.63</span> 秒 <span class="hljs-number">16</span> 步。<br></code></pre></td></tr></table></figure><p>于是，定义一个简易的神经网络来玩游戏。</p><h1 id="强化学习模型"><a href="#强化学习模型" class="headerlink" title="强化学习模型"></a>强化学习模型</h1><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p><img src="/.io//%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/0.png"></p><p>定义的神经网络如上图，输入小车的<strong>四个实时特征</strong>，输入一个 128 神经元的隐藏层神经网络，最后再输出为<strong>向左、向右的概率大小</strong>，让神经网络决定小车的向左&#x2F;向右。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 神经网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CartPolePolicy</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(CartPolePolicy, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-comment"># 定义两个线性层，大小分别是4*128与128*2</span><br>        <span class="hljs-variable language_">self</span>.fc1 = nn.Linear(in_features=<span class="hljs-number">4</span>, out_features=<span class="hljs-number">128</span>)<br>        <span class="hljs-variable language_">self</span>.fc2 = nn.Linear(in_features=<span class="hljs-number">128</span>, out_features=<span class="hljs-number">2</span>)<br>        <span class="hljs-comment"># 定义一个dropout层，丢弃比率是60%</span><br>        <span class="hljs-variable language_">self</span>.drop = nn.Dropout(p=<span class="hljs-number">0.6</span>)<br><br>    <span class="hljs-comment"># 前向传播函数，输入X</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = <span class="hljs-variable language_">self</span>.fc1(x)<br>        x = <span class="hljs-variable language_">self</span>.drop(x)<br>        <span class="hljs-comment"># 隐藏层的激活函数；在输入数据通过线性层后，ReLU激活函数将其转换为非线性形式，供下一层使用。</span><br>        x = F.relu(x)<br>        x = <span class="hljs-variable language_">self</span>.fc2(x)<br><br>        <span class="hljs-comment"># 使用softmax决策最终的行动，决定是向左还是向右</span><br>        <span class="hljs-keyword">return</span> F.softmax(x, dim=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="强化学习算法"><a href="#强化学习算法" class="headerlink" title="强化学习算法"></a>强化学习算法</h2><p><img src="/.io//%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/0.png"></p><p>基于策略的强化学习模型其算法而结构如下：</p><p><img src="/.io//%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/0.png"></p><p>在此处，我们假设 Cartpole 游戏执行了 n 步：</p><p>神经网络的行动：$ a1,a2,…….an\in0、1 $</p><p>选择动作的概率：$ p1,p2,……pn<br> $</p><p>动作对应的奖励：$ r1,r2,……rn $ </p><p>总奖励为：$ R&#x3D;p1<em>r1+p2</em>r2+……+pn*rn $</p><p>于是，我们神经网络的参数优化目标为：<strong>总奖励 R 最大</strong>。</p><p>也就是说，增加神经网络输出高奖励动作的概率，减少输出低奖励动作的概率。</p><p>问题就在于：<strong>如何分配奖励？</strong></p><h3 id="奖励策略"><a href="#奖励策略" class="headerlink" title="奖励策略"></a>奖励策略</h3><p>对于 Cartpole 游戏而言：</p><p>如果游戏没有结束 ——&gt;正奖励</p><p>如果游戏结束     ——&gt;不再奖励</p><p><img src="/.io//%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/0.png"></p><p>由于第 1 步做出了正确的决定，才有了第 2 步，所以应该给第一步更多的奖励。</p><p>所设定奖励策略如下：</p><p><img src="/.io//%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/0.png"></p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>定义损失函数为：$ loss&#x3D;-\sum_{i&#x3D;1}^{n} log(p_i)\cdot r_i $</p><p>第 i 步的行动为：$ p_i &#x3D; \pi(a_i|s_i) $</p><p>第 i 步的奖励为：$ r_i&#x3D;n-i+1 $</p><p>神经网络的训练目标即为：使 loss 函数最小的参数模型，即使总奖励 R 最大，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 实现损失函数的计算方法，函数传入步数n和这n步对应的概率log_p</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_policy_loss</span>(<span class="hljs-params">n, log_p</span>):<br>    r = <span class="hljs-built_in">list</span>()<br>    <span class="hljs-comment"># 构造奖励列表r</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        r.append(i * <span class="hljs-number">1.0</span>)<br>    r = torch.tensor(r)<br>    r = (r - r.mean()) / r.std()  <span class="hljs-comment"># 进行标准化处理</span><br>    loss = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 计算损失函数</span><br>    <span class="hljs-keyword">for</span> pi, ri <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(log_p, r):<br>        loss += -pi * ri<br>    <span class="hljs-keyword">return</span> loss<br></code></pre></td></tr></table></figure><h2 id="进行训练"><a href="#进行训练" class="headerlink" title="进行训练"></a>进行训练</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 训练的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>():<br>    env.reset(seed=<span class="hljs-number">543</span>)<br>    torch.manual_seed(<span class="hljs-number">543</span>)<br><br>    <span class="hljs-comment"># 定义模型</span><br>    policy = CartPolePolicy()<br>    optimizer = optim.Adam(policy.parameters(), lr = <span class="hljs-number">0.01</span>)<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    一共训练最多1000回合</span><br><span class="hljs-string">    每回合罪多行动10000次</span><br><span class="hljs-string">    当某一回合的游戏步数超过5000，就认为训练完成</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    max_episode = <span class="hljs-number">1000</span><br>    max_actions = <span class="hljs-number">10000</span><br>    max_steps = <span class="hljs-number">5000</span><br><br>    <span class="hljs-keyword">for</span> episode <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, max_episode + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 对于每一轮循环，都要重新启动一次游戏</span><br>        state, _ = env.reset()<br>        step = <span class="hljs-number">0</span><br>        log_p = <span class="hljs-built_in">list</span>()<br>        <br>        <span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, max_actions + <span class="hljs-number">1</span>):<br>            state = torch.from_numpy(state).<span class="hljs-built_in">float</span>().unsqueeze(<span class="hljs-number">0</span>)<br>            <span class="hljs-comment"># print(state)</span><br>            probs = policy(state) <span class="hljs-comment"># 计算神经网络给出的行动概率</span><br><br>            <span class="hljs-comment"># 基于网络给出的概率分布，随机选择行动</span><br>            m = Categorical(probs)<br>            action = m.sample()<br>            <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            这里不是直接使用概率较大的行动，而是通过概率分布生成action，</span><br><span class="hljs-string">            这样可以进一步探索低概率的行动。</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            <span class="hljs-comment"># agent与环境进行一步交互</span><br>            state, _, done, _, _ = env.step(action.item())<br>            <span class="hljs-keyword">if</span> done:<br>                <span class="hljs-keyword">break</span><br>            log_p.append(m.log_prob(action)) <span class="hljs-comment"># 保存每次行动对应的概率分布</span><br><br>        <span class="hljs-keyword">if</span> step &gt; max_steps:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;完成！上一轮训练为<span class="hljs-subst">&#123;episode&#125;</span>，步数为<span class="hljs-subst">&#123;step&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-comment"># 每一回合游戏，都会做一次梯度下降算法</span><br>        optimizer.zero_grad()<br>        loss = compute_policy_loss(step, log_p)<br>        loss.backward()<br>        optimizer.step()<br>        <span class="hljs-keyword">if</span> episode %<span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Episode<span class="hljs-subst">&#123;episode&#125;</span> Run steps<span class="hljs-subst">&#123;step&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-comment"># 保存模型</span><br>    torch.save(policy.state_dict(), <span class="hljs-string">f&#x27;catpole_policy.pth&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="AI-测试"><a href="#AI-测试" class="headerlink" title="AI 测试"></a>AI 测试</h1><p>接下来让训练生成的模型去玩游戏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ai_play</span>(<span class="hljs-params">action_max</span>):<br>    <span class="hljs-comment"># 游戏初始化</span><br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;游戏开始！&quot;</span>)<br><br>    state, _ = env.reset()<br>    start_time = time.time()  <span class="hljs-comment"># 设定游戏开始时间</span><br>    step = <span class="hljs-number">0</span><br>    fail = <span class="hljs-literal">False</span><br><br>    <span class="hljs-comment"># 小车的信息参数</span><br>    car_position = state[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 小车位置</span><br>    car_speed = state[<span class="hljs-number">1</span>]  <span class="hljs-comment"># 小车速度</span><br>    pole_angle = state[<span class="hljs-number">2</span>]  <span class="hljs-comment"># 杆子的角度</span><br>    pole_speed = state[<span class="hljs-number">3</span>]  <span class="hljs-comment"># 杆子的尖端速度</span><br><br>    <span class="hljs-comment"># 在环境中，创建神经网络</span><br>    policy = CartPolePolicy()<br>    <span class="hljs-comment"># 由于网络还有训练，将读取模型的代码load_state_dict注释</span><br>    policy.load_state_dict(torch.load(<span class="hljs-string">&#x27;catpole_policy.pth&#x27;</span>))<br>    policy.<span class="hljs-built_in">eval</span>() <span class="hljs-comment"># 将模型设置为评估模式</span><br><br>    <span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, action_max + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 渲染画面</span><br>        env.render()<br><br>        time.sleep(<span class="hljs-number">0.1</span>)<br><br>        <span class="hljs-string">&#x27;&#x27;&#x27;小车控制的方式&#x27;&#x27;&#x27;</span><br>        <span class="hljs-comment"># 将环境参数state转化为张量</span><br>        state = torch.from_numpy(state).<span class="hljs-built_in">float</span>().unsqueeze(<span class="hljs-number">0</span>)<br>        <span class="hljs-comment"># 输入至模型policy，计算行动概率probs</span><br>        probs = policy(state)<br><br>        action = torch.argmax(probs, dim=<span class="hljs-number">1</span>).item()<br><br>        <span class="hljs-comment"># agent与环境进行一步交互</span><br>        state, _, done, _, _ = env.step(action)<br>        <span class="hljs-comment"># print(&#x27;state = &#123;0&#125;:.2f; reward = &#123;1&#125;&#x27;.format(state, reward))</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;步骤=<span class="hljs-subst">&#123;step&#125;</span> 行为=<span class="hljs-subst">&#123;action&#125;</span>&quot;</span><br>              <span class="hljs-string">f&quot; 车速=<span class="hljs-subst">&#123;car_speed:<span class="hljs-number">.2</span>f&#125;</span> 位置=<span class="hljs-subst">&#123;car_position:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span><br>              <span class="hljs-string">f&quot; 角度=<span class="hljs-subst">&#123;pole_angle:<span class="hljs-number">.2</span>f&#125;</span> 尖端速度=<span class="hljs-subst">&#123;pole_speed:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br><br>        <span class="hljs-comment"># 判断当前episode 是否完成</span><br>        <span class="hljs-keyword">if</span> done:<br>            fail = <span class="hljs-literal">True</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Done!&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-comment"># 游戏结束后，计算游戏时间和步骤总数</span><br>    end_time = time.time()<br>    game_time = end_time - start_time<br>    <span class="hljs-keyword">if</span> fail:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;游戏失败！你坚持了 <span class="hljs-subst">&#123;game_time:<span class="hljs-number">.2</span>f&#125;</span> 秒 <span class="hljs-subst">&#123;step&#125;</span> 步。&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;游戏通关！你坚持了 <span class="hljs-subst">&#123;game_time:<span class="hljs-number">.2</span>f&#125;</span> 秒 <span class="hljs-subst">&#123;step&#125;</span> 步。&quot;</span>)<br></code></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">步骤=<span class="hljs-number">995</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.02</span> 位置=-<span class="hljs-number">0.03</span> 角度=<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">996</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.02</span> 位置=-<span class="hljs-number">0.03</span> 角度=<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">997</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.02</span> 位置=-<span class="hljs-number">0.03</span> 角度=<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">998</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.02</span> 位置=-<span class="hljs-number">0.03</span> 角度=<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">999</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.02</span> 位置=-<span class="hljs-number">0.03</span> 角度=<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">1000</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.02</span> 位置=-<span class="hljs-number">0.03</span> 角度=<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>游戏通关！你坚持了 <span class="hljs-number">42.00</span> 秒 <span class="hljs-number">1000</span> 步。<br></code></pre></td></tr></table></figure><p>截取部分结果，可见 AI 成功的完成了 1000 步，说明模型很成功。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/06/25/hello-world/"/>
    <url>/2025/06/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
