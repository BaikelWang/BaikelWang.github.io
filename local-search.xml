<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>生日快乐！</title>
    <link href="/2025/07/17/%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/"/>
    <url>/2025/07/17/%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<center> <p><strong>愿你常存上等愿，坐拥人间福，高处立而平处安，宽处行且岁岁宁。</strong> </p><p><strong>生日快乐！</strong></p></center><p><img src="/img/%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/1.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构第三章：链表</title>
    <link href="/2025/07/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/"/>
    <url>/2025/07/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>顺序表的构建需要预先知道数据大小来申请连续的存储空间，而在进行扩充时又需要进行数据的搬迁，所以使用起来并不是很灵活。</p><p>例如： list &#x3D; [200] —–&gt; list &#x3D; [200,400] —–&gt;list &#x3D; [200, 400, 600]</p><p>在扩充的时候，需要预估 400、600 的数据大小来申请存储空间，在进行 400 及其数据地址的搬迁和存储，那么这个时候，我们可以设想在申请 200 的存储空间时，再多出一块空间存储直接指向下一个数据的地址，这样就可以通过 200 这个数据去找到 400，而非重新检索一个新的、不相干的空间，同时在创建 400 的时候作再多一块空间出来存储 600，这样子所有的数据就都能够由最初的数据检索到。</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/0.png"></p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/1.jpeg" alt="画板"></p><h1 id="单项链表"><a href="#单项链表" class="headerlink" title="单项链表"></a>单项链表</h1><p>单向链表也叫单链表，是链表中最简单的一种形式，它的每个节点包含两个域，一个信息域（元素域）和一个链接域。这个链接指向链表中的下一个节点，而最后一个节点的链接域则指向一个空值。</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/2.png"></p><ul><li>表元素域elem用来存放具体的数据；</li><li>链接域next用来存放下一个节点的位置（python中的标识）；</li><li>变量p指向链表的头节点（首节点）的位置，从p出发能找到表中的任意节点；</li><li>尾部节点最后的一个数据指向空。</li></ul><p>对于元素很好理解，地址该如何理解呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>在 python 中交换 a、b 变量数值操作为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a,b = b,a<br></code></pre></td></tr></table></figure><p>其本质是什么呢？</p><p>在 python 当中，10 有属于自己的地址空间，而 a &#x3D; 10 的意思是 a 的空间指向 10 的空间。</p><p>在执行这句话的时候，首先创建了一个存储空间 a，其空间地址为 0x21，然后将这个空间地址指向存储 10 的空间地址，是引用 10，而非赋值 10。</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/3.jpeg" alt="画板"></p><p>可以这么理解，变量 a 保存的是一个地址，&#x3D;相当于一个指针，这个指针使得 a 的地址指向保存 10 的地址。</p><p>因此在 python 当中，a 可以&#x3D;任何东西，例如 def、class 都可以，因为是它只是一个地址的名字，它的实际储存只是一个地址。通俗讲，大家都知道南京路 108 号有一个别墅，这个时候我说我申请了一块门牌，取名为 a，门牌地址是南京路 108 号，于是大家就明白了 a 这个地方是一个别墅，但其实呢，a 就是一个门牌，门牌储存了一个地址，这个地址上是一个别墅，但是你不能说我的 a 上面建了一个别墅，它是门牌，只是我的门牌地址指向一个别墅罢了。</p><p>明白了这个之后，就可以明白链表是怎么运作的</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/4.jpeg" alt="画板"></p><p>next &#x3D; node2 这一步的意思就是，next 这个存储空间存储的地址是指向 node2 的地址。</p><p>节点的创建方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleNode</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;单链表的结点&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,item</span>):<br>        <span class="hljs-comment"># item存放数据元素</span><br>        <span class="hljs-variable language_">self</span>.item = item<br>        <span class="hljs-comment"># next是下一个节点的标识，在初始化的时候指向none</span><br>        <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>通过以上创建 node &#x3D; SingleNode(100) 时，会创建 | 100 | none | 这样一个数据。</p><p>我们需要的单链表的操作：</p><ul><li>is_empty() 链表是否为空</li><li>length() 链表长度</li><li>travel() 遍历整个链表</li><li>add(item) 链表头部添加元素</li><li>append(item) 链表尾部添加元素</li><li>insert(pos, item) 指定位置添加元素</li><li>remove(item) 删除节点</li><li>search(item) 查找节点是否存在</li></ul><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/5.png"></p><p>在此，我们构建的 SingleLinkList 是一种新的数据类型，在使用该新数据类型的时候，相当于创建一个该数据类型的对象。例如：single_obj &#x3D; SingleLinkList()   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;  li &#x3D; List()</p><p>li、single_obj 都是具体的对象，而 SingleLinkList、List 都是类，是数据类型，是抽象的，不具体的。所以，在其中每一个链表的头节点都应该是一个对象属性， init 方法中 self.head 指向 none。而在完成了初始化之后，我们这个对象的的属性必须只能用自己内部的 def 使用，于是要用** _head 表示私有**。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleLinkList</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;单链表&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>._head = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;判断链表是否为空&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._head == <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">length</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;链表长度&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># cur是一个指针，初始时指向头节点</span><br>        cur = <span class="hljs-variable language_">self</span>._head<br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 尾节点指向None，当未到达尾部时</span><br>        <span class="hljs-keyword">while</span> cur != <span class="hljs-literal">None</span>:<br>            count += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 将cur指向下一个节点</span><br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> count<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">travel</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;遍历链表&quot;&quot;&quot;</span><br>        cur = <span class="hljs-variable language_">self</span>._head<br>        <span class="hljs-keyword">while</span> cur != <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(cur.item)<br>            <span class="hljs-comment"># 将cur指向下一个节点</span><br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done!&quot;</span>)<br><br><br></code></pre></td></tr></table></figure><h2 id="头部添加元素"><a href="#头部添加元素" class="headerlink" title="头部添加元素"></a>头部添加元素</h2><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/6.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;头部添加元素&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 先创建一个保存item值的节点</span><br>    node = SingleNode(item)<br>    <span class="hljs-comment"># 将新节点的链接域next指向原头节点，即_head指向的位置</span><br>    node.<span class="hljs-built_in">next</span> = <span class="hljs-variable language_">self</span>._head<br>    <span class="hljs-comment"># 将链表的头_head指向新节点</span><br>    <span class="hljs-variable language_">self</span>._head = node<br></code></pre></td></tr></table></figure><h2 id="尾部添加元素"><a href="#尾部添加元素" class="headerlink" title="尾部添加元素"></a>尾部添加元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">append</span>(<span class="hljs-params">self, item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;尾部添加元素&quot;&quot;&quot;</span><br>    node = SingleNode(item)<br>    <span class="hljs-comment"># 先判断链表是否为空，若是空链表，则将_head指向新节点</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_empty():<br>        <span class="hljs-variable language_">self</span>._head = node<br>    <span class="hljs-comment"># 若不为空，则找到尾部，将尾节点的next指向新节点</span><br>    <span class="hljs-keyword">else</span>:<br>        cur = <span class="hljs-variable language_">self</span>._head<br>        <span class="hljs-keyword">while</span> cur.<span class="hljs-built_in">next</span> != <span class="hljs-literal">None</span>:<br>            cur = cur.<span class="hljs-built_in">next</span><br>        cur.<span class="hljs-built_in">next</span> = node<br></code></pre></td></tr></table></figure><h2 id="指定位置添加元素"><a href="#指定位置添加元素" class="headerlink" title="指定位置添加元素"></a>指定位置添加元素</h2><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/7.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, pos, item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;指定位置添加元素&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 若指定位置pos为第一个元素之前，则执行头部插入</span><br>    <span class="hljs-keyword">if</span> pos &lt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-variable language_">self</span>.add(item)<br>    <span class="hljs-comment"># 若指定位置超过链表尾部，则执行尾部插入</span><br>    <span class="hljs-keyword">elif</span> pos &gt; (<span class="hljs-variable language_">self</span>.length()-<span class="hljs-number">1</span>):<br>        <span class="hljs-variable language_">self</span>.append(item)<br>    <span class="hljs-comment"># 找到指定位置</span><br>    <span class="hljs-keyword">else</span>:<br>        node = SingleNode(item)<br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># pre用来指向指定位置pos的前一个位置pos-1，初始从头节点开始移动到指定位置</span><br>        pre = <span class="hljs-variable language_">self</span>._head<br>        <span class="hljs-keyword">while</span> count &lt; (pos-<span class="hljs-number">1</span>):<br>            count += <span class="hljs-number">1</span><br>            pre = pre.<span class="hljs-built_in">next</span><br>        <span class="hljs-comment"># 先将新节点node的next指向插入位置的节点</span><br>        node.<span class="hljs-built_in">next</span> = pre.<span class="hljs-built_in">next</span><br>        <span class="hljs-comment"># 将插入位置的前一个节点的next指向新节点</span><br>        pre.<span class="hljs-built_in">next</span> = node<br></code></pre></td></tr></table></figure><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/8.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">self,item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;删除节点&quot;&quot;&quot;</span><br>    cur = <span class="hljs-variable language_">self</span>._head<br>    pre = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">while</span> cur != <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 找到了指定元素</span><br>        <span class="hljs-keyword">if</span> cur.item == item:<br>            <span class="hljs-comment"># 如果第一个就是删除的节点</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pre:<br>                <span class="hljs-comment"># 将头指针指向头节点的后一个节点</span><br>                <span class="hljs-variable language_">self</span>._head = cur.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 将删除位置前一个节点的next指向删除位置的后一个节点</span><br>                pre.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 继续按链表后移节点</span><br>            pre = cur<br>            cur = cur.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><h2 id="查找节点是否存在"><a href="#查找节点是否存在" class="headerlink" title="查找节点是否存在"></a>查找节点是否存在</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self,item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;链表查找节点是否存在，并返回True或者False&quot;&quot;&quot;</span><br>    cur = <span class="hljs-variable language_">self</span>._head<br>    <span class="hljs-keyword">while</span> cur != <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> cur.item == item:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        cur = cur.<span class="hljs-built_in">next</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    ll = SingleLinkList()<br>    ll.add(<span class="hljs-number">1</span>)<br>    ll.add(<span class="hljs-number">2</span>)<br>    ll.append(<span class="hljs-number">3</span>)<br>    ll.insert(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;length:&quot;</span>,ll.length())<br>    ll.travel()<br>    <span class="hljs-built_in">print</span>(ll.search(<span class="hljs-number">3</span>))<br>    <span class="hljs-built_in">print</span>(ll.search(<span class="hljs-number">5</span>))<br>    ll.remove(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;length:&quot;</span>,ll.length())<br>    ll.travel()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">结果</span><br><span class="hljs-string">length: 4</span><br><span class="hljs-string">2</span><br><span class="hljs-string">1</span><br><span class="hljs-string">4</span><br><span class="hljs-string">3</span><br><span class="hljs-string">Done!</span><br><span class="hljs-string">True</span><br><span class="hljs-string">False</span><br><span class="hljs-string">length: 3</span><br><span class="hljs-string">2</span><br><span class="hljs-string">4</span><br><span class="hljs-string">3</span><br><span class="hljs-string">Done!</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="链表与顺序表对比"><a href="#链表与顺序表对比" class="headerlink" title="链表与顺序表对比"></a>链表与顺序表对比</h2><table><thead><tr><th><strong>操作</strong></th><th align="center"><strong>链表</strong></th><th><strong>顺序表</strong></th></tr></thead><tbody><tr><td>访问元素</td><td align="center">O(n)</td><td>O(1)</td></tr><tr><td>在头部插入&#x2F;删除</td><td align="center">O(1)</td><td>O(n)</td></tr><tr><td>在尾部插入&#x2F;删除</td><td align="center">O(n)</td><td>O(1)</td></tr><tr><td>在中间插入&#x2F;删除</td><td align="center">O(n)</td><td>O(n)</td></tr></tbody></table><p>为什么我们要用链表呢？</p><p>在使用链表的时候，存储的数据内存是连续的，假如我们有一堆庞大的数据，在常规读取的时候，分配的内存是离散的，这个时候要对这些庞大数据进行读取和操作，就很慢，而用链表储存数据时，能够将这些离散的内存地址连续串起来，这样计算机在读取你的数据时，就不用检索很久，只要找到链表的任意数据的任意内存位置，就能够对其他数据位置进行定位，从而直接检索查到，这样读取数据就会快很多。</p><p>对于插入&#x2F;删除，随然链表和顺序表时间复杂度都是 O(n)，但是两个 n 是不一样的。对于链表，n 是用在了遍历上，而对于顺序表，n 是用在 了数据搬迁上。</p><h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/9.png"></p><p>相对于单向链表，双向链表在于，每个节点申请如上三个存储空间，并且把第一个块空间用来指向前一个节点。</p><p>操作：</p><ul><li>is_empty() 链表是否为空</li><li>length() 链表长度</li><li>travel() 遍历链表</li><li>add(item) 链表头部添加</li><li>append(item) 链表尾部添加</li><li>insert(pos, item) 指定位置添加</li><li>remove(item) 删除节点</li><li>search(item) 查找节点是否存在</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;双向链表节点&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-variable language_">self</span>.item = item<br>        <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.prev = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DLinkList</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;双向链表&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>._head = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;判断链表是否为空&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._head == <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">length</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;返回链表的长度&quot;&quot;&quot;</span><br>        cur = <span class="hljs-variable language_">self</span>._head<br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> cur != <span class="hljs-literal">None</span>:<br>            count += <span class="hljs-number">1</span><br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> count<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">travel</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;遍历链表&quot;&quot;&quot;</span><br>        cur = <span class="hljs-variable language_">self</span>._head<br>        <span class="hljs-keyword">while</span> cur != <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span> cur.item,<br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>上面这段代码与单向链表是一致的，可以通过 DLinkList(SingleLinkList) 来继承，这样就不用写这一段代码了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;头部插入元素&quot;&quot;&quot;</span><br>    node = Node(item)<br>    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_empty():<br>        <span class="hljs-comment"># 如果是空链表，将_head指向node</span><br>        <span class="hljs-variable language_">self</span>._head = node<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 将node的next指向_head的头节点</span><br>        node.<span class="hljs-built_in">next</span> = <span class="hljs-variable language_">self</span>._head<br>        <span class="hljs-comment"># 将_head的头节点的prev指向node</span><br>        <span class="hljs-variable language_">self</span>._head.prev = node<br>        <span class="hljs-comment"># 将_head 指向node</span><br>        <span class="hljs-variable language_">self</span>._head = node<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">append</span>(<span class="hljs-params">self, item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;尾部插入元素&quot;&quot;&quot;</span><br>    node = Node(item)<br>    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_empty():<br>        <span class="hljs-comment"># 如果是空链表，将_head指向node</span><br>        <span class="hljs-variable language_">self</span>._head = node<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 移动到链表尾部</span><br>        cur = <span class="hljs-variable language_">self</span>._head<br>        <span class="hljs-keyword">while</span> cur.<span class="hljs-built_in">next</span> != <span class="hljs-literal">None</span>:<br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-comment"># 将尾节点cur的next指向node</span><br>        cur.<span class="hljs-built_in">next</span> = node<br>        <span class="hljs-comment"># 将node的prev指向cur</span><br>        node.prev = cur<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;查找元素是否存在&quot;&quot;&quot;</span><br>    cur = <span class="hljs-variable language_">self</span>._head<br>    <span class="hljs-keyword">while</span> cur != <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> cur.item == item:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        cur = cur.<span class="hljs-built_in">next</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h2 id="指定位置插入节点"><a href="#指定位置插入节点" class="headerlink" title="指定位置插入节点"></a>指定位置插入节点</h2><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/10.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, pos, item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;在指定位置添加节点&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> pos &lt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-variable language_">self</span>.add(item)<br>    <span class="hljs-keyword">elif</span> pos &gt; (<span class="hljs-variable language_">self</span>.length()-<span class="hljs-number">1</span>):<br>        <span class="hljs-variable language_">self</span>.append(item)<br>    <span class="hljs-keyword">else</span>:<br>        node = Node(item)<br>        cur = <span class="hljs-variable language_">self</span>._head<br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 移动到指定位置的前一个位置</span><br>        <span class="hljs-keyword">while</span> count &lt; (pos-<span class="hljs-number">1</span>):<br>            count += <span class="hljs-number">1</span><br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-comment"># 将node的prev指向cur</span><br>        node.prev = cur<br>        <span class="hljs-comment"># 将node的next指向cur的下一个节点</span><br>        node.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-comment"># 将cur的下一个节点的prev指向node</span><br>        cur.<span class="hljs-built_in">next</span>.prev = node<br>        <span class="hljs-comment"># 将cur的next指向node</span><br>        cur.<span class="hljs-built_in">next</span> = node<br></code></pre></td></tr></table></figure><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/11.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">self, item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;删除元素&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_empty():<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>        cur = <span class="hljs-variable language_">self</span>._head<br>        <span class="hljs-keyword">if</span> cur.item == item:<br>            <span class="hljs-comment"># 如果首节点的元素即是要删除的元素</span><br>            <span class="hljs-keyword">if</span> cur.<span class="hljs-built_in">next</span> == <span class="hljs-literal">None</span>:<br>                <span class="hljs-comment"># 如果链表只有这一个节点</span><br>                <span class="hljs-variable language_">self</span>._head = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 将第二个节点的prev设置为None</span><br>                cur.<span class="hljs-built_in">next</span>.prev = <span class="hljs-literal">None</span><br>                <span class="hljs-comment"># 将_head指向第二个节点</span><br>                <span class="hljs-variable language_">self</span>._head = cur.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">while</span> cur != <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> cur.item == item:<br>                <span class="hljs-comment"># 将cur的前一个节点的next指向cur的后一个节点</span><br>                cur.prev.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span><br>                <span class="hljs-comment"># 将cur的后一个节点的prev指向cur的前一个节点</span><br>                cur.<span class="hljs-built_in">next</span>.prev = cur.prev<br>                <span class="hljs-keyword">break</span><br>            cur = cur.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><h1 id="单向循环链表"><a href="#单向循环链表" class="headerlink" title="单向循环链表"></a>单向循环链表</h1><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8/12.png"></p><p>单链表的一个变形是单向循环链表，链表中最后一个节点的next域不再为None，而是指向链表的头节点。</p><p>操作：</p><ul><li>is_empty() 判断链表是否为空</li><li>length() 返回链表的长度</li><li>travel() 遍历</li><li>add(item) 在头部添加一个节点</li><li>append(item) 在尾部添加一个节点</li><li>insert(pos, item) 在指定位置pos添加节点</li><li>remove(item) 删除一个节点</li><li>search(item) 查找节点是否存在</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;节点&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-variable language_">self</span>.item = item<br>        <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SinCycLinkedlist</span>(<span class="hljs-built_in">object</span>, node=<span class="hljs-literal">None</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;单向循环链表&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>._head = node<br>        <span class="hljs-keyword">if</span> node:<br>            node.<span class="hljs-built_in">next</span> = node<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;判断链表是否为空&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._head == <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">length</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;返回链表的长度&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 如果链表为空，返回长度0</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_empty():<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        count = <span class="hljs-number">1</span><br>        cur = <span class="hljs-variable language_">self</span>._head<br>        <span class="hljs-keyword">while</span> cur.<span class="hljs-built_in">next</span> != <span class="hljs-variable language_">self</span>._head:<br>            count += <span class="hljs-number">1</span><br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> count<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">travel</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;遍历链表&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_empty():<br>            <span class="hljs-keyword">return</span><br>        cur = <span class="hljs-variable language_">self</span>._head<br>        <span class="hljs-built_in">print</span> cur.item,<br>        <span class="hljs-keyword">while</span> cur.<span class="hljs-built_in">next</span> != <span class="hljs-variable language_">self</span>._head:<br>            cur = cur.<span class="hljs-built_in">next</span><br>            <span class="hljs-built_in">print</span>(cur.item)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;头部添加节点&quot;&quot;&quot;</span><br>        node = Node(item)<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_empty():<br>            <span class="hljs-variable language_">self</span>._head = node<br>            node.<span class="hljs-built_in">next</span> = <span class="hljs-variable language_">self</span>._head<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment">#添加的节点指向_head</span><br>            node.<span class="hljs-built_in">next</span> = <span class="hljs-variable language_">self</span>._head<br>            <span class="hljs-comment"># 移到链表尾部，将尾部节点的next指向node</span><br>            cur = <span class="hljs-variable language_">self</span>._head<br>            <span class="hljs-keyword">while</span> cur.<span class="hljs-built_in">next</span> != <span class="hljs-variable language_">self</span>._head:<br>                cur = cur.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = node<br>            <span class="hljs-comment">#_head指向添加node的</span><br>            <span class="hljs-variable language_">self</span>._head = node<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">append</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;尾部添加节点&quot;&quot;&quot;</span><br>        node = Node(item)<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_empty():<br>            <span class="hljs-variable language_">self</span>._head = node<br>            node.<span class="hljs-built_in">next</span> = <span class="hljs-variable language_">self</span>._head<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 移到链表尾部</span><br>            cur = <span class="hljs-variable language_">self</span>._head<br>            <span class="hljs-keyword">while</span> cur.<span class="hljs-built_in">next</span> != <span class="hljs-variable language_">self</span>._head:<br>                cur = cur.<span class="hljs-built_in">next</span><br>            <span class="hljs-comment"># 将尾节点指向node</span><br>            cur.<span class="hljs-built_in">next</span> = node<br>            <span class="hljs-comment"># 将node指向头节点_head</span><br>            node.<span class="hljs-built_in">next</span> = <span class="hljs-variable language_">self</span>._head<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, pos, item</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在指定位置添加节点&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> pos &lt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.add(item)<br>        <span class="hljs-keyword">elif</span> pos &gt; (<span class="hljs-variable language_">self</span>.length()-<span class="hljs-number">1</span>):<br>            <span class="hljs-variable language_">self</span>.append(item)<br>        <span class="hljs-keyword">else</span>:<br>            node = Node(item)<br>            cur = <span class="hljs-variable language_">self</span>._head<br>            count = <span class="hljs-number">0</span><br>            <span class="hljs-comment"># 移动到指定位置的前一个位置</span><br>            <span class="hljs-keyword">while</span> count &lt; (pos-<span class="hljs-number">1</span>):<br>                count += <span class="hljs-number">1</span><br>                cur = cur.<span class="hljs-built_in">next</span><br>            node.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = node<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;删除一个节点&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 若链表为空，则直接返回</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_empty():<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 将cur指向头节点</span><br>        cur = <span class="hljs-variable language_">self</span>._head<br>        pre = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># 若头节点的元素就是要查找的元素item</span><br>        <span class="hljs-keyword">if</span> cur.item == item:<br>            <span class="hljs-comment"># 如果链表不止一个节点</span><br>            <span class="hljs-keyword">if</span> cur.<span class="hljs-built_in">next</span> != <span class="hljs-variable language_">self</span>._head:<br>                <span class="hljs-comment"># 先找到尾节点，将尾节点的next指向第二个节点</span><br>                <span class="hljs-keyword">while</span> cur.<span class="hljs-built_in">next</span> != <span class="hljs-variable language_">self</span>._head:<br>                    cur = cur.<span class="hljs-built_in">next</span><br>                <span class="hljs-comment"># cur指向了尾节点</span><br>                cur.<span class="hljs-built_in">next</span> = <span class="hljs-variable language_">self</span>._head.<span class="hljs-built_in">next</span><br>                <span class="hljs-variable language_">self</span>._head = <span class="hljs-variable language_">self</span>._head.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 链表只有一个节点</span><br>                <span class="hljs-variable language_">self</span>._head = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">else</span>:<br>            pre = <span class="hljs-variable language_">self</span>._head<br>            <span class="hljs-comment"># 第一个节点不是要删除的</span><br>            <span class="hljs-keyword">while</span> cur.<span class="hljs-built_in">next</span> != <span class="hljs-variable language_">self</span>._head:<br>                <span class="hljs-comment"># 找到了要删除的元素</span><br>                <span class="hljs-keyword">if</span> cur.item == item:<br>                    <span class="hljs-comment"># 删除</span><br>                    pre.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span><br>                    <span class="hljs-keyword">return</span><br>                <span class="hljs-keyword">else</span>:<br>                    pre = cur<br>                    cur = cur.<span class="hljs-built_in">next</span><br>            <span class="hljs-comment"># cur 指向尾节点</span><br>            <span class="hljs-keyword">if</span> cur.item == item:<br>                <span class="hljs-comment"># 尾部删除</span><br>                pre.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;查找节点是否存在&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_empty():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        cur = <span class="hljs-variable language_">self</span>._head<br>        <span class="hljs-keyword">if</span> cur.item == item:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">while</span> cur.<span class="hljs-built_in">next</span> != <span class="hljs-variable language_">self</span>._head:<br>            cur = cur.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> cur.item == item:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>单向循环链表区别于单向链表的实现方式的关键在于找尾部节点的方式不同，单向链表尾部节点指向 none，而单向循环链表的尾部节点指向头节点。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在腾讯云轻量级服务器中部署hugoblox静态网站</title>
    <link href="/2025/07/11/%E5%9C%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E9%83%A8%E7%BD%B2hugoblox%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/"/>
    <url>/2025/07/11/%E5%9C%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E9%83%A8%E7%BD%B2hugoblox%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h1><p><em>腾讯云购买任意轻量级服务器—–&gt;配置 Ubuntu 系统—–&gt;购买域名 xxx.cn—–&gt;备案—–&gt;开启域名解析</em></p><p>这一步骤请参考其他博主的文章，在这里不过多赘述，以下是本文核心，在服务器中部署 hugo。</p><h1 id="配置-caddy"><a href="#配置-caddy" class="headerlink" title="配置 caddy"></a>配置 caddy</h1><p>在完成了上述步骤之后，来到你的服务器控制台主页，登录进入服务器：</p><p><img src="/img/%E5%BB%BA%E7%BD%91%E7%AB%99/denglu.png"></p><p>选择中间的<strong>密码&#x2F;密钥登录</strong>，然后再从中选择 root 一键登录来到终端。</p><p>首先，安装 caddyv2，在终端命令行中输入：</p><p>参考<a href="https://caddy2.dengxiaolong.com/docs/install">https://caddy2.dengxiaolong.com/docs/install</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install -y debian-keyring debian-archive-keyring apt-transport-https<br>curl -1sLf <span class="hljs-string">&#x27;https://dl.cloudsmith.io/public/caddy/stable/gpg.key&#x27;</span> | <span class="hljs-built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg<br>curl -1sLf <span class="hljs-string">&#x27;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt&#x27;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/caddy-stable.list<br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install caddy<br></code></pre></td></tr></table></figure><p>安装完成之后，找到 caddyfile：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> find / -name <span class="hljs-string">&quot;Caddyfile&quot;</span><br><br><span class="hljs-string">&#x27;nano /etc/caddy/Caddyfile&#x27;</span><br></code></pre></td></tr></table></figure><p>接下来配置Caddyfile以反向代理到本地服务：</p><h3 id="1-编辑Caddyfile"><a href="#1-编辑Caddyfile" class="headerlink" title="1. 编辑Caddyfile"></a>1. 编辑Caddyfile</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/caddy/Caddyfile<br></code></pre></td></tr></table></figure><h3 id="2-添加域名配置"><a href="#2-添加域名配置" class="headerlink" title="2. 添加域名配置"></a>2. 添加域名配置</h3><p>在文件中写入（将 <code>xxx.cn</code> 替换为你的实际域名）：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx">xxx.<span class="hljs-section">cn</span> &#123;<br>    <span class="hljs-attribute">reverse_proxy</span> <span class="hljs-number">127.0.0.1:1313</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这里 127.0.0.1 是服务器默认的 localhost 的 ip 地址，1313 是 hugo 默认的部署页面端口号，下文会用到。</p><h3 id="3-保存并退出"><a href="#3-保存并退出" class="headerlink" title="3. 保存并退出"></a>3. 保存并退出</h3><ul><li>Nano编辑器：按 <code>Ctrl+O</code> 保存 → 回车确认 → <code>Ctrl+X</code> 退出</li></ul><h3 id="4-重载Caddy服务"><a href="#4-重载Caddy服务" class="headerlink" title="4. 重载Caddy服务"></a>4. 重载Caddy服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl reload caddy<br></code></pre></td></tr></table></figure><h3 id="5-验证配置"><a href="#5-验证配置" class="headerlink" title="5. 验证配置"></a>5. 验证配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> caddy validate --config /etc/caddy/Caddyfile<br></code></pre></td></tr></table></figure><p>出现 <code>Valid configuration</code> 表示配置正确</p><h3 id="6-检查服务状态"><a href="#6-检查服务状态" class="headerlink" title="6. 检查服务状态"></a>6. 检查服务状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl status caddy<br></code></pre></td></tr></table></figure><p>查看是否有错误日志（重点关注域名解析和代理绑定）</p><h3 id="重要提示："><a href="#重要提示：" class="headerlink" title="重要提示："></a>重要提示：</h3><ol><li><strong>域名准备</strong>：<ul><li>确保域名已解析到服务器IP（通过 <code>ping www.xxx.cn</code> 验证）</li><li>如果服务器有防火墙（如UFW），开放80&#x2F;443端口：</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ufw allow 80,443/tcp<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>服务检查</strong>：<ul><li>确认本地服务已在 <code>127.0.0.1:1313</code> 运行：</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -I 127.0.0.1:1313<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>HTTPS自动化</strong>：<br>Caddy会自动：<ul><li>申请Let’s Encrypt证书</li><li>将HTTP重定向到HTTPS</li><li>无需额外配置</li></ul></li></ol><h3 id="常见问题排查："><a href="#常见问题排查：" class="headerlink" title="常见问题排查："></a>常见问题排查：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看详细日志</span><br>journalctl -u caddy -f<br><br><span class="hljs-comment"># 测试配置语法</span><br><span class="hljs-built_in">sudo</span> caddy <span class="hljs-built_in">fmt</span> --overwrite /etc/caddy/Caddyfile  <span class="hljs-comment"># 自动格式化配置</span><br><span class="hljs-built_in">sudo</span> caddy adapt --config /etc/caddy/Caddyfile   <span class="hljs-comment"># 检查配置转换</span><br></code></pre></td></tr></table></figure><p>完成以上步骤后，访问 <code>https://www.xxx.cn</code> 即可看到反向代理后的内容。整个过程通常不超过2分钟生效。</p><h1 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h1><p>完成上述步骤之后，在 Ubuntu 上安装 Hugo：</p><h3 id="推荐方法：安装最新扩展版（支持Sass-SCSS）"><a href="#推荐方法：安装最新扩展版（支持Sass-SCSS）" class="headerlink" title="推荐方法：安装最新扩展版（支持Sass&#x2F;SCSS）"></a>推荐方法：安装最新扩展版（支持Sass&#x2F;SCSS）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 确定最新版本号（替换为实际最新版本）</span><br>LATEST=$(curl -s https://api.github.com/repos/gohugoio/hugo/releases/latest | grep <span class="hljs-string">&#x27;tag_name&#x27;</span> | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;&quot;&#x27;</span> -f 4)<br><br><span class="hljs-comment"># 2. 下载扩展版（64位系统）</span><br>wget https://github.com/gohugoio/hugo/releases/download/<span class="hljs-variable">$&#123;LATEST&#125;</span>/hugo_extended_<span class="hljs-variable">$&#123;LATEST#v&#125;</span>_linux-amd64.tar.gz<br><br><span class="hljs-comment"># 3. 解压安装</span><br><span class="hljs-built_in">sudo</span> tar -xvzf hugo_extended_<span class="hljs-variable">$&#123;LATEST#v&#125;</span>_linux-amd64.tar.gz -C /usr/local/bin<br><br><span class="hljs-comment"># 4. 验证安装</span><br>hugo version<br></code></pre></td></tr></table></figure><p>或者你直接从<a href="https://github.com/gohugoio/hugo/releases/">https://github.com/gohugoio/hugo/releases/</a> 中把安装包下载下来，然后用 sftp 上传到服务器的指定位置，然后 cd 的相应的目录下面用本地安装：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> dpkg -i hugo_extended_0.<span class="hljs-number">143</span>.1_linux-amd64.deb<br></code></pre></td></tr></table></figure><h3 id="验证安装成功"><a href="#验证安装成功" class="headerlink" title="验证安装成功"></a>验证安装成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hugo version<br></code></pre></td></tr></table></figure><p>应显示类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">hugo v0.123.7-5d4eb5154e+extended linux/amd64 BuildDate=2023-11-06T12:32:09Z<br></code></pre></td></tr></table></figure><h3 id="创建测试站点（可选）"><a href="#创建测试站点（可选）" class="headerlink" title="创建测试站点（可选）"></a>创建测试站点（可选）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建新站点</span><br>hugo new site mysite<br><span class="hljs-built_in">cd</span> mysite<br><br><span class="hljs-comment"># 2. 添加主题（以ananke为例）</span><br>git init<br>git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;theme = &#x27;ananke&#x27;&quot;</span> &gt;&gt; hugo.toml<br><br><span class="hljs-comment"># 3. 创建测试页面</span><br>hugo new posts/my-first-post.md<br><br><span class="hljs-comment"># 4. 启动本地服务器（会在1313端口运行）</span><br>hugo server -D<br></code></pre></td></tr></table></figure><h3 id="与Caddy集成（可选）"><a href="#与Caddy集成（可选）" class="headerlink" title="与Caddy集成（可选）"></a>与Caddy集成（可选）</h3><ol><li>启动Hugo生成静态文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在Hugo站点目录执行</span><br>hugo  <span class="hljs-comment"># 生成到public目录</span><br></code></pre></td></tr></table></figure><ol start="2"><li>修改Caddyfile配置：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx">www.xxx.<span class="hljs-section">cn</span> &#123;<br>    <span class="hljs-attribute">root</span> * /path/to/mysite/public  <span class="hljs-comment"># 指定Hugo生成的静态文件目录</span><br>    file_server<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>重载Caddy：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl reload caddy<br></code></pre></td></tr></table></figure><h3 id="我的方法"><a href="#我的方法" class="headerlink" title="我的方法"></a>我的方法</h3><p>我将<a href="https://github.com/HugoBlox/theme-research-group">https://github.com/HugoBlox/theme-research-group</a> 这个提供的主题文件下载到本地，然后通过 sftp 上载到服务器中 root&#x2F;web 这一目录下，然后在这一目录中执行</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hugo</span> server -D<br><span class="hljs-comment"># 结果</span><br><span class="hljs-comment"># Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)</span><br><span class="hljs-comment">#Rebuilt in 727 ms</span><br></code></pre></td></tr></table></figure><p>然后输入如下，让服务器一直挂起。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nohup</span> hugo server -D &gt; hugo.log <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure><p>这样就能查看网页了，而且还有一个好处，就是你在修改 hugoblox 文件时候，网页会随着你的修改实时刷新，你可以实时看到你修改的结果，很方便。</p><p><img src="/img/%E5%BB%BA%E7%BD%91%E7%AB%99/web.png"></p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站</tag>
      
      <tag>域名</tag>
      
      <tag>caddy</tag>
      
      <tag>hugo blox</tag>
      
      <tag>腾讯云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>子域名的申请和反向代理配置</title>
    <link href="/2025/07/11/%E5%AD%90%E5%9F%9F%E5%90%8D%E7%9A%84%E7%94%B3%E8%AF%B7%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <url>/2025/07/11/%E5%AD%90%E5%9F%9F%E5%90%8D%E7%9A%84%E7%94%B3%E8%AF%B7%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>之前不是在腾讯云中购买了一个域名和服务器嘛，然后我自己的网站是 baikelwang.github.io，现在我想给自己的网站申请一个子域名，这样国内也能解析到，就不会被墙了。</p><h1 id="创建子域名"><a href="#创建子域名" class="headerlink" title="创建子域名"></a>创建子域名</h1><p>找到腾讯云的云解析 DNS，然后点击你的域名。</p><p><img src="/img/%E5%BB%BA%E7%BD%91%E7%AB%99/yundns.png"></p><p>然后点击添加域名解析，创建一条如是的解析记录</p><p><img src="/img/%E5%BB%BA%E7%BD%91%E7%AB%99/jiexi.png"></p><p>请注意，一定要 CNAME 类型，然后填你的 github 网站，不要用 ip 地址！</p><h1 id="配置-caddy"><a href="#配置-caddy" class="headerlink" title="配置 caddy"></a>配置 caddy</h1><p>关于 caddy 为什么要配置，请结合 _**在腾讯云轻量级服务器中部署hugoblox静态网站 **_一文。</p><h3 id="步骤-1：配置-Caddyfile"><a href="#步骤-1：配置-Caddyfile" class="headerlink" title="步骤 1：配置 Caddyfile"></a>步骤 1：配置 Caddyfile</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/caddy/Caddyfile<br></code></pre></td></tr></table></figure><p>添加以下配置（替换 <code>xxx.cn</code> 为您的实际域名）：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 主域名配置</span><br>www.xxx.<span class="hljs-section">cn</span> &#123;<br>    <span class="hljs-attribute">reverse_proxy</span> <span class="hljs-number">127.0.0.1:1313</span><br>&#125;<br><br><span class="hljs-comment"># 子域名配置 - 反向代理到 GitHub Pages</span><br>baikel.xxx.cn &#123;<br>    <span class="hljs-attribute">reverse_proxy</span> https://baikelwang.github.io &#123;<br>        <span class="hljs-comment"># 重要：设置正确的 Host 头</span><br>        <span class="hljs-attribute">header_up</span> Host &#123;upstream_hostport&#125;<br>        <span class="hljs-comment"># 其他必要的头设置</span><br>        <span class="hljs-attribute">header_up</span> X-Forwarded-For &#123;remote_host&#125;<br>    &#125;<br>  <br>    <span class="hljs-comment"># 强制 HTTPS（可选但推荐）</span><br>    <span class="hljs-attribute">redir</span> https://&#123;host&#125;&#123;uri&#125; <span class="hljs-attribute">permanent</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-2：保存并应用配置"><a href="#步骤-2：保存并应用配置" class="headerlink" title="步骤 2：保存并应用配置"></a>步骤 2：保存并应用配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 保存文件 (Nano: Ctrl+O → Enter → Ctrl+X)</span><br><span class="hljs-built_in">sudo</span> caddy validate --config /etc/caddy/Caddyfile  <span class="hljs-comment"># 验证配置</span><br><span class="hljs-built_in">sudo</span> systemctl reload caddy  <span class="hljs-comment"># 重新加载服务</span><br></code></pre></td></tr></table></figure><h3 id="步骤-3：DNS-配置（关键）"><a href="#步骤-3：DNS-配置（关键）" class="headerlink" title="步骤 3：DNS 配置（关键）"></a>步骤 3：DNS 配置（关键）</h3><ol><li><strong>在域名控制台检查 CNAME 记录</strong>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">类型: CNAME<br>名称: baikel<br>值: baikelwang.github.io<br>TTL: 自动<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>验证 DNS 解析</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dig baikel.xxx.cn +short<br><span class="hljs-comment"># 应返回 baikelwang.github.io 的 IP 地址</span><br></code></pre></td></tr></table></figure><h3 id="步骤-4：GitHub-Pages-设置"><a href="#步骤-4：GitHub-Pages-设置" class="headerlink" title="步骤 4：GitHub Pages 设置"></a>步骤 4：GitHub Pages 设置</h3><ol><li>在 GitHub 仓库设置中添加自定义域名：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">Settings → Pages → Custom domain → 输入 &quot;baikel.xxx.cn&quot;<br></code></pre></td></tr></table></figure><ol start="2"><li>勾选 “Enforce HTTPS” 选项</li></ol><h3 id="步骤-5：验证配置"><a href="#步骤-5：验证配置" class="headerlink" title="步骤 5：验证配置"></a>步骤 5：验证配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检查 Caddy 日志</span><br><span class="hljs-built_in">sudo</span> journalctl -u caddy -f --since <span class="hljs-string">&quot;5 minutes ago&quot;</span><br><br><span class="hljs-comment"># 测试访问</span><br>curl -I https://baikel.xxx.cn<br><span class="hljs-comment"># 应返回 200 OK 和 GitHub 的服务器头</span><br></code></pre></td></tr></table></figure><h3 id="步骤-6：在-hexo-中配置-cname"><a href="#步骤-6：在-hexo-中配置-cname" class="headerlink" title="步骤 6：在 hexo 中配置 cname"></a>步骤 6：在 hexo 中配置 cname</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入项目目录</span><br><span class="hljs-built_in">cd</span> /path/to/your/hexo/project<br><span class="hljs-comment"># 创建 CNAME 文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;baikel.iamlgao.cn&quot;</span> &gt; <span class="hljs-built_in">source</span>/CNAME<br></code></pre></td></tr></table></figure><h3 id="高级配置选项"><a href="#高级配置选项" class="headerlink" title="高级配置选项"></a>高级配置选项</h3><h4 id="1-添加-HSTS-安全头"><a href="#1-添加-HSTS-安全头" class="headerlink" title="1. 添加 HSTS 安全头"></a>1. 添加 HSTS 安全头</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx">baikel.xxx.<span class="hljs-section">cn</span> &#123;<br>    <span class="hljs-attribute">header</span> Strict-Transport-Security <span class="hljs-string">&quot;max-age=31536000;&quot;</span><br>    <span class="hljs-comment"># ...其他配置...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-缓存优化（提升速度）"><a href="#2-缓存优化（提升速度）" class="headerlink" title="2. 缓存优化（提升速度）"></a>2. 缓存优化（提升速度）</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx">baikel.xxx.<span class="hljs-section">cn</span> &#123;<br>    <span class="hljs-attribute">reverse_proxy</span> https://baikelwang.github.io &#123;<br>        <span class="hljs-attribute">header_up</span> Host &#123;upstream_hostport&#125;<br>      <br>        <span class="hljs-comment"># 缓存静态资源</span><br>        @<span class="hljs-section">static</span> &#123;<br>            <span class="hljs-attribute">path</span> <span class="hljs-regexp">*.css</span> <span class="hljs-regexp">*.js</span> <span class="hljs-regexp">*.jpg</span> <span class="hljs-regexp">*.png</span> <span class="hljs-regexp">*.gif</span><br>        &#125;<br>        reverse_proxy_cache <span class="hljs-variable">@static</span> &#123;<br>            <span class="hljs-attribute">duration</span> <span class="hljs-number">24h</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-备用方案（如果反向代理有问题）"><a href="#3-备用方案（如果反向代理有问题）" class="headerlink" title="3. 备用方案（如果反向代理有问题）"></a>3. 备用方案（如果反向代理有问题）</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx">baikel.xxx.<span class="hljs-section">cn</span> &#123;<br>    <span class="hljs-comment"># 直接重定向（不保留URL路径）</span><br>    <span class="hljs-attribute">redir</span> https://baikelwang.github.io&#123;uri&#125; <span class="hljs-attribute">permanent</span><br>  <br>    <span class="hljs-comment"># 或保留完整路径的重定向</span><br>    rewrite * /&#123;path&#125;?&#123;query&#125;<br>    <span class="hljs-attribute">redir</span> https://baikelwang.github.io&#123;uri&#125; <span class="hljs-attribute">permanent</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h3><p><strong>问题：访问显示 404 或 GitHub 404 页面</strong></p><ul><li>检查 GitHub 仓库设置中是否添加了 <code>baikel.xxx.cn</code></li><li>在仓库根目录添加 <code>CNAME</code> 文件（内容为 <code>baikel.xxx.cn</code>）</li></ul><p><strong>问题：SSL 证书错误</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 强制重新申请证书</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/lib/caddy/.local/share/caddy/certificates/acme-v02.api.letsencrypt.org-directory/baikel.xxx.cn*<br><span class="hljs-built_in">sudo</span> systemctl restart caddy<br></code></pre></td></tr></table></figure><p><strong>问题：内容更新延迟</strong></p><ul><li>GitHub Pages 有 1-10 分钟的缓存延迟</li><li>在 Caddy 配置中添加缓存清除机制：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">header</span> Cache-Control <span class="hljs-string">&quot;public, max-age=300&quot;</span>  <span class="hljs-comment"># 5分钟缓存</span><br></code></pre></td></tr></table></figure><p>完成以上步骤后，<code>baikel.xxx.cn</code> 将作为子域名指向GitHub Pages 网站，并通过 Caddy 自动获得 SSL 证书。整个过程通常需要 5-30 分钟生效（主要取决于 DNS 传播时间）。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站</tag>
      
      <tag>域名</tag>
      
      <tag>caddy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>训练带有磁矩的数据</title>
    <link href="/2025/07/09/%E8%AE%AD%E7%BB%83%E5%B8%A6%E6%9C%89%E7%A3%81%E7%9F%A9%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
    <url>/2025/07/09/%E8%AE%AD%E7%BB%83%E5%B8%A6%E6%9C%89%E7%A3%81%E7%9F%A9%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>上一篇写到了成功获取了晶体中每个原子的磁矩，并能够将其添加入原子特征的第 93 维度，今天接着写我是如何一步一步把它导入模型中训练的。</p><p>我们缕一缕数据处理的流程：</p><ol><li>从 MP 中获取 data 的 doc 以及 structure；</li><li>使用 CIFwriter 把 structure 写入 cif 文件，并且设置 write_magmoms&#x3D;True；</li><li>把晶体的预测性质写入 id_prop.csv;</li><li>通过 CIFData 类读取 dataset；在生成 atom_fea 时将 magmon 写入第 93 维度；</li><li>通过 crystal_graph_list 函数生成 graph 数据。</li></ol><h2 id="首先获取数据"><a href="#首先获取数据" class="headerlink" title="首先获取数据"></a>首先获取数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> mp_api.client <span class="hljs-keyword">import</span> MPRester<br><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pymatgen.io.cif <span class="hljs-keyword">import</span> CifWriter<br>API_KEY = <span class="hljs-string">&quot;&quot;</span><br>mpr = MPRester(<br>API_KEY)<br>M_docs = mpr.materials.summary.search(<br>        total_magnetization=(<span class="hljs-number">0.2</span>, <span class="hljs-literal">None</span>),  <span class="hljs-comment"># 总磁化强度 &gt; 0.2 μB/unit cell</span><br>        num_elements=(<span class="hljs-number">3</span>, <span class="hljs-number">92</span>),              <span class="hljs-comment"># 限制元素数量</span><br>        fields=[<span class="hljs-string">&quot;material_id&quot;</span>, <span class="hljs-string">&quot;structure&quot;</span>, <span class="hljs-string">&quot;is_magnetic&quot;</span>],<br>        chunk_size=<span class="hljs-number">10</span>,<br>        num_chunks=<span class="hljs-number">100</span><br>        )<br>NM_docs = mpr.materials.summary.search(<br>        total_magnetization=(<span class="hljs-literal">None</span>, <span class="hljs-number">0.1</span>),  <span class="hljs-comment"># 总磁化强度 &lt; 0.1 μB/unit cell</span><br>        num_elements=(<span class="hljs-number">3</span>, <span class="hljs-number">92</span>),              <span class="hljs-comment"># 限制元素数量</span><br>        fields=[<span class="hljs-string">&quot;material_id&quot;</span>, <span class="hljs-string">&quot;structure&quot;</span>, <span class="hljs-string">&quot;is_magnetic&quot;</span>],<br>        chunk_size=<span class="hljs-number">10</span>,<br>        num_chunks=<span class="hljs-number">100</span><br>        )<br></code></pre></td></tr></table></figure><p>这样严格区分开磁性晶体和非磁性，方便后续检查和确认数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> tqdm(M_docs):<br>        <span class="hljs-built_in">id</span> = entry.material_id<br>        file_path = os.path.join(<span class="hljs-string">&#x27;magmon_dataset_2000&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>) + <span class="hljs-string">&quot;.cif&quot;</span>)<br>        structure = entry.structure<br>        <span class="hljs-comment"># 再写入时一定要注意，将写入磁矩设置为Ture</span><br>        cif_writer = CifWriter(structure, write_magmoms=<span class="hljs-literal">True</span>) <br>        cif_writer.write_file(file_path)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;磁性材料结构获取完成&#x27;</span>)<br><span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> tqdm(NM_docs):<br>        <span class="hljs-built_in">id</span> = entry.material_id<br>        file_path = os.path.join(<span class="hljs-string">&#x27;magmon_dataset_2000&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>) + <span class="hljs-string">&quot;.cif&quot;</span>)<br>        structure = entry.structure<br>        cif_writer = CifWriter(structure, write_magmoms=<span class="hljs-literal">True</span>) <br>        cif_writer.write_file(file_path)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;非磁性材料结构获取完成&#x27;</span>)<br></code></pre></td></tr></table></figure><p>最后生成 csv：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;magmon_dataset_2000/id_prop.csv&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">as</span> csvfile:<br>    <span class="hljs-comment"># 创建一个csv写入器</span><br>    writer = csv.writer(csvfile)<br>    header = [<span class="hljs-string">&#x27;Material&#x27;</span>, <span class="hljs-string">&#x27;is_Magnetic&#x27;</span>]<br>    writer.writerow(header)<br>    <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> tqdm(M_docs):<br>        <span class="hljs-comment"># 遍历列表，写入每一行数据</span><br>        <span class="hljs-keyword">if</span> entry.is_magnetic:<br>            magnetic = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            magnetic = <span class="hljs-number">0</span><br>        <span class="hljs-built_in">id</span> = entry.material_id<br>        writer.writerow([<span class="hljs-built_in">id</span>, magnetic])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;磁性材料写入完成！&#x27;</span>)<br><br>    <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> tqdm(NM_docs):<br>        <span class="hljs-comment"># 遍历列表，写入每一行数据</span><br>        <span class="hljs-keyword">if</span> entry.is_magnetic:<br>            magnetic = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            magnetic = <span class="hljs-number">0</span><br>        <span class="hljs-built_in">id</span> = entry.material_id<br>        writer.writerow([<span class="hljs-built_in">id</span>, magnetic])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All done!&quot;</span>)<br></code></pre></td></tr></table></figure><p>这样子生成的 cif 文件都是包含下面两个 loop 字段的，说明是写入了磁矩信息，在读取的时候就能读到每个原子的 magmon。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">loop_<br> _atom_site_type_symbol<br> _atom_site_label<br> _atom_site_symmetry_multiplicity<br> _atom_site_fract_x<br> _atom_site_fract_y<br> _atom_site_fract_z<br> _atom_site_occupancy<br>  Ac  Ac0  <span class="hljs-number">1</span>  -<span class="hljs-number">0.00000000</span>  -<span class="hljs-number">0.00000000</span>  -<span class="hljs-number">0.00000000</span>  <span class="hljs-number">1</span><br>  Cr  Cr1  <span class="hljs-number">1</span>  <span class="hljs-number">0.50000000</span>  <span class="hljs-number">0.50000000</span>  <span class="hljs-number">0.50000000</span>  <span class="hljs-number">1</span><br>  O  O2  <span class="hljs-number">1</span>  <span class="hljs-number">0.50000000</span>  <span class="hljs-number">0.50000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">1</span><br>  O  O3  <span class="hljs-number">1</span>  <span class="hljs-number">0.50000000</span>  -<span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.50000000</span>  <span class="hljs-number">1</span><br>  O  O4  <span class="hljs-number">1</span>  -<span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.50000000</span>  <span class="hljs-number">0.50000000</span>  <span class="hljs-number">1</span><br>loop_<br> _atom_site_moment_label<br> _atom_site_moment_crystalaxis_x<br> _atom_site_moment_crystalaxis_y<br> _atom_site_moment_crystalaxis_z<br>  Ac0  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.01500000</span><br>  Cr1  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">2.71800000</span><br>  O2  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.03800000</span><br>  O3  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.03800000</span><br>  O4  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.03800000</span><br></code></pre></td></tr></table></figure><h2 id="接着对数据进行读取"><a href="#接着对数据进行读取" class="headerlink" title="接着对数据进行读取"></a>接着对数据进行读取</h2><p>按照上述步骤，在这里需要依次进行 CIFData 的读取和 graph 数据生成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">dataset = <span class="hljs-string">&quot;magmon_dataset_2000&quot;</span><br>data = CIFData(dataset, target_name=<span class="hljs-string">&#x27;is_Magnetic&#x27;</span>)<br>graph = crystal_graph_list(data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是图数据&#x27;</span>)<br><span class="hljs-built_in">print</span>(data[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>但是这里出现了严重错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">ZeroDivisionError                         Traceback (most recent call last)<br>Cell In[23], line 5<br>      3 #graph = crystal_graph_list(data)<br>      4 print(&#x27;这是图数据&#x27;)<br>----&gt; 5 print(data[0])<br><br>File e:\WYX_Project\CSAT_demo_2\test_view\csat\crystal_data.py:223, in CIFData.__getitem__(self, idx)<br>    220 if not target_value:<br>    221     raise ValueError(f&quot;Empty target value for &#123;self.target_name&#125; in &#123;cif_id&#125;&quot;)<br>--&gt; 223 crystal = Structure.from_file(os.path.join(self.root_dir,<br>    224                                            cif_id + &#x27;.cif&#x27;))<br>    226 if self.target_name == &#x27;is_Magnetic&#x27;:<br>    227     # 如果目标是磁矩，则将原子特征扩展为包含磁矩<br>    228     atom_fea_list = []<br><br>File e:\anaconda3\envs\pytorch\Lib\site-packages\pymatgen\core\structure.py:3202, in IStructure.from_file(cls, filename, primitive, sort, merge_tol, **kwargs)<br>   3200 contents: str = file.read()  # type:ignore[assignment]<br>   3201 if fnmatch(fname.lower(), &quot;*.cif*&quot;) or fnmatch(fname.lower(), &quot;*.mcif*&quot;):<br>-&gt; 3202     return cls.from_str(<br>   3203         contents,<br>   3204         fmt=&quot;cif&quot;,<br>   3205         primitive=primitive,<br>   3206         sort=sort,<br>   3207         merge_tol=merge_tol,<br>...<br>--&gt; 230 if len(items) % n != 0:<br>    231     raise ValueError(f&quot;&#123;len(items)=&#125; is not a multiple of &#123;n=&#125;&quot;)<br>    232 loops.append(columns)<br><br>ZeroDivisionError: integer modulo by zero<br></code></pre></td></tr></table></figure><p>这个报错的意思是：</p><ol><li><code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;items&lt;/font&gt;</code><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(0, 0, 0);">是 CIF 文件中的数据项列表</font></li><li><code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;n&lt;/font&gt;</code><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(0, 0, 0);">应该是数据列的数量</font></li><li><font style="color:rgb(0, 0, 0);">当</font><font style="color:rgb(0, 0, 0);"> </font><code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;n&lt;/font&gt;</code><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(0, 0, 0);">为 0 时，尝试计算</font><font style="color:rgb(0, 0, 0);"> </font><code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;len(items) % 0&lt;/font&gt;</code><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(0, 0, 0);">导致除以零错误</font></li></ol><p><font style="color:rgb(0, 0, 0);">这通常是由于 CIF 文件格式问题导致的：</font></p><ul><li><font style="color:rgb(0, 0, 0);">文件可能缺少必要的列定义</font></li><li><font style="color:rgb(0, 0, 0);">数据行数量与列定义不匹配</font></li><li><font style="color:rgb(0, 0, 0);">特殊字符或格式问题导致解析失败</font></li></ul><p>错误出现在 <code>crystal = Structure.from_file(os.path.join(self.root_dir,......</code>就算说，在读 cif 文件是出错了，那就奇怪了，我们在上一篇中读取了好几次 cif 文件都没有任何问题，究竟是怎么回事呢？</p><p>于是，我就打开了几个 cif 文件看看，发现在非磁性晶体中存在这种现象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plain">loop_<br> _atom_site_type_symbol<br> _atom_site_label<br> _atom_site_symmetry_multiplicity<br> _atom_site_fract_x<br> _atom_site_fract_y<br> _atom_site_fract_z<br> _atom_site_occupancy<br>  Ac  Ac0  1  0.50000000  0.50000000  0.50000000  1<br>  Ac  Ac1  1  -0.00000000  -0.00000000  -0.00000000  1<br>  Ag  Ag2  1  0.25000100  0.25000100  0.25000100  1<br>  Ir  Ir3  1  0.75000100  0.75000100  0.75000100  1<br>loop_<br> _atom_site_moment_label<br> _atom_site_moment_crystalaxis_x<br> _atom_site_moment_crystalaxis_y<br> _atom_site_moment_crystalaxis_z<br></code></pre></td></tr></table></figure><p>他写入了磁矩的适量坐标系，但是没有磁矩信息，最终导致在读取 cif 文件时候，出现 item % 0，因为没有数据，为了验证这一点，我写了如下代码测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">from csat.crystal_data import CIFData, crystal_graph_list<br>from pymatgen.core.structure import Structure<br>data = CIFData(&quot;NM&quot;, target_name=&#x27;is_Magnetic&#x27;)<br>graph = crystal_graph_list(data)<br></code></pre></td></tr></table></figure><p>我把一个非磁性晶体的 cif 文件单独拉出来读取，发现只有把</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">loop_<br> _atom_site_moment_label<br> _atom_site_moment_crystalaxis_x<br> _atom_site_moment_crystalaxis_y<br> _atom_site_moment_crystalaxis_z<br></code></pre></td></tr></table></figure><p>这一段删除之后才能够读取成功，说明我的推断没有错，于是我需要重新调整数据的获取方式</p><h2 id="重新获取数据"><a href="#重新获取数据" class="headerlink" title="重新获取数据"></a>重新获取数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plain">for entry in tqdm(M_docs):<br>        id = entry.material_id<br>        file_path = os.path.join(&#x27;magmon_dataset_2000&#x27;, str(id) + &quot;.cif&quot;)<br>        structure = entry.structure<br>        cif_writer = CifWriter(structure, write_magmoms=True) <br>        cif_writer.write_file(file_path)<br>print(&#x27;磁性材料结构获取完成&#x27;)<br><br>for entry in tqdm(NM_docs):<br>        id = entry.material_id<br>        file_path = os.path.join(&#x27;magmon_dataset_2000&#x27;, str(id) + &quot;.cif&quot;)<br>        structure = entry.structure<br>        cif_writer = CifWriter(structure)    # !!!!!非磁性材料不需要写入磁矩！！！！！！否则会出错<br>        cif_writer.write_file(file_path)<br>print(&#x27;非磁性材料结构获取完成&#x27;)<br></code></pre></td></tr></table></figure><p>只要把非磁性晶体的磁矩矢量坐标系删掉就行了，重新测试后完全没有问题了。</p><h2 id="再读数据"><a href="#再读数据" class="headerlink" title="再读数据"></a>再读数据</h2><p>经过以上重写数据之后，对磁性和非磁性的 cif 文件有了严格区分，于是我们在获取 crystal 的 structure 数据时也需要重新分类读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.target_name == <span class="hljs-string">&#x27;is_Magnetic&#x27;</span>:<br>    <span class="hljs-comment"># 如果目标是磁矩，则将原子特征扩展为包含磁矩</span><br>    atom_fea_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(crystal)):<br>        base_fea = <span class="hljs-variable language_">self</span>.ari.get_atom_fea(crystal[i].specie.number)<br>        <span class="hljs-keyword">if</span> target_value==<span class="hljs-number">1</span>:<br>            magmom  = crystal.site_properties[<span class="hljs-string">&#x27;magmom&#x27;</span>][i] <span class="hljs-comment"># 添加磁矩</span><br>        <span class="hljs-keyword">else</span>:<br>            magmom = <span class="hljs-number">0.0</span><br>            magmom = <span class="hljs-built_in">float</span>(magmom)  <span class="hljs-comment"># 确保磁矩是浮点数类型</span><br>        <span class="hljs-comment"># print(f&quot;原子 &#123;crystal[i].specie.symbol&#125; 的磁矩: &#123;magmom&#125;&quot;)</span><br>        <span class="hljs-comment"># 将磁矩作为新特征追加</span><br>        extended_fea = np.append(base_fea, magmom)<br>        atom_fea_list.append(extended_fea)<br>        atom_fea = np.vstack(atom_fea_list)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 如果目标不是磁矩，则只使用原子特征</span><br>    atom_fea = np.vstack([<span class="hljs-variable language_">self</span>.ari.get_atom_fea(crystal[i].specie.number)<br>                          <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(crystal))])<br></code></pre></td></tr></table></figure><p>在这里我用 target_value 来区分，因为我们的任务是分类任务，分类的标签就是是否是磁性，正好利用这个标签来区分磁性和非磁性，然后为了保持维度一致，只需要在非磁性原子的磁矩维度上写 0 就行了。</p><p>接下来，测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> test_view.csat.crystal_data <span class="hljs-keyword">import</span> CIFData, crystal_graph_list<br>data = CIFData(<span class="hljs-string">&quot;magmon_dataset_2000&quot;</span>, target_name=<span class="hljs-string">&#x27;is_Magnetic&#x27;</span>)<br>graph = crystal_graph_list(data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是图数据&#x27;</span>)<br><span class="hljs-built_in">print</span>(graph[<span class="hljs-number">0</span>])<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">这是图数据</span><br><span class="hljs-string">Data(x=[4, 93], edge_index=[2, 12], edge_attr=[12, 41], y=[1], id=&#x27;mp-861724&#x27;)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>结果表明很成功，就可以加入训练了。</p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>训练就很简单了，只要修改一点点超参数就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-variable language_">self</span>.task: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;classification&#x27;</span>  <span class="hljs-comment"># regression/classification</span><br><span class="hljs-variable language_">self</span>.num_classes: <span class="hljs-built_in">int</span> = <span class="hljs-number">2</span><br><br><span class="hljs-comment"># 数据参数</span><br><span class="hljs-variable language_">self</span>.data_root: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;magmon_dataset_2000&#x27;</span>  <span class="hljs-comment"># 数据集根目录</span><br><span class="hljs-variable language_">self</span>.target: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;is_Magnetic&#x27;</span><br><br><span class="hljs-comment"># 模型参数</span><br><span class="hljs-variable language_">self</span>.input_dim: <span class="hljs-built_in">int</span> = <span class="hljs-number">93</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>凝聚态物理与人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MP</tag>
      
      <tag>CSAT</tag>
      
      <tag>科研</tag>
      
      <tag>凝聚态物理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于磁矩特征的写入</title>
    <link href="/2025/07/09/%E5%85%B3%E4%BA%8E%E7%A3%81%E7%9F%A9%E7%89%B9%E5%BE%81%E7%9A%84%E5%86%99%E5%85%A5/"/>
    <url>/2025/07/09/%E5%85%B3%E4%BA%8E%E7%A3%81%E7%9F%A9%E7%89%B9%E5%BE%81%E7%9A%84%E5%86%99%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>以 Ti2O3 为示例，cif 文件为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># generated using pymatgen</span><br>data_Ti2O3<br>_symmetry_space_group_name_H-M   <span class="hljs-string">&#x27;P 1&#x27;</span><br>_cell_length_a   <span class="hljs-number">5.16780216</span><br>_cell_length_b   <span class="hljs-number">5.16780216</span><br>_cell_length_c   <span class="hljs-number">9.60760300</span><br>_cell_angle_alpha   <span class="hljs-number">90.00000000</span><br>_cell_angle_beta   <span class="hljs-number">90.00000000</span><br>_cell_angle_gamma   <span class="hljs-number">120.00000000</span><br>_symmetry_Int_Tables_number   <span class="hljs-number">1</span><br>_chemical_formula_structural   Ti2O3<br>_chemical_formula_sum   <span class="hljs-string">&#x27;Ti8 O12&#x27;</span><br>_cell_volume   <span class="hljs-number">222.20684815</span><br>_cell_formula_units_Z   <span class="hljs-number">4</span><br>loop_<br> _symmetry_equiv_pos_site_id<br> _symmetry_equiv_pos_as_xyz<br>  <span class="hljs-number">1</span>  <span class="hljs-string">&#x27;x, y, z&#x27;</span><br>loop_<br> _atom_site_type_symbol<br> _atom_site_label<br> _atom_site_symmetry_multiplicity<br> _atom_site_fract_x<br> _atom_site_fract_y<br> _atom_site_fract_z<br> _atom_site_occupancy<br>  Ti  Ti0  <span class="hljs-number">1</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.97654800</span>  <span class="hljs-number">1</span>  <br>  Ti  Ti1  <span class="hljs-number">1</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.25000000</span>  <span class="hljs-number">1</span>  <br>  Ti  Ti2  <span class="hljs-number">1</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">1</span>  <br>  Ti  Ti3  <span class="hljs-number">1</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.50000000</span>  <span class="hljs-number">1</span>  <br>  Ti  Ti4  <span class="hljs-number">1</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.52345200</span>  <span class="hljs-number">1</span>  <br>  Ti  Ti5  <span class="hljs-number">1</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.75000000</span>  <span class="hljs-number">1</span>  <br>  Ti  Ti6  <span class="hljs-number">1</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.02345200</span>  <span class="hljs-number">1</span>  <br>  Ti  Ti7  <span class="hljs-number">1</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.47654800</span>  <span class="hljs-number">1</span>  <br>  O  O8  <span class="hljs-number">1</span>  <span class="hljs-number">0.02585733</span>  <span class="hljs-number">0.67555467</span>  <span class="hljs-number">0.11641700</span>  <span class="hljs-number">1</span>  <br>  O  O9  <span class="hljs-number">1</span>  <span class="hljs-number">0.97414267</span>  <span class="hljs-number">0.64969733</span>  <span class="hljs-number">0.61641700</span>  <span class="hljs-number">1</span>  <br>  O  O10  <span class="hljs-number">1</span>  <span class="hljs-number">0.02585733</span>  <span class="hljs-number">0.35030267</span>  <span class="hljs-number">0.38358300</span>  <span class="hljs-number">1</span>  <br>  O  O11  <span class="hljs-number">1</span>  <span class="hljs-number">0.97414267</span>  <span class="hljs-number">0.32444533</span>  <span class="hljs-number">0.88358300</span>  <span class="hljs-number">1</span>  <br>  O  O12  <span class="hljs-number">1</span>  <span class="hljs-number">0.32444533</span>  <span class="hljs-number">0.35030267</span>  <span class="hljs-number">0.11641700</span>  <span class="hljs-number">1</span>  <br>  O  O13  <span class="hljs-number">1</span>  <span class="hljs-number">0.35030267</span>  <span class="hljs-number">0.32444533</span>  <span class="hljs-number">0.61641700</span>  <span class="hljs-number">1</span>  <br>  O  O14  <span class="hljs-number">1</span>  <span class="hljs-number">0.32444533</span>  <span class="hljs-number">0.97414267</span>  <span class="hljs-number">0.38358300</span>  <span class="hljs-number">1</span>  <br>  O  O15  <span class="hljs-number">1</span>  <span class="hljs-number">0.35030267</span>  <span class="hljs-number">0.02585733</span>  <span class="hljs-number">0.88358300</span>  <span class="hljs-number">1</span>  <br>  O  O16  <span class="hljs-number">1</span>  <span class="hljs-number">0.64969733</span>  <span class="hljs-number">0.67555467</span>  <span class="hljs-number">0.38358300</span>  <span class="hljs-number">1</span>  <br>  O  O17  <span class="hljs-number">1</span>  <span class="hljs-number">0.67555467</span>  <span class="hljs-number">0.64969733</span>  <span class="hljs-number">0.88358300</span>  <span class="hljs-number">1</span>  <br>  O  O18  <span class="hljs-number">1</span>  <span class="hljs-number">0.64969733</span>  <span class="hljs-number">0.97414267</span>  <span class="hljs-number">0.11641700</span>  <span class="hljs-number">1</span>  <br>  O  O19  <span class="hljs-number">1</span>  <span class="hljs-number">0.67555467</span>  <span class="hljs-number">0.02585733</span>  <span class="hljs-number">0.61641700</span>  <span class="hljs-number">1</span>  <br></code></pre></td></tr></table></figure><p>可以在下面的原子 loop 矩阵中加入每个原子对应的标量磁矩 <font style="color:rgb(0, 0, 0);background-color:rgb(238, 238, 238);">_atom_site_moment </font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 头部信息不变</span><br>loop_<br> _atom_site_type_symbol<br> _atom_site_label<br> _atom_site_symmetry_multiplicity<br> _atom_site_fract_x<br> _atom_site_fract_y<br> _atom_site_fract_z<br> _atom_site_occupancy<br>  _atom_site_moment<br>  Ti  Ti0  <span class="hljs-number">1</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.97654800</span>  <span class="hljs-number">1</span>  <span class="hljs-number">5</span><br>  Ti  Ti1  <span class="hljs-number">1</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.25000000</span>  <span class="hljs-number">1</span>  <span class="hljs-number">5</span><br>  Ti  Ti2  <span class="hljs-number">1</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><br>  Ti  Ti3  <span class="hljs-number">1</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.50000000</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><br>  Ti  Ti4  <span class="hljs-number">1</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.52345200</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><br>  Ti  Ti5  <span class="hljs-number">1</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.75000000</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><br>  Ti  Ti6  <span class="hljs-number">1</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.02345200</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br>  Ti  Ti7  <span class="hljs-number">1</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.47654800</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br>  O  O8  <span class="hljs-number">1</span>  <span class="hljs-number">0.02585733</span>  <span class="hljs-number">0.67555467</span>  <span class="hljs-number">0.11641700</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br>  O  O9  <span class="hljs-number">1</span>  <span class="hljs-number">0.97414267</span>  <span class="hljs-number">0.64969733</span>  <span class="hljs-number">0.61641700</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br>  O  O10  <span class="hljs-number">1</span>  <span class="hljs-number">0.02585733</span>  <span class="hljs-number">0.35030267</span>  <span class="hljs-number">0.38358300</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br>  O  O11  <span class="hljs-number">1</span>  <span class="hljs-number">0.97414267</span>  <span class="hljs-number">0.32444533</span>  <span class="hljs-number">0.88358300</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br>  O  O12  <span class="hljs-number">1</span>  <span class="hljs-number">0.32444533</span>  <span class="hljs-number">0.35030267</span>  <span class="hljs-number">0.11641700</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br>  O  O13  <span class="hljs-number">1</span>  <span class="hljs-number">0.35030267</span>  <span class="hljs-number">0.32444533</span>  <span class="hljs-number">0.61641700</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br>  O  O14  <span class="hljs-number">1</span>  <span class="hljs-number">0.32444533</span>  <span class="hljs-number">0.97414267</span>  <span class="hljs-number">0.38358300</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br>  O  O15  <span class="hljs-number">1</span>  <span class="hljs-number">0.35030267</span>  <span class="hljs-number">0.02585733</span>  <span class="hljs-number">0.88358300</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br>  O  O16  <span class="hljs-number">1</span>  <span class="hljs-number">0.64969733</span>  <span class="hljs-number">0.67555467</span>  <span class="hljs-number">0.38358300</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br>  O  O17  <span class="hljs-number">1</span>  <span class="hljs-number">0.67555467</span>  <span class="hljs-number">0.64969733</span>  <span class="hljs-number">0.88358300</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br>  O  O18  <span class="hljs-number">1</span>  <span class="hljs-number">0.64969733</span>  <span class="hljs-number">0.97414267</span>  <span class="hljs-number">0.11641700</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br>  O  O19  <span class="hljs-number">1</span>  <span class="hljs-number">0.67555467</span>  <span class="hljs-number">0.02585733</span>  <span class="hljs-number">0.61641700</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>或者还可以写入矢量磁矩，但是需要 3 个分量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">loop_<br>_atom_site_label<br>_atom_site_moment_Cartn_x<br>_atom_site_moment_Cartn_y<br>_atom_site_moment_Cartn_z<br></code></pre></td></tr></table></figure><h2 id="如何获取每个原子的磁矩信息？"><a href="#如何获取每个原子的磁矩信息？" class="headerlink" title="如何获取每个原子的磁矩信息？"></a><font style="color:rgb(0, 0, 0);">如何获取每个原子的磁矩信息？</font></h2><p>我查阅<a href="https://next-gen.materialsproject.org/materials/mp-776655?formula=Ti2O3#more">https://next-gen.materialsproject.org/materials/mp-776655?formula=Ti2O3#more</a></p><p>中含有磁矩信息</p><p><img src="/img/%E5%85%B3%E4%BA%8E%E7%A3%81%E7%9F%A9%E7%89%B9%E5%BE%81%E5%86%99%E5%85%A5/0.png"></p><p>获取 Ti2O3 全部信息的方式为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> mp_api.client <span class="hljs-keyword">import</span> MPRester<br><span class="hljs-keyword">with</span> MPRester(api_key=<span class="hljs-string">&quot;igRHy7zYOKzWD18jY76XtjbwEpRl6SoH&quot;</span>) <span class="hljs-keyword">as</span> mpr:<br>    data = mpr.materials.search(material_ids=[<span class="hljs-string">&quot;mp-776655&quot;</span>])<br></code></pre></td></tr></table></figure><p>获取之后打印全部 data 信息得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs python">[MPDataDoc&lt;MaterialsDoc&gt;(<br>builder_meta=EmmetMeta(emmet_version=<span class="hljs-string">&#x27;0.84.3rc4&#x27;</span>,<br>                       pymatgen_version=<span class="hljs-string">&#x27;2024.11.13&#x27;</span>, <br>                       run_id=<span class="hljs-string">&#x27;ccba9c49-e919-43c2-8d4f-35b2d60eb94b&#x27;</span>, <br>                       batch_id=<span class="hljs-literal">None</span>, database_version=<span class="hljs-string">&#x27;2025.06.09&#x27;</span>, <br>                       build_date=datetime.datetime(<span class="hljs-number">2024</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">57</span>, <span class="hljs-number">42</span>, <span class="hljs-number">12000</span>, <br>                                                    tzinfo=datetime.timezone.utc), <br>                       license=<span class="hljs-string">&#x27;BY-C&#x27;</span>),<br>nsites=<span class="hljs-number">20</span>,<br>elements=[Element O, Element Ti],<br>nelements=<span class="hljs-number">2</span>,<br>composition=Composition(<span class="hljs-string">&#x27;Ti8 O12&#x27;</span>),<br>composition_reduced=Composition(<span class="hljs-string">&#x27;Ti2 O3&#x27;</span>),<br>formula_pretty=<span class="hljs-string">&#x27;Ti2O3&#x27;</span>,<br>formula_anonymous=<span class="hljs-string">&#x27;A2B3&#x27;</span>,<br>chemsys=<span class="hljs-string">&#x27;O-Ti&#x27;</span>,<br>volume=<span class="hljs-number">217.75988736026858</span>,<br>density=<span class="hljs-number">4.384148726776235</span>,<br>density_atomic=<span class="hljs-number">10.887994368013429</span>,<br>symmetry=SymmetryData(crystal_system=&lt;CrystalSystem.trig: <span class="hljs-string">&#x27;Trigonal&#x27;</span>&gt;, symbol=<span class="hljs-string">&#x27;P-31c&#x27;</span>, number=<span class="hljs-number">163</span>, point_group=<span class="hljs-string">&#x27;-3m&#x27;</span>, symprec=<span class="hljs-number">0.1</span>, angle_tolerance=<span class="hljs-number">5.0</span>, version=<span class="hljs-string">&#x27;2.5.0&#x27;</span>),<br>material_id=MPID(mp-<span class="hljs-number">776655</span>),<br>structure=Structure Summary<br>Lattice<br>    abc : <span class="hljs-number">5.151006976476778</span> <span class="hljs-number">5.150980372462452</span> <span class="hljs-number">9.476884040021895</span><br> angles : <span class="hljs-number">90.0000031964729</span> <span class="hljs-number">90.0002147954698</span> <span class="hljs-number">120.00007956211232</span><br> volume : <span class="hljs-number">217.75988736026858</span><br>      A : <span class="hljs-number">2.57550686</span> -<span class="hljs-number">4.46090095</span> -<span class="hljs-number">9.72e-06</span><br>      B : <span class="hljs-number">2.57548062</span> <span class="hljs-number">4.46088538</span> -<span class="hljs-number">2.9e-07</span><br>      C : -<span class="hljs-number">1.764e-05</span> <span class="hljs-number">1.019e-05</span> <span class="hljs-number">9.47688404</span><br>    pbc : <span class="hljs-literal">True</span> <span class="hljs-literal">True</span> <span class="hljs-literal">True</span><br>PeriodicSite: Ti (<span class="hljs-number">2.575</span>, <span class="hljs-number">1.487</span>, <span class="hljs-number">9.24</span>) [<span class="hljs-number">0.3333</span>, <span class="hljs-number">0.6667</span>, <span class="hljs-number">0.975</span>]<br>PeriodicSite: Ti (<span class="hljs-number">2.575</span>, <span class="hljs-number">1.487</span>, <span class="hljs-number">2.369</span>) [<span class="hljs-number">0.3333</span>, <span class="hljs-number">0.6667</span>, <span class="hljs-number">0.25</span>]<br>PeriodicSite: Ti (-<span class="hljs-number">1.857e-05</span>, <span class="hljs-number">1.073e-05</span>, <span class="hljs-number">9.477</span>) [-<span class="hljs-number">2.4e-07</span>, -<span class="hljs-number">1.2e-07</span>, <span class="hljs-number">1.0</span>]<br>PeriodicSite: Ti (-<span class="hljs-number">4.39e-06</span>, <span class="hljs-number">1.518e-05</span>, <span class="hljs-number">4.739</span>) [-<span class="hljs-number">2.7e-07</span>, <span class="hljs-number">1.99e-06</span>, <span class="hljs-number">0.5</span>]<br>PeriodicSite: Ti (<span class="hljs-number">2.575</span>, <span class="hljs-number">1.487</span>, <span class="hljs-number">4.975</span>) [<span class="hljs-number">0.3333</span>, <span class="hljs-number">0.6667</span>, <span class="hljs-number">0.525</span>]<br>PeriodicSite: Ti (<span class="hljs-number">2.575</span>, -<span class="hljs-number">1.487</span>, <span class="hljs-number">7.108</span>) [<span class="hljs-number">0.6667</span>, <span class="hljs-number">0.3333</span>, <span class="hljs-number">0.75</span>]<br>PeriodicSite: Ti (<span class="hljs-number">2.576</span>, -<span class="hljs-number">1.487</span>, <span class="hljs-number">0.2363</span>) [<span class="hljs-number">0.6667</span>, <span class="hljs-number">0.3333</span>, <span class="hljs-number">0.02494</span>]<br>PeriodicSite: Ti (<span class="hljs-number">2.576</span>, -<span class="hljs-number">1.487</span>, <span class="hljs-number">4.502</span>) [<span class="hljs-number">0.6667</span>, <span class="hljs-number">0.3333</span>, <span class="hljs-number">0.4751</span>]<br>PeriodicSite: O (<span class="hljs-number">1.803</span>, <span class="hljs-number">2.894</span>, <span class="hljs-number">1.104</span>) [<span class="hljs-number">0.02568</span>, <span class="hljs-number">0.6744</span>, <span class="hljs-number">0.1165</span>]<br>PeriodicSite: O (<span class="hljs-number">4.18</span>, -<span class="hljs-number">1.453</span>, <span class="hljs-number">5.843</span>) [<span class="hljs-number">0.9743</span>, <span class="hljs-number">0.6487</span>, <span class="hljs-number">0.6166</span>]<br>PeriodicSite: O (<span class="hljs-number">0.971</span>, <span class="hljs-number">1.452</span>, <span class="hljs-number">3.634</span>) [<span class="hljs-number">0.0257</span>, <span class="hljs-number">0.3513</span>, <span class="hljs-number">0.3835</span>]<br>PeriodicSite: O (<span class="hljs-number">3.348</span>, -<span class="hljs-number">2.894</span>, <span class="hljs-number">8.372</span>) [<span class="hljs-number">0.9743</span>, <span class="hljs-number">0.3256</span>, <span class="hljs-number">0.8834</span>]<br>PeriodicSite: O (<span class="hljs-number">1.743</span>, <span class="hljs-number">0.1145</span>, <span class="hljs-number">1.104</span>) [<span class="hljs-number">0.3256</span>, <span class="hljs-number">0.3513</span>, <span class="hljs-number">0.1165</span>]<br>PeriodicSite: O (<span class="hljs-number">1.743</span>, -<span class="hljs-number">0.1146</span>, <span class="hljs-number">5.843</span>) [<span class="hljs-number">0.3513</span>, <span class="hljs-number">0.3256</span>, <span class="hljs-number">0.6166</span>]<br>PeriodicSite: O (<span class="hljs-number">3.348</span>, <span class="hljs-number">2.894</span>, <span class="hljs-number">3.634</span>) [<span class="hljs-number">0.3256</span>, <span class="hljs-number">0.9743</span>, <span class="hljs-number">0.3835</span>]<br>PeriodicSite: O (<span class="hljs-number">0.9709</span>, -<span class="hljs-number">1.452</span>, <span class="hljs-number">8.372</span>) [<span class="hljs-number">0.3513</span>, <span class="hljs-number">0.02569</span>, <span class="hljs-number">0.8834</span>]<br>PeriodicSite: O (<span class="hljs-number">3.408</span>, <span class="hljs-number">0.1146</span>, <span class="hljs-number">3.634</span>) [<span class="hljs-number">0.6487</span>, <span class="hljs-number">0.6744</span>, <span class="hljs-number">0.3835</span>]<br>PeriodicSite: O (<span class="hljs-number">3.408</span>, -<span class="hljs-number">0.1146</span>, <span class="hljs-number">8.372</span>) [<span class="hljs-number">0.6744</span>, <span class="hljs-number">0.6487</span>, <span class="hljs-number">0.8834</span>]<br>PeriodicSite: O (<span class="hljs-number">4.18</span>, <span class="hljs-number">1.452</span>, <span class="hljs-number">1.104</span>) [<span class="hljs-number">0.6487</span>, <span class="hljs-number">0.9743</span>, <span class="hljs-number">0.1165</span>]<br>PeriodicSite: O (<span class="hljs-number">1.803</span>, -<span class="hljs-number">2.894</span>, <span class="hljs-number">5.843</span>) [<span class="hljs-number">0.6744</span>, <span class="hljs-number">0.02568</span>, <span class="hljs-number">0.6166</span>],<br>deprecated=<span class="hljs-literal">False</span>,<br>deprecation_reasons=<span class="hljs-literal">None</span>,<br>initial_structures=[Structure Summary<br>Lattice<br>    abc : <span class="hljs-number">5.167048146727587</span> <span class="hljs-number">5.167048146727587</span> <span class="hljs-number">9.607603</span><br> angles : <span class="hljs-number">90.0</span> <span class="hljs-number">90.0</span> <span class="hljs-number">120.00000187871662</span><br> volume : <span class="hljs-number">222.14200594619678</span><br>      A : <span class="hljs-number">2.583523999999999</span> -<span class="hljs-number">4.474795</span> <span class="hljs-number">0.0</span><br>      B : <span class="hljs-number">2.583523999999999</span> <span class="hljs-number">4.474795</span> <span class="hljs-number">0.0</span><br>      C : <span class="hljs-number">0.0</span> <span class="hljs-number">0.0</span> <span class="hljs-number">9.607603</span><br>    pbc : <span class="hljs-literal">True</span> <span class="hljs-literal">True</span> <span class="hljs-literal">True</span><br>PeriodicSite: Ti (<span class="hljs-number">2.584</span>, <span class="hljs-number">1.492</span>, <span class="hljs-number">9.382</span>) [<span class="hljs-number">0.3333</span>, <span class="hljs-number">0.6667</span>, <span class="hljs-number">0.9765</span>]<br>PeriodicSite: Ti (<span class="hljs-number">2.584</span>, <span class="hljs-number">1.492</span>, <span class="hljs-number">2.402</span>) [<span class="hljs-number">0.3333</span>, <span class="hljs-number">0.6667</span>, <span class="hljs-number">0.25</span>]<br>PeriodicSite: Ti (<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>) [<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>]<br>PeriodicSite: Ti (<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">4.804</span>) [<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.5</span>]<br>PeriodicSite: Ti (<span class="hljs-number">2.584</span>, <span class="hljs-number">1.492</span>, <span class="hljs-number">5.029</span>) [<span class="hljs-number">0.3333</span>, <span class="hljs-number">0.6667</span>, <span class="hljs-number">0.5235</span>]<br>PeriodicSite: Ti (<span class="hljs-number">2.584</span>, -<span class="hljs-number">1.492</span>, <span class="hljs-number">7.206</span>) [<span class="hljs-number">0.6667</span>, <span class="hljs-number">0.3333</span>, <span class="hljs-number">0.75</span>]<br>PeriodicSite: Ti (<span class="hljs-number">2.584</span>, -<span class="hljs-number">1.492</span>, <span class="hljs-number">0.2253</span>) [<span class="hljs-number">0.6667</span>, <span class="hljs-number">0.3333</span>, <span class="hljs-number">0.02345</span>]<br>PeriodicSite: Ti (<span class="hljs-number">2.584</span>, -<span class="hljs-number">1.492</span>, <span class="hljs-number">4.578</span>) [<span class="hljs-number">0.6667</span>, <span class="hljs-number">0.3333</span>, <span class="hljs-number">0.4765</span>]<br>PeriodicSite: O (<span class="hljs-number">1.743</span>, <span class="hljs-number">0.1157</span>, <span class="hljs-number">1.118</span>) [<span class="hljs-number">0.3244</span>, <span class="hljs-number">0.3503</span>, <span class="hljs-number">0.1164</span>]<br>PeriodicSite: O (<span class="hljs-number">1.743</span>, -<span class="hljs-number">0.1157</span>, <span class="hljs-number">5.922</span>) [<span class="hljs-number">0.3503</span>, <span class="hljs-number">0.3244</span>, <span class="hljs-number">0.6164</span>]<br>PeriodicSite: O (<span class="hljs-number">3.424</span>, <span class="hljs-number">0.1157</span>, <span class="hljs-number">3.685</span>) [<span class="hljs-number">0.6497</span>, <span class="hljs-number">0.6756</span>, <span class="hljs-number">0.3836</span>]<br>PeriodicSite: O (<span class="hljs-number">3.424</span>, -<span class="hljs-number">0.1157</span>, <span class="hljs-number">8.489</span>) [<span class="hljs-number">0.6756</span>, <span class="hljs-number">0.6497</span>, <span class="hljs-number">0.8836</span>]<br>PeriodicSite: O (<span class="hljs-number">4.195</span>, <span class="hljs-number">1.452</span>, <span class="hljs-number">1.118</span>) [<span class="hljs-number">0.6497</span>, <span class="hljs-number">0.9741</span>, <span class="hljs-number">0.1164</span>]<br>PeriodicSite: O (<span class="hljs-number">1.812</span>, -<span class="hljs-number">2.907</span>, <span class="hljs-number">5.922</span>) [<span class="hljs-number">0.6756</span>, <span class="hljs-number">0.02586</span>, <span class="hljs-number">0.6164</span>]<br>PeriodicSite: O (<span class="hljs-number">0.9718</span>, <span class="hljs-number">1.452</span>, <span class="hljs-number">3.685</span>) [<span class="hljs-number">0.02586</span>, <span class="hljs-number">0.3503</span>, <span class="hljs-number">0.3836</span>]<br>PeriodicSite: O (<span class="hljs-number">3.355</span>, -<span class="hljs-number">2.907</span>, <span class="hljs-number">8.489</span>) [<span class="hljs-number">0.9741</span>, <span class="hljs-number">0.3244</span>, <span class="hljs-number">0.8836</span>]<br>PeriodicSite: O (<span class="hljs-number">3.355</span>, <span class="hljs-number">2.907</span>, <span class="hljs-number">3.685</span>) [<span class="hljs-number">0.3244</span>, <span class="hljs-number">0.9741</span>, <span class="hljs-number">0.3836</span>]<br>PeriodicSite: O (<span class="hljs-number">0.9718</span>, -<span class="hljs-number">1.452</span>, <span class="hljs-number">8.489</span>) [<span class="hljs-number">0.3503</span>, <span class="hljs-number">0.02586</span>, <span class="hljs-number">0.8836</span>]<br>PeriodicSite: O (<span class="hljs-number">1.812</span>, <span class="hljs-number">2.907</span>, <span class="hljs-number">1.118</span>) [<span class="hljs-number">0.02586</span>, <span class="hljs-number">0.6756</span>, <span class="hljs-number">0.1164</span>]<br>PeriodicSite: O (<span class="hljs-number">4.195</span>, -<span class="hljs-number">1.452</span>, <span class="hljs-number">5.922</span>) [<span class="hljs-number">0.9741</span>, <span class="hljs-number">0.6497</span>, <span class="hljs-number">0.6164</span>]],<br>task_ids=[MPID(mp-<span class="hljs-number">2739261</span>), MPID(mp-<span class="hljs-number">2739212</span>), MPID(mp-<span class="hljs-number">888770</span>), MPID(mp-<span class="hljs-number">1784547</span>), MPID(mp-<span class="hljs-number">902522</span>), MPID(mp-<span class="hljs-number">903281</span>), MPID(mp-<span class="hljs-number">1367622</span>), MPID(mp-<span class="hljs-number">776655</span>)],<br>deprecated_tasks=[],<br>calc_types=&#123;<span class="hljs-string">&#x27;mp-902522&#x27;</span>: &lt;CalcType.GGA_NSCF_Line: <span class="hljs-string">&#x27;GGA NSCF Line&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-776655&#x27;</span>: &lt;CalcType.GGA_Structure_Optimization: <span class="hljs-string">&#x27;GGA Structure Optimization&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-888770&#x27;</span>: &lt;CalcType.GGA_Static: <span class="hljs-string">&#x27;GGA Static&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-1367622&#x27;</span>: &lt;CalcType.GGA_Static: <span class="hljs-string">&#x27;GGA Static&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-1784547&#x27;</span>: &lt;CalcType.GGA_Static: <span class="hljs-string">&#x27;GGA Static&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-903281&#x27;</span>: &lt;CalcType.GGA_NSCF_Line: <span class="hljs-string">&#x27;GGA NSCF Line&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-2739212&#x27;</span>: &lt;CalcType.PBEsol_Structure_Optimization: <span class="hljs-string">&#x27;PBEsol Structure Optimization&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-2739261&#x27;</span>: &lt;CalcType.r2SCAN_Structure_Optimization: <span class="hljs-string">&#x27;r2SCAN Structure Optimization&#x27;</span>&gt;&#125;,<br>last_updated=datetime.datetime(<span class="hljs-number">2021</span>, <span class="hljs-number">7</span>, <span class="hljs-number">25</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>, <span class="hljs-number">198000</span>, tzinfo=datetime.timezone.utc),<br>created_at=datetime.datetime(<span class="hljs-number">2014</span>, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">31</span>, tzinfo=datetime.timezone.utc),<br>origins=[PropertyOrigin(name=<span class="hljs-string">&#x27;structure&#x27;</span>, task_id=MPID(mp-<span class="hljs-number">2739261</span>), last_updated=datetime.datetime(<span class="hljs-number">2021</span>, <span class="hljs-number">7</span>, <span class="hljs-number">25</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>, <span class="hljs-number">198000</span>, tzinfo=datetime.timezone.utc))],<br>warnings=[],<br>task_types=&#123;<span class="hljs-string">&#x27;mp-902522&#x27;</span>: &lt;TaskType.NSCF_Line: <span class="hljs-string">&#x27;NSCF Line&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-776655&#x27;</span>: &lt;TaskType.Structure_Optimization: <span class="hljs-string">&#x27;Structure Optimization&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-888770&#x27;</span>: &lt;TaskType.Static: <span class="hljs-string">&#x27;Static&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-1367622&#x27;</span>: &lt;TaskType.Static: <span class="hljs-string">&#x27;Static&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-1784547&#x27;</span>: &lt;TaskType.Static: <span class="hljs-string">&#x27;Static&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-903281&#x27;</span>: &lt;TaskType.NSCF_Line: <span class="hljs-string">&#x27;NSCF Line&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-2739212&#x27;</span>: &lt;TaskType.Structure_Optimization: <span class="hljs-string">&#x27;Structure Optimization&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-2739261&#x27;</span>: &lt;TaskType.Structure_Optimization: <span class="hljs-string">&#x27;Structure Optimization&#x27;</span>&gt;&#125;,<br>run_types=&#123;<span class="hljs-string">&#x27;mp-902522&#x27;</span>: &lt;RunType.GGA: <span class="hljs-string">&#x27;GGA&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-776655&#x27;</span>: &lt;RunType.GGA: <span class="hljs-string">&#x27;GGA&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-888770&#x27;</span>: &lt;RunType.GGA: <span class="hljs-string">&#x27;GGA&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-1367622&#x27;</span>: &lt;RunType.GGA: <span class="hljs-string">&#x27;GGA&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-1784547&#x27;</span>: &lt;RunType.GGA: <span class="hljs-string">&#x27;GGA&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-903281&#x27;</span>: &lt;RunType.GGA: <span class="hljs-string">&#x27;GGA&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-2739212&#x27;</span>: &lt;RunType.PBEsol: <span class="hljs-string">&#x27;PBEsol&#x27;</span>&gt;, <span class="hljs-string">&#x27;mp-2739261&#x27;</span>: &lt;RunType.r2SCAN: <span class="hljs-string">&#x27;r2SCAN&#x27;</span>&gt;&#125;,<br>entries=BlessedCalcs(GGA=mp-<span class="hljs-number">776655</span>-GGA ComputedStructureEntry - Ti8 O12      (Ti2O3)<br>Energy (Uncorrected)     = -<span class="hljs-number">178.7848</span> eV (-<span class="hljs-number">8.9392</span>  eV/atom)<br>Correction               = <span class="hljs-number">0.0000</span>    eV (<span class="hljs-number">0.0000</span>   eV/atom)<br>Energy (Final)           = -<span class="hljs-number">178.7848</span> eV (-<span class="hljs-number">8.9392</span>  eV/atom)<br>Energy Adjustments:<br>  <span class="hljs-literal">None</span><br>Parameters:<br>  potcar_spec            = [&#123;<span class="hljs-string">&#x27;titel&#x27;</span>: <span class="hljs-string">&#x27;PAW_PBE Ti_pv 07Sep2000&#x27;</span>, <span class="hljs-string">&#x27;hash&#x27;</span>: <span class="hljs-string">&#x27;70bc3ea8bf68f10e7e1e4721bb91972a&#x27;</span>, <span class="hljs-string">&#x27;summary_stats&#x27;</span>: <span class="hljs-literal">None</span>&#125;, &#123;<span class="hljs-string">&#x27;titel&#x27;</span>: <span class="hljs-string">&#x27;PAW_PBE O 08Apr2002&#x27;</span>, <span class="hljs-string">&#x27;hash&#x27;</span>: <span class="hljs-string">&#x27;7a25bc5b9a5393f46600a4939d357982&#x27;</span>, <span class="hljs-string">&#x27;summary_stats&#x27;</span>: <span class="hljs-literal">None</span>&#125;]<br>  run_type               = GGA<br>  is_hubbard             = <span class="hljs-literal">False</span><br>  hubbards               = <span class="hljs-literal">None</span><br>Data:<br>  oxide_type             = oxide<br>  aspherical             = <span class="hljs-literal">True</span><br>  last_updated           = <span class="hljs-number">2024</span>-<span class="hljs-number">11</span>-<span class="hljs-number">21</span> <span class="hljs-number">22</span>:<span class="hljs-number">57</span>:<span class="hljs-number">41.717606</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>  task_id                = mp-<span class="hljs-number">1784547</span><br>  material_id            = mp-<span class="hljs-number">776655</span>, GGA_U=<span class="hljs-literal">None</span>, PBESol=mp-<span class="hljs-number">776655</span>-PBEsol ComputedStructureEntry - Ti8 O12      (Ti2O3)<br>Energy (Uncorrected)     = -<span class="hljs-number">186.9983</span> eV (-<span class="hljs-number">9.3499</span>  eV/atom)<br>Correction               = <span class="hljs-number">0.0000</span>    eV (<span class="hljs-number">0.0000</span>   eV/atom)<br>Energy (Final)           = -<span class="hljs-number">186.9983</span> eV (-<span class="hljs-number">9.3499</span>  eV/atom)<br>Energy Adjustments:<br>  <span class="hljs-literal">None</span><br>Parameters:<br>  potcar_spec            = [&#123;<span class="hljs-string">&#x27;titel&#x27;</span>: <span class="hljs-string">&#x27;PAW_PBE Ti_pv 07Sep2000&#x27;</span>, <span class="hljs-string">&#x27;hash&#x27;</span>: <span class="hljs-string">&#x27;cdd047e254a1247dbf5c1bb0563a75b9&#x27;</span>, <span class="hljs-string">&#x27;summary_stats&#x27;</span>: <span class="hljs-literal">None</span>&#125;, &#123;<span class="hljs-string">&#x27;titel&#x27;</span>: <span class="hljs-string">&#x27;PAW_PBE O 08Apr2002&#x27;</span>, <span class="hljs-string">&#x27;hash&#x27;</span>: <span class="hljs-string">&#x27;9bb4b91e6c47f70fd2bce603bd5d6832&#x27;</span>, <span class="hljs-string">&#x27;summary_stats&#x27;</span>: <span class="hljs-literal">None</span>&#125;]<br>  run_type               = PBEsol<br>  is_hubbard             = <span class="hljs-literal">False</span><br>  hubbards               = <span class="hljs-literal">None</span><br>Data:<br>  oxide_type             = oxide<br>  aspherical             = <span class="hljs-literal">True</span><br>  last_updated           = <span class="hljs-number">2024</span>-<span class="hljs-number">11</span>-<span class="hljs-number">21</span> <span class="hljs-number">22</span>:<span class="hljs-number">57</span>:<span class="hljs-number">41.767313</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>  task_id                = mp-<span class="hljs-number">2739212</span><br>  material_id            = mp-<span class="hljs-number">776655</span>, SCAN=<span class="hljs-literal">None</span>, R2SCAN=mp-<span class="hljs-number">776655</span>-r2SCAN ComputedStructureEntry - Ti8 O12      (Ti2O3)<br>Energy (Uncorrected)     = -<span class="hljs-number">236.5932</span> eV (-<span class="hljs-number">11.8297</span> eV/atom)<br>Correction               = <span class="hljs-number">0.0000</span>    eV (<span class="hljs-number">0.0000</span>   eV/atom)<br>Energy (Final)           = -<span class="hljs-number">236.5932</span> eV (-<span class="hljs-number">11.8297</span> eV/atom)<br>Energy Adjustments:<br>  <span class="hljs-literal">None</span><br>Parameters:<br>  potcar_spec            = [&#123;<span class="hljs-string">&#x27;titel&#x27;</span>: <span class="hljs-string">&#x27;PAW_PBE Ti_pv 07Sep2000&#x27;</span>, <span class="hljs-string">&#x27;hash&#x27;</span>: <span class="hljs-string">&#x27;cdd047e254a1247dbf5c1bb0563a75b9&#x27;</span>, <span class="hljs-string">&#x27;summary_stats&#x27;</span>: <span class="hljs-literal">None</span>&#125;, &#123;<span class="hljs-string">&#x27;titel&#x27;</span>: <span class="hljs-string">&#x27;PAW_PBE O 08Apr2002&#x27;</span>, <span class="hljs-string">&#x27;hash&#x27;</span>: <span class="hljs-string">&#x27;9bb4b91e6c47f70fd2bce603bd5d6832&#x27;</span>, <span class="hljs-string">&#x27;summary_stats&#x27;</span>: <span class="hljs-literal">None</span>&#125;]<br>  run_type               = r2SCAN<br>  is_hubbard             = <span class="hljs-literal">False</span><br>  hubbards               = <span class="hljs-literal">None</span><br>Data:<br>  oxide_type             = oxide<br>  aspherical             = <span class="hljs-literal">True</span><br>  last_updated           = <span class="hljs-number">2024</span>-<span class="hljs-number">11</span>-<span class="hljs-number">21</span> <span class="hljs-number">22</span>:<span class="hljs-number">57</span>:<span class="hljs-number">41.802864</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>  task_id                = mp-<span class="hljs-number">2739261</span><br>  material_id            = mp-<span class="hljs-number">776655</span>, HSE=<span class="hljs-literal">None</span>),<br>fields_not_requested=[]<br>)]<br></code></pre></td></tr></table></figure><p>发现 structure 字段与我本地的 cif 文件不太一样，他多了一些额外的字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">loop_<br> _atom_site_type_symbol<br> _atom_site_label<br> _atom_site_symmetry_multiplicity<br> _atom_site_fract_x<br> _atom_site_fract_y<br> _atom_site_fract_z<br> _atom_site_occupancy<br>  Ti  Ti0  <span class="hljs-number">1</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.97654800</span>  <span class="hljs-number">1</span>  <br>  Ti  Ti1  <span class="hljs-number">1</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.25000000</span>  <span class="hljs-number">1</span>  <br>  Ti  Ti2  <span class="hljs-number">1</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">1</span>  <br>  Ti  Ti3  <span class="hljs-number">1</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.00000000</span>  <span class="hljs-number">0.50000000</span>  <span class="hljs-number">1</span>  <br>  Ti  Ti4  <span class="hljs-number">1</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.52345200</span>  <span class="hljs-number">1</span>  <br>  Ti  Ti5  <span class="hljs-number">1</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.75000000</span>  <span class="hljs-number">1</span>  <br>  Ti  Ti6  <span class="hljs-number">1</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.02345200</span>  <span class="hljs-number">1</span>  <br>  Ti  Ti7  <span class="hljs-number">1</span>  <span class="hljs-number">0.66666667</span>  <span class="hljs-number">0.33333333</span>  <span class="hljs-number">0.47654800</span>  <span class="hljs-number">1</span>  <br>  O  O8  <span class="hljs-number">1</span>  <span class="hljs-number">0.02585733</span>  <span class="hljs-number">0.67555467</span>  <span class="hljs-number">0.11641700</span>  <span class="hljs-number">1</span>  <br>  O  O9  <span class="hljs-number">1</span>  <span class="hljs-number">0.97414267</span>  <span class="hljs-number">0.64969733</span>  <span class="hljs-number">0.61641700</span>  <span class="hljs-number">1</span>  <br>  O  O10  <span class="hljs-number">1</span>  <span class="hljs-number">0.02585733</span>  <span class="hljs-number">0.35030267</span>  <span class="hljs-number">0.38358300</span>  <span class="hljs-number">1</span>  <br>  O  O11  <span class="hljs-number">1</span>  <span class="hljs-number">0.97414267</span>  <span class="hljs-number">0.32444533</span>  <span class="hljs-number">0.88358300</span>  <span class="hljs-number">1</span>  <br>  O  O12  <span class="hljs-number">1</span>  <span class="hljs-number">0.32444533</span>  <span class="hljs-number">0.35030267</span>  <span class="hljs-number">0.11641700</span>  <span class="hljs-number">1</span>  <br>  O  O13  <span class="hljs-number">1</span>  <span class="hljs-number">0.35030267</span>  <span class="hljs-number">0.32444533</span>  <span class="hljs-number">0.61641700</span>  <span class="hljs-number">1</span>  <br>  O  O14  <span class="hljs-number">1</span>  <span class="hljs-number">0.32444533</span>  <span class="hljs-number">0.97414267</span>  <span class="hljs-number">0.38358300</span>  <span class="hljs-number">1</span>  <br>  O  O15  <span class="hljs-number">1</span>  <span class="hljs-number">0.35030267</span>  <span class="hljs-number">0.02585733</span>  <span class="hljs-number">0.88358300</span>  <span class="hljs-number">1</span>  <br>  O  O16  <span class="hljs-number">1</span>  <span class="hljs-number">0.64969733</span>  <span class="hljs-number">0.67555467</span>  <span class="hljs-number">0.38358300</span>  <span class="hljs-number">1</span>  <br>  O  O17  <span class="hljs-number">1</span>  <span class="hljs-number">0.67555467</span>  <span class="hljs-number">0.64969733</span>  <span class="hljs-number">0.88358300</span>  <span class="hljs-number">1</span>  <br>  O  O18  <span class="hljs-number">1</span>  <span class="hljs-number">0.64969733</span>  <span class="hljs-number">0.97414267</span>  <span class="hljs-number">0.11641700</span>  <span class="hljs-number">1</span>  <br>  O  O19  <span class="hljs-number">1</span>  <span class="hljs-number">0.67555467</span>  <span class="hljs-number">0.02585733</span>  <span class="hljs-number">0.61641700</span>  <span class="hljs-number">1</span>  <br></code></pre></td></tr></table></figure><p>于是我就打印下来看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">Full Formula (Ti8 O12)<br>Reduced Formula: Ti2O3<br>abc   :   <span class="hljs-number">5.151007</span>   <span class="hljs-number">5.150980</span>   <span class="hljs-number">9.476884</span><br>angles:  <span class="hljs-number">90.000003</span>  <span class="hljs-number">90.000215</span> <span class="hljs-number">120.000080</span><br>pbc   :       <span class="hljs-literal">True</span>       <span class="hljs-literal">True</span>       <span class="hljs-literal">True</span><br>Sites (<span class="hljs-number">20</span>)<br>  <span class="hljs-comment">#  SP            a          b         c    magmom</span><br>---  ----  ---------  ---------  --------  --------<br>  <span class="hljs-number">0</span>  Ti     <span class="hljs-number">0.333332</span>   <span class="hljs-number">0.666663</span>  <span class="hljs-number">0.975046</span>     <span class="hljs-number">0.514</span><br>  <span class="hljs-number">1</span>  Ti     <span class="hljs-number">0.333334</span>   <span class="hljs-number">0.666667</span>  <span class="hljs-number">0.249997</span>    -<span class="hljs-number">0.112</span><br>  <span class="hljs-number">2</span>  Ti    -<span class="hljs-number">0</span>         -<span class="hljs-number">0</span>         <span class="hljs-number">0.999985</span>     <span class="hljs-number">0.906</span><br>  <span class="hljs-number">3</span>  Ti    -<span class="hljs-number">0</span>          <span class="hljs-number">2e-06</span>     <span class="hljs-number">0.500008</span>     <span class="hljs-number">0.906</span><br>  <span class="hljs-number">4</span>  Ti     <span class="hljs-number">0.333322</span>   <span class="hljs-number">0.666661</span>  <span class="hljs-number">0.524963</span>     <span class="hljs-number">0.514</span><br>  <span class="hljs-number">5</span>  Ti     <span class="hljs-number">0.666666</span>   <span class="hljs-number">0.333333</span>  <span class="hljs-number">0.750007</span>    -<span class="hljs-number">0.112</span><br>  <span class="hljs-number">6</span>  Ti     <span class="hljs-number">0.666668</span>   <span class="hljs-number">0.333337</span>  <span class="hljs-number">0.024937</span>     <span class="hljs-number">0.514</span><br>  <span class="hljs-number">7</span>  Ti     <span class="hljs-number">0.666677</span>   <span class="hljs-number">0.333337</span>  <span class="hljs-number">0.475051</span>     <span class="hljs-number">0.514</span><br>  <span class="hljs-number">8</span>  O      <span class="hljs-number">0.025681</span>   <span class="hljs-number">0.674403</span>  <span class="hljs-number">0.116537</span>    -<span class="hljs-number">0.007</span><br>  <span class="hljs-number">9</span>  O      <span class="hljs-number">0.974318</span>   <span class="hljs-number">0.648705</span>  <span class="hljs-number">0.616563</span>    -<span class="hljs-number">0.007</span><br> <span class="hljs-number">10</span>  O      <span class="hljs-number">0.0257</span>     <span class="hljs-number">0.351301</span>  <span class="hljs-number">0.383472</span>    -<span class="hljs-number">0.007</span><br> <span class="hljs-number">11</span>  O      <span class="hljs-number">0.974308</span>   <span class="hljs-number">0.325583</span>  <span class="hljs-number">0.883429</span>    -<span class="hljs-number">0.007</span><br> <span class="hljs-number">12</span>  O      <span class="hljs-number">0.325599</span>   <span class="hljs-number">0.351278</span>  <span class="hljs-number">0.116537</span>    -<span class="hljs-number">0.007</span><br> <span class="hljs-number">13</span>  O      <span class="hljs-number">0.351293</span>   <span class="hljs-number">0.32561</span>   <span class="hljs-number">0.61656</span>     -<span class="hljs-number">0.007</span><br> <span class="hljs-number">14</span>  O      <span class="hljs-number">0.3256</span>     <span class="hljs-number">0.974301</span>  <span class="hljs-number">0.383477</span>    -<span class="hljs-number">0.007</span><br> <span class="hljs-number">15</span>  O      <span class="hljs-number">0.351274</span>   <span class="hljs-number">0.02569</span>   <span class="hljs-number">0.88343</span>     -<span class="hljs-number">0.007</span><br> <span class="hljs-number">16</span>  O      <span class="hljs-number">0.648702</span>   <span class="hljs-number">0.674402</span>  <span class="hljs-number">0.383477</span>    -<span class="hljs-number">0.007</span><br> <span class="hljs-number">17</span>  O      <span class="hljs-number">0.674414</span>   <span class="hljs-number">0.648724</span>  <span class="hljs-number">0.883429</span>    -<span class="hljs-number">0.007</span><br> <span class="hljs-number">18</span>  O      <span class="hljs-number">0.648724</span>   <span class="hljs-number">0.974321</span>  <span class="hljs-number">0.116535</span>    -<span class="hljs-number">0.007</span><br> <span class="hljs-number">19</span>  O      <span class="hljs-number">0.674388</span>   <span class="hljs-number">0.025681</span>  <span class="hljs-number">0.61656</span>     -<span class="hljs-number">0.007</span><br></code></pre></td></tr></table></figure><p>可见 structure 中是含有原子磁矩的，于是我就将其重新写 cif，在这里我用了 2 种方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法一</span><br>structure.to(<span class="hljs-string">&quot;Ti2O3.cif&quot;</span>)<br><span class="hljs-comment"># 方法二</span><br><span class="hljs-keyword">from</span> pymatgen.io.cif <span class="hljs-keyword">import</span> CifWriter<br>cif_writer = CifWriter(structure, write_magmoms=<span class="hljs-literal">True</span>) <br><br><span class="hljs-comment">### Cifwriter的参数</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CifWriter</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;A wrapper around CifFile to write CIF files from pymatgen Structure.&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"></span><br><span class="hljs-params">        self,</span><br><span class="hljs-params">        struct: Structure | IStructure,</span><br><span class="hljs-params">        symprec: <span class="hljs-built_in">float</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        write_magmoms: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,</span><br><span class="hljs-params">        significant_figures: <span class="hljs-built_in">int</span> = <span class="hljs-number">8</span>,</span><br><span class="hljs-params">        angle_tolerance: <span class="hljs-built_in">float</span> = <span class="hljs-number">5</span>,</span><br><span class="hljs-params">        refine_struct: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,</span><br><span class="hljs-params">        write_site_properties: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,</span><br><span class="hljs-params">    </span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            struct (Structure): structure to write.</span><br><span class="hljs-string">            symprec (float): If not none, finds the symmetry of the structure</span><br><span class="hljs-string">                and writes the CIF with symmetry information. Passes symprec</span><br><span class="hljs-string">                to the SpacegroupAnalyzer. See also refine_struct.</span><br><span class="hljs-string">            write_magmoms (bool): If True, will write magCIF file. Incompatible</span><br><span class="hljs-string">                with symprec</span><br><span class="hljs-string">            significant_figures (int): Specifies precision for formatting of floats.</span><br><span class="hljs-string">                Defaults to 8.</span><br><span class="hljs-string">            angle_tolerance (float): Angle tolerance for symmetry finding. Passes</span><br><span class="hljs-string">                angle_tolerance to the SpacegroupAnalyzer. Used only if symprec</span><br><span class="hljs-string">                is not None.</span><br><span class="hljs-string">            refine_struct: Used only if symprec is not None. If True, get_refined_structure</span><br><span class="hljs-string">                is invoked to convert input structure from primitive to conventional.</span><br><span class="hljs-string">            write_site_properties (bool): Whether to write the Structure.site_properties</span><br><span class="hljs-string">                to the CIF as _atom_site_&#123;property name&#125;. Defaults to False.</span><br><span class="hljs-string">            =====================================================================</span><br><span class="hljs-string">            struct (Structure): 待写入的晶体结构。</span><br><span class="hljs-string">            symprec (float): 若不为None，则分析结构的对称性并写入带对称性信息的CIF文件。</span><br><span class="hljs-string">            该参数会传递给空间群分析器(SpacegroupAnalyzer)。另见refine_struct参数说明。</span><br><span class="hljs-string">            write_magmoms (bool): 若为True，则写入磁矩信息生成magCIF文件。与symprec参数不兼容。</span><br><span class="hljs-string">            significant_figles (int): 浮点数格式化精度，默认保留8位有效数字。</span><br><span class="hljs-string">            angle_tolerance (float): 对称性分析的角度容差参数，传递给SpacegroupAnalyzer。</span><br><span class="hljs-string">            仅在symprec不为None时生效。</span><br><span class="hljs-string">            refine_struct (bool): 仅在symprec不为None时生效。若为True，则调用</span><br><span class="hljs-string">            get_refined_structure方法将原结构从原胞转换为晶胞常规形式。</span><br><span class="hljs-string">            write_site_properties (bool): 是否将Structure.site_properties中的属性</span><br><span class="hljs-string">            写入CIF的_atom_site_&#123;属性名&#125;字段，默认为False。  </span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>第一种方法是没有用的，第二种方法可以写入，得到以下矢量磁矩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">loop_<br> _atom_site_moment_label<br> _atom_site_moment_crystalaxis_x<br> _atom_site_moment_crystalaxis_y<br> _atom_site_moment_crystalaxis_z<br>  Ti0  <span class="hljs-number">0.00000128</span>  <span class="hljs-number">0.00000064</span>  <span class="hljs-number">0.51400000</span><br>  Ti1  -<span class="hljs-number">0.00000028</span>  -<span class="hljs-number">0.00000014</span>  -<span class="hljs-number">0.11200000</span><br>  Ti2  <span class="hljs-number">0.00000225</span>  <span class="hljs-number">0.00000112</span>  <span class="hljs-number">0.90600000</span><br>  Ti3  <span class="hljs-number">0.00000225</span>  <span class="hljs-number">0.00000112</span>  <span class="hljs-number">0.90600000</span><br>  Ti4  <span class="hljs-number">0.00000128</span>  <span class="hljs-number">0.00000064</span>  <span class="hljs-number">0.51400000</span><br>  Ti5  -<span class="hljs-number">0.00000028</span>  -<span class="hljs-number">0.00000014</span>  -<span class="hljs-number">0.11200000</span><br>  Ti6  <span class="hljs-number">0.00000128</span>  <span class="hljs-number">0.00000064</span>  <span class="hljs-number">0.51400000</span><br>  Ti7  <span class="hljs-number">0.00000128</span>  <span class="hljs-number">0.00000064</span>  <span class="hljs-number">0.51400000</span><br>  O8  -<span class="hljs-number">0.00000002</span>  <span class="hljs-number">0.00000000</span>  -<span class="hljs-number">0.00700000</span><br>  O9  -<span class="hljs-number">0.00000002</span>  <span class="hljs-number">0.00000000</span>  -<span class="hljs-number">0.00700000</span><br>  O10  -<span class="hljs-number">0.00000002</span>  <span class="hljs-number">0.00000000</span>  -<span class="hljs-number">0.00700000</span><br>  O11  -<span class="hljs-number">0.00000002</span>  <span class="hljs-number">0.00000000</span>  -<span class="hljs-number">0.00700000</span><br>  O12  -<span class="hljs-number">0.00000002</span>  <span class="hljs-number">0.00000000</span>  -<span class="hljs-number">0.00700000</span><br>  O13  -<span class="hljs-number">0.00000002</span>  <span class="hljs-number">0.00000000</span>  -<span class="hljs-number">0.00700000</span><br>  O14  -<span class="hljs-number">0.00000002</span>  <span class="hljs-number">0.00000000</span>  -<span class="hljs-number">0.00700000</span><br>  O15  -<span class="hljs-number">0.00000002</span>  <span class="hljs-number">0.00000000</span>  -<span class="hljs-number">0.00700000</span><br>  O16  -<span class="hljs-number">0.00000002</span>  <span class="hljs-number">0.00000000</span>  -<span class="hljs-number">0.00700000</span><br>  O17  -<span class="hljs-number">0.00000002</span>  <span class="hljs-number">0.00000000</span>  -<span class="hljs-number">0.00700000</span><br>  O18  -<span class="hljs-number">0.00000002</span>  <span class="hljs-number">0.00000000</span>  -<span class="hljs-number">0.00700000</span><br>  O19  -<span class="hljs-number">0.00000002</span>  <span class="hljs-number">0.00000000</span>  -<span class="hljs-number">0.00700000</span><br></code></pre></td></tr></table></figure><p>接下来尝试获取标量磁矩，试了很多方法，都失败了，而且很复杂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 提取矢量磁矩数据</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>vector_magmoms = structure.site_properties.get(<span class="hljs-string">&quot;magmom&quot;</span>, [])<br><br><span class="hljs-comment"># 计算标量磁矩（模长）</span><br>scalar_magmoms = []<br><span class="hljs-keyword">for</span> magmom <span class="hljs-keyword">in</span> vector_magmoms:<br>    <span class="hljs-comment"># 检查磁矩是否是矢量（列表/数组）还是标量</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(magmom, (<span class="hljs-built_in">list</span>, <span class="hljs-built_in">tuple</span>, np.ndarray)):<br>        <span class="hljs-comment"># 计算矢量模长作为标量磁矩</span><br>        scalar_magmoms.append(np.linalg.norm(magmom))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 如果已经是标量，直接使用</span><br>        scalar_magmoms.append(magmom)<br><br><span class="hljs-comment"># 使用CifWriter但添加自定义标量磁矩列</span><br>cif_writer = CifWriter(structure)<br>cif_file = cif_writer.cif_file<br><span class="hljs-comment"># 获取第一个数据块</span><br>data_block = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(cif_file.data.values()))<br><span class="hljs-comment"># 添加标量磁矩数据</span><br>atom_labels = [<span class="hljs-string">f&quot;Ti<span class="hljs-subst">&#123;i&#125;</span>&quot;</span> <span class="hljs-keyword">if</span> s.species_string == <span class="hljs-string">&quot;Ti&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">f&quot;O<span class="hljs-subst">&#123;i&#125;</span>&quot;</span> <br>                <span class="hljs-keyword">for</span> i, s <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(structure)]<br><br><span class="hljs-comment"># 添加标量磁矩循环</span><br>data_block.add_loop([<br>    [<span class="hljs-string">&quot;_atom_site_label&quot;</span>] + atom_labels,<br>    [<span class="hljs-string">&quot;_atom_site_scalar_magmom&quot;</span>] + [<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;m:<span class="hljs-number">.6</span>f&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> scalar_magmoms]<br>])<br><br><span class="hljs-comment"># 保存修改后的CIF</span><br>alt_filename = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;MP_ID&#125;</span>_alt_scalar_magmoms.cif&quot;</span><br>cif_file.write_file(alt_filename)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;备选方法生成CIF文件: <span class="hljs-subst">&#123;alt_filename&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 打印验证信息</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n标量磁矩值:&quot;</span>)<br><span class="hljs-keyword">for</span> i, magmom <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(scalar_magmoms):<br>    element = structure[i].species_string<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;原子 <span class="hljs-subst">&#123;i&#125;</span> (<span class="hljs-subst">&#123;element&#125;</span>): <span class="hljs-subst">&#123;magmom:<span class="hljs-number">.6</span>f&#125;</span> μB&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="如何读取这些磁矩并加入训练？"><a href="#如何读取这些磁矩并加入训练？" class="headerlink" title="如何读取这些磁矩并加入训练？"></a>如何读取这些磁矩并加入训练？</h2><p>首先，我按照原来的方式读取了原始数据和加入了磁矩的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> csat.crystal_data <span class="hljs-keyword">import</span> CIFData, crystal_graph_list<br><span class="hljs-keyword">from</span> csat.subgraph_data <span class="hljs-keyword">import</span> KhopGraphDataset<br>data = CIFData(<span class="hljs-string">&quot;Ti2O3&quot;</span>, target_name=<span class="hljs-string">&#x27;is_Magnetic&#x27;</span> )<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是读取cif文件后的数据&#x27;</span>)<br>graph = crystal_graph_list(data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是图数据&#x27;</span>)<br><span class="hljs-built_in">print</span>(graph[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(graph[<span class="hljs-number">0</span>].x)<br>graph_sub = KhopGraphDataset(graph, k_hop=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是子图数据&#x27;</span>)<br><span class="hljs-built_in">print</span>(graph_sub[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>两次结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">这是读取cif文件后的数据<br><span class="hljs-number">100</span>%|██████████| <span class="hljs-number">1</span>/<span class="hljs-number">1</span> [<span class="hljs-number">00</span>:<span class="hljs-number">00</span>&lt;<span class="hljs-number">00</span>:<span class="hljs-number">00</span>, <span class="hljs-number">29.05</span>it/s]<br>这是图数据<br>Data(x=[<span class="hljs-number">20</span>, <span class="hljs-number">92</span>], edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">196</span>], edge_attr=[<span class="hljs-number">196</span>, <span class="hljs-number">41</span>], y=[<span class="hljs-number">1</span>], <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;Ti2O3&#x27;</span>)<br>tensor([[<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,  ..., <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,  ..., <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,  ..., <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        ...,<br>        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,  ..., <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,  ..., <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,  ..., <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])<br>Extracting <span class="hljs-number">2</span>-hop subgraphs...<br><span class="hljs-number">100</span>%|██████████| <span class="hljs-number">1</span>/<span class="hljs-number">1</span> [<span class="hljs-number">00</span>:<span class="hljs-number">00</span>&lt;<span class="hljs-number">00</span>:<span class="hljs-number">00</span>, <span class="hljs-number">77.63</span>it/s]<br>Done!<br>这是子图数据<br>Data(x=[<span class="hljs-number">20</span>, <span class="hljs-number">92</span>], edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">196</span>], edge_attr=[<span class="hljs-number">196</span>, <span class="hljs-number">41</span>], y=[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>], <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;Ti2O3&#x27;</span>, degree=[<span class="hljs-number">20</span>], complete_edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">400</span>], subgraph_edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">3756</span>], num_subgraph_nodes=<span class="hljs-number">390</span>, subgraph_node_idx=[<span class="hljs-number">390</span>], subgraph_indicator=[<span class="hljs-number">390</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">这是读取cif文件后的数据<br><span class="hljs-number">100</span>%|██████████| <span class="hljs-number">1</span>/<span class="hljs-number">1</span> [<span class="hljs-number">00</span>:<span class="hljs-number">00</span>&lt;<span class="hljs-number">00</span>:<span class="hljs-number">00</span>, <span class="hljs-number">27.14</span>it/s]<br>这是图数据<br>Data(x=[<span class="hljs-number">20</span>, <span class="hljs-number">92</span>], edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">196</span>], edge_attr=[<span class="hljs-number">196</span>, <span class="hljs-number">41</span>], y=[<span class="hljs-number">1</span>], <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;Ti2O3&#x27;</span>)<br>tensor([[<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,  ..., <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,  ..., <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,  ..., <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        ...,<br>        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,  ..., <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,  ..., <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,  ..., <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])<br>Extracting <span class="hljs-number">2</span>-hop subgraphs...<br><span class="hljs-number">100</span>%|██████████| <span class="hljs-number">1</span>/<span class="hljs-number">1</span> [<span class="hljs-number">00</span>:<span class="hljs-number">00</span>&lt;<span class="hljs-number">00</span>:<span class="hljs-number">00</span>, <span class="hljs-number">77.26</span>it/s]<br>Done!<br>这是子图数据<br>Data(x=[<span class="hljs-number">20</span>, <span class="hljs-number">92</span>], edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">196</span>], edge_attr=[<span class="hljs-number">196</span>, <span class="hljs-number">41</span>], y=[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>], <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;Ti2O3&#x27;</span>, degree=[<span class="hljs-number">20</span>], complete_edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">400</span>], subgraph_edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">3756</span>], num_subgraph_nodes=<span class="hljs-number">390</span>, subgraph_node_idx=[<span class="hljs-number">390</span>], subgraph_indicator=[<span class="hljs-number">390</span>])<br></code></pre></td></tr></table></figure><p>没有任何区别，说明没有读取到磁矩信息，于是我就要从读取方式上着手，追本溯源。</p><p>在原来项目文件中，读取 cif 结构的部分如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pymatgen.core.structure <span class="hljs-keyword">import</span> Structure<br><br>crystal = Structure.from_file(os.path.join(<span class="hljs-variable language_">self</span>.root_dir,<br>                                                   cif_id + <span class="hljs-string">&#x27;.cif&#x27;</span>))<br>        atom_fea = np.vstack([<span class="hljs-variable language_">self</span>.ari.get_atom_fea(crystal[i].specie.number)<br>                              <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(crystal))])<br>        atom_fea = torch.Tensor(atom_fea)<br>        all_nbrs = crystal.get_all_neighbors(<span class="hljs-variable language_">self</span>.radius, include_index=<span class="hljs-literal">True</span>)<br>        all_nbrs = [<span class="hljs-built_in">sorted</span>(nbrs, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>]) <span class="hljs-keyword">for</span> nbrs <span class="hljs-keyword">in</span> all_nbrs]<br>        nbr_fea_idx, nbr_fea = [], []<br>        <span class="hljs-keyword">for</span> nbr <span class="hljs-keyword">in</span> all_nbrs:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nbr) &lt; <span class="hljs-variable language_">self</span>.max_num_nbr:<br>                warnings.warn(<span class="hljs-string">&#x27;&#123;&#125; not find enough neighbors to build graph. &#x27;</span><br>                              <span class="hljs-string">&#x27;If it happens frequently, consider increase &#x27;</span><br>                              <span class="hljs-string">&#x27;radius.&#x27;</span>.<span class="hljs-built_in">format</span>(cif_id))<br>                nbr_fea_idx.append(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">2</span>], nbr)) +<br>                                   [<span class="hljs-number">0</span>] * (<span class="hljs-variable language_">self</span>.max_num_nbr - <span class="hljs-built_in">len</span>(nbr)))<br>                nbr_fea.append(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], nbr)) +<br>                               [<span class="hljs-variable language_">self</span>.radius + <span class="hljs-number">1.</span>] * (<span class="hljs-variable language_">self</span>.max_num_nbr -<br>                                                     <span class="hljs-built_in">len</span>(nbr)))<br>            <span class="hljs-keyword">else</span>:<br>                nbr_fea_idx.append(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">2</span>],<br>                                            nbr[:<span class="hljs-variable language_">self</span>.max_num_nbr])))<br>                nbr_fea.append(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>],<br>                                        nbr[:<span class="hljs-variable language_">self</span>.max_num_nbr])))<br>        nbr_fea_idx, nbr_fea = np.array(nbr_fea_idx), np.array(nbr_fea)<br>        nbr_fea = <span class="hljs-variable language_">self</span>.gdf.expand(nbr_fea)<br>        atom_fea = torch.Tensor(atom_fea)<br>        nbr_fea = torch.Tensor(nbr_fea)<br>        nbr_fea_idx = torch.LongTensor(nbr_fea_idx)<br>        target = torch.Tensor([<span class="hljs-built_in">float</span>(target_value)])<br>        <span class="hljs-keyword">return</span> (atom_fea, nbr_fea, nbr_fea_idx), target, cif_id<br></code></pre></td></tr></table></figure><p>我们来一步一步测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pymatgen.core.structure <span class="hljs-keyword">import</span> Structure<br>crystal = Structure.from_file(<span class="hljs-string">&#x27;Ti2O3_m/Ti2O3.cif&#x27;</span>)<br><span class="hljs-built_in">print</span>(crystal)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Full Formula (Ti8 O12)</span><br><span class="hljs-string">Reduced Formula: Ti2O3</span><br><span class="hljs-string">abc   :   5.151007   5.150980   9.476884</span><br><span class="hljs-string">angles:  90.000003  90.000215 120.000080</span><br><span class="hljs-string">pbc   :       True       True       True</span><br><span class="hljs-string">Sites (20)</span><br><span class="hljs-string">  #  SP           a         b         c    magmom</span><br><span class="hljs-string">---  ----  --------  --------  --------  --------</span><br><span class="hljs-string">  0  Ti    0.333333  0.666667  0.975046     0.514</span><br><span class="hljs-string">  1  Ti    0.333333  0.666667  0.249997    -0.112</span><br><span class="hljs-string">  2  Ti    1         1         0.999985     0.906</span><br><span class="hljs-string">  3  Ti    1         2e-06     0.500008     0.906</span><br><span class="hljs-string">  4  Ti    0.333333  0.666667  0.524963     0.514</span><br><span class="hljs-string">  5  Ti    0.666667  0.333333  0.750007    -0.112</span><br><span class="hljs-string">  6  Ti    0.666667  0.333333  0.024937     0.514</span><br><span class="hljs-string">  7  Ti    0.666667  0.333333  0.475051     0.514</span><br><span class="hljs-string">  8  O     0.025681  0.674403  0.116537    -0.007</span><br><span class="hljs-string">  9  O     0.974318  0.648705  0.616563    -0.007</span><br><span class="hljs-string"> 10  O     0.0257    0.351301  0.383472    -0.007</span><br><span class="hljs-string"> 11  O     0.974308  0.325583  0.883429    -0.007</span><br><span class="hljs-string"> 12  O     0.325599  0.351278  0.116537    -0.007</span><br><span class="hljs-string"> 13  O     0.351293  0.32561   0.61656     -0.007</span><br><span class="hljs-string"> 14  O     0.3256    0.974301  0.383477    -0.007</span><br><span class="hljs-string"> 15  O     0.351274  0.02569   0.88343     -0.007</span><br><span class="hljs-string"> 16  O     0.648702  0.674402  0.383477    -0.007</span><br><span class="hljs-string"> 17  O     0.674414  0.648724  0.883429    -0.007</span><br><span class="hljs-string"> 18  O     0.648724  0.974321  0.116535    -0.007</span><br><span class="hljs-string"> 19  O     0.674388  0.025681  0.61656     -0.007</span><br><span class="hljs-string"> &#x27;&#x27;&#x27;</span><br>这里是利用 pymatgen 读取 structure，可以看见跟之前获取时候打印的是一模一样的，而且是含有磁矩的。<br>接下来按照谢天的方法来读取原子特征<br>```python<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-comment"># 原子特征初始化器</span><br><span class="hljs-comment"># 原子特征初始化器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AtomInitializer</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Base class for intializing the vector representation for atoms.</span><br><span class="hljs-string">    该类的作用是初始化原子的特征表示。</span><br><span class="hljs-string">    初始化过程是通过一个字典将每种元素的原子特征表示存储在内存中。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, atom_types</span>):<br>        <span class="hljs-variable language_">self</span>.atom_types = <span class="hljs-built_in">set</span>(atom_types) <span class="hljs-comment"># 存储原子类型的集合</span><br>        <span class="hljs-variable language_">self</span>._embedding = &#123;&#125; <span class="hljs-comment"># # 核心存储：原子类型 -&gt; 特征向量</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_atom_fea</span>(<span class="hljs-params">self, atom_type</span>):<br>        <span class="hljs-keyword">assert</span> atom_type <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.atom_types<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._embedding[atom_type] <span class="hljs-comment"># 原子序数作为键获取特征向量</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_state_dict</span>(<span class="hljs-params">self, state_dict</span>):<br>        <span class="hljs-variable language_">self</span>._embedding = state_dict<br>        <span class="hljs-variable language_">self</span>.atom_types = <span class="hljs-built_in">set</span>(<span class="hljs-variable language_">self</span>._embedding.keys())<br>        <span class="hljs-variable language_">self</span>._decodedict = &#123;idx: atom_type <span class="hljs-keyword">for</span> atom_type, idx <span class="hljs-keyword">in</span><br>                            <span class="hljs-variable language_">self</span>._embedding.items()&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">state_dict</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._embedding<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">self, idx</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(<span class="hljs-variable language_">self</span>, <span class="hljs-string">&#x27;_decodedict&#x27;</span>):<br>            <span class="hljs-variable language_">self</span>._decodedict = &#123;idx: atom_type <span class="hljs-keyword">for</span> atom_type, idx <span class="hljs-keyword">in</span><br>                                <span class="hljs-variable language_">self</span>._embedding.items()&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._decodedict[idx]<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AtomCustomJSONInitializer</span>(<span class="hljs-title class_ inherited__">AtomInitializer</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    继承自 AtomInitializer，专门通过一个 JSON 文件加载原子特征，该文件包含了每种元素的特征向量。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, elem_embedding_file</span>):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(elem_embedding_file) <span class="hljs-keyword">as</span> f:<br>            elem_embedding = json.load(f) <span class="hljs-comment"># 读取 JSON 文件</span><br>            <br>        <span class="hljs-comment"># 将 JSON 中的键转换为整数类型，并将值转换为 NumPy 数组</span><br>        <span class="hljs-comment"># 这样可以确保原子序数作为键，特征向量作为值</span><br>        elem_embedding = &#123;<span class="hljs-built_in">int</span>(key): value <span class="hljs-keyword">for</span> key, value<br>                          <span class="hljs-keyword">in</span> elem_embedding.items()&#125;<br>        <br>        <span class="hljs-comment"># 初始化父类，传入原子类型集合</span><br>        <span class="hljs-comment"># 这里的原子类型是 JSON 文件中的键（整数形式的原子序数）</span><br>        <span class="hljs-comment"># 例如：&#123;6: [0.1, 0.2, ...  ], 8: [0.3, 0.4, ...]&#125;</span><br>        atom_types = <span class="hljs-built_in">set</span>(elem_embedding.keys())<br>        <span class="hljs-comment"># 调用父类构造函数</span><br>        <span class="hljs-built_in">super</span>(AtomCustomJSONInitializer, <span class="hljs-variable language_">self</span>).__init__(atom_types)<br>        <span class="hljs-comment"># 将 JSON 中的特征向量存储到 _embedding 字典中</span><br>        <span class="hljs-comment"># 这里的键是整数形式的原子序数，值是对应的特征向量</span><br>        <span class="hljs-comment"># 例如：&#123;6: np.array([0.1, 0.2</span><br>        <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> elem_embedding.items():<br>            <span class="hljs-variable language_">self</span>._embedding[key] = np.array(value, dtype=<span class="hljs-built_in">float</span>)<br><br><br>ari = AtomCustomJSONInitializer(<span class="hljs-string">&#x27;Ti2O3_m/atom_init.json&#x27;</span>)<br><span class="hljs-comment"># 遍历晶体中的每个原子</span><br>atom_fea = np.vstack([ari.get_atom_fea(crystal[i].specie.number)  <span class="hljs-comment"># 获取原子序数的特征向量</span><br>                              <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(crystal))])<br>atom_fea = torch.Tensor(atom_fea)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是原子特征&#x27;</span>)<br><span class="hljs-built_in">print</span>(atom_fea)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;结果</span><br><span class="hljs-string">这是原子特征</span><br><span class="hljs-string">tensor([[0., 0., 0.,  ..., 0., 0., 0.],</span><br><span class="hljs-string">        [0., 0., 0.,  ..., 0., 0., 0.],</span><br><span class="hljs-string">        [0., 0., 0.,  ..., 0., 0., 0.],</span><br><span class="hljs-string">        ...,</span><br><span class="hljs-string">        [0., 0., 0.,  ..., 0., 0., 0.],</span><br><span class="hljs-string">        [0., 0., 0.,  ..., 0., 0., 0.],</span><br><span class="hljs-string">        [0., 0., 0.,  ..., 0., 0., 0.]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>从这里就可以发现，原子特征是按照 atom_init.json 进行编码的。</p><p>这段代码的核心功能是：<strong>将晶体结构中的每个原子转化为数值化特征向量，最终生成一个PyTorch张量。</strong></p><p>具体流程：</p><ul><li>从JSON文件加载预定义的原子特征向量（每个原子序数对应一个特征向量）</li><li>遍历晶体中的每个原子，根据其原子序数获取对应特征向量</li><li>堆叠所有原子的特征向量形成特征矩阵</li><li>转换为PyTorch张量供深度学习模型使用</li></ul><p>所以他的关键就是这一步 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">atom_fea = np.vstack([ari.get_atom_fea(crystal[i].specie.number)   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(crystal))])<br></code></pre></td></tr></table></figure><p>于是我就单独把它拎出来看一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(crystal)):<br>    <span class="hljs-built_in">print</span>(crystal[i].specie.number)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">22</span><br><span class="hljs-string">22</span><br><span class="hljs-string">22</span><br><span class="hljs-string">22</span><br><span class="hljs-string">22</span><br><span class="hljs-string">22</span><br><span class="hljs-string">22</span><br><span class="hljs-string">22</span><br><span class="hljs-string">8</span><br><span class="hljs-string">8</span><br><span class="hljs-string">8</span><br><span class="hljs-string">8</span><br><span class="hljs-string">8</span><br><span class="hljs-string">8</span><br><span class="hljs-string">8</span><br><span class="hljs-string">8</span><br><span class="hljs-string">8</span><br><span class="hljs-string">8</span><br><span class="hljs-string">8</span><br><span class="hljs-string">8</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>正好是原子序数，这对我以后话题也很有启发</p><p><img src="/img/%E5%85%B3%E4%BA%8E%E7%A3%81%E7%9F%A9%E7%89%B9%E5%BE%81%E5%86%99%E5%85%A5/1.png"></p><p><img src="/img/%E5%85%B3%E4%BA%8E%E7%A3%81%E7%9F%A9%E7%89%B9%E5%BE%81%E5%86%99%E5%85%A5/2.png"></p><p>这样子画图就好很多了，而且能检索出元素了。</p><p>回归正题，在这里 crystal 变量是可以访问多个参数的，他是源自</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pymatgen.core.structure <span class="hljs-keyword">import</span> Structure <br></code></pre></td></tr></table></figure><p>我们就来看这个 Structure 到底是什么</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Structure</span>(IStructure, collections.abc.MutableSequence):<br>    <span class="hljs-string">&quot;&quot;&quot;Mutable version of structure.&quot;&quot;&quot;</span><br><br>    __hash__ = <span class="hljs-literal">None</span>  <span class="hljs-comment"># type: ignore[assignment]</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"></span><br><span class="hljs-params">        self,</span><br><span class="hljs-params">        lattice: ArrayLike | Lattice,</span><br><span class="hljs-params">        species: <span class="hljs-type">Sequence</span>[CompositionLike],</span><br><span class="hljs-params">        coords: <span class="hljs-type">Sequence</span>[ArrayLike] | ArrayLike,</span><br><span class="hljs-params">        charge: <span class="hljs-built_in">float</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        validate_proximity: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,</span><br><span class="hljs-params">        to_unit_cell: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,</span><br><span class="hljs-params">        coords_are_cartesian: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,</span><br><span class="hljs-params">        site_properties: <span class="hljs-built_in">dict</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        labels: <span class="hljs-type">Sequence</span>[<span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span>] | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        properties: <span class="hljs-built_in">dict</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">    </span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;Create a periodic structure.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            lattice: The lattice, either as a pymatgen.core.Lattice or</span><br><span class="hljs-string">                simply as any 2D array. Each row should correspond to a lattice</span><br><span class="hljs-string">                vector. e.g. [[10,0,0], [20,10,0], [0,0,30]] specifies a</span><br><span class="hljs-string">                lattice with lattice vectors [10,0,0], [20,10,0] and [0,0,30].</span><br><span class="hljs-string">            species: List of species on each site. Can take in flexible input,</span><br><span class="hljs-string">                including:</span><br><span class="hljs-string"></span><br><span class="hljs-string">                i.  A sequence of element / species specified either as string</span><br><span class="hljs-string">                    symbols, e.g. [&quot;Li&quot;, &quot;Fe2+&quot;, &quot;P&quot;, ...] or atomic numbers,</span><br><span class="hljs-string">                    e.g. (3, 56, ...) or actual Element or Species objects.</span><br><span class="hljs-string"></span><br><span class="hljs-string">                ii. List of dict of elements/species and occupancies, e.g.</span><br><span class="hljs-string">                    [&#123;&quot;Fe&quot; : 0.5, &quot;Mn&quot;:0.5&#125;, ...]. This allows the setup of</span><br><span class="hljs-string">                    disordered structures.</span><br><span class="hljs-string">            coords (Nx3 array): list of fractional/cartesian coordinates of</span><br><span class="hljs-string">                each species.</span><br><span class="hljs-string">            charge (float): overall charge of the structure. Defaults to behavior</span><br><span class="hljs-string">                in SiteCollection where total charge is the sum of the oxidation</span><br><span class="hljs-string">                states.</span><br><span class="hljs-string">            validate_proximity (bool): Whether to check if there are sites</span><br><span class="hljs-string">                that are less than 0.01 Ang apart. Defaults to False.</span><br><span class="hljs-string">            to_unit_cell (bool): Whether to map all sites into the unit cell,</span><br><span class="hljs-string">                i.e., fractional coords between 0 and 1. Defaults to False.</span><br><span class="hljs-string">            coords_are_cartesian (bool): Set to True if you are providing</span><br><span class="hljs-string">                coordinates in Cartesian coordinates. Defaults to False.</span><br><span class="hljs-string">            site_properties (dict): Properties associated with the sites as a</span><br><span class="hljs-string">                dict of sequences, e.g. &#123;&quot;magmom&quot;:[5,5,5,5]&#125;. The sequences</span><br><span class="hljs-string">                have to be the same length as the atomic species and</span><br><span class="hljs-string">                fractional_coords. Defaults to None for no properties.</span><br><span class="hljs-string">            labels (list[str]): Labels associated with the sites as a</span><br><span class="hljs-string">                list of strings, e.g. [&#x27;Li1&#x27;, &#x27;Li2&#x27;]. Must have the same</span><br><span class="hljs-string">                length as the species and fractional coords. Defaults to</span><br><span class="hljs-string">                None for no labels.</span><br><span class="hljs-string">            properties (dict): Properties associated with the whole structure.</span><br><span class="hljs-string">                Will be serialized when writing the structure to JSON or YAML but is</span><br><span class="hljs-string">                lost when converting to other formats.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>参数：</strong></p><ol><li><em><strong>lattice:</strong></em> 晶格参数，可接受pymatgen.core.Lattice对象或任意二维数组。每行对应一个晶格向量，例如[[10,0,0], [20,10,0], [0,0,30]]表示晶格向量[10,0,0]、[20,10,0]和[0,0,30]。</li><li><em><strong>species</strong></em>: 各点位元素的种类列表，支持多种输入形式：<ol><li>字符串符号（如[“Li”, “Fe2+”, “P”,…]）、原子序数（如(3, 56,…)）或Element&#x2F;Species对象组成的序</li><li>由元素&#x2F;物种及占位占比构成的字典列表（如[{“Fe”:0.5, “Mn”:0.5},…]），用于构建无序结构(disordered structures)coords (Nx3数组): 各元素的分数坐标&#x2F;笛卡尔坐标列表</li></ol></li><li><em><strong>charge</strong></em> (float): 结构整体电荷量。默认遵循SiteCollection行为，即总电荷为各点位氧化态之和</li><li><em><strong>validate_proximity</strong></em> (bool): 是否检查存在间距小于0.01埃的原子点位，默认为False</li><li><em><strong>to_unit_cell</strong></em> (bool): 是否将所有点位映射到单位晶胞内（即分数坐标强制转换到0-1区间），默认为False</li><li><em><strong>coords_are_cartesian</strong></em> (bool): True表示提供笛卡尔坐标，False表示分数坐标，默认为False</li><li><em><strong>site_properties</strong></em> (dict): 原子点位属性字典，格式为{“属性名”:[值1,值2,…]}，序列长度需与species和coords一致，默认为None</li><li><em><strong>labels</strong></em> (list[str]): 原子点位标签列表（如[‘Li1’, ‘Li2’]），长度需与species和coords一致，默认为None</li><li><em><strong>properties</strong></em> (dict): 结构整体属性字典，序列化为JSON&#x2F;YAML时保留，但转换为其他格式时会丢失</li></ol><p>注：  </p><ul><li>保留pymatgen.core.Lattice、Element、Species等专业对象名不翻译  </li><li>晶体学术语如”disordered structures”译为”无序结构”以匹配领域习惯  </li><li>坐标类型（笛卡尔&#x2F;分数）的转换逻辑通过参数层次清晰表达  </li><li>默认值说明保持与API文档一致的数值精度（如0.01埃）  </li><li>数据结构格式（Nx3数组、字典、列表）保持技术文档通用表述  </li><li>参数间的数据一致性要求（如长度匹配）使用强调句式突显</li></ul><h3 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h3><p>以下是针对 <code>pymatgen.core.structure.Structure</code> 对象的详细访问指南，涵盖了其核心属性和方法：</p><h4 id="1-基本结构信息"><a href="#1-基本结构信息" class="headerlink" title="1. 基本结构信息"></a>1. 基本结构信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 晶胞参数</span><br>lattice = crystal.lattice<br><span class="hljs-built_in">print</span>(lattice.a, lattice.b, lattice.c)  <span class="hljs-comment"># 晶格常数 (Å)</span><br><span class="hljs-built_in">print</span>(lattice.alpha, lattice.beta, lattice.gamma)  <span class="hljs-comment"># 晶格角度 (°)</span><br><span class="hljs-built_in">print</span>(lattice.matrix)  <span class="hljs-comment"># 3x3 晶格向量矩阵</span><br><br><span class="hljs-comment"># 晶体基本信息</span><br><span class="hljs-built_in">print</span>(crystal.formula)  <span class="hljs-comment"># 化学式 (如 &quot;Ti2 O3&quot;)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(crystal))     <span class="hljs-comment"># 原子总数</span><br><span class="hljs-built_in">print</span>(crystal.volume)   <span class="hljs-comment"># 晶胞体积 (Å³)</span><br><span class="hljs-built_in">print</span>(crystal.density)  <span class="hljs-comment"># 密度 (g/cm³)</span><br></code></pre></td></tr></table></figure><h4 id="2-原子位点访问"><a href="#2-原子位点访问" class="headerlink" title="2. 原子位点访问"></a>2. 原子位点访问</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 访问单个原子位点</span><br>site = crystal[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 第一个原子位点</span><br><br><span class="hljs-comment"># 原子位点属性</span><br><span class="hljs-built_in">print</span>(site.specie)        <span class="hljs-comment"># 元素对象 (如 Element(&quot;Ti&quot;))</span><br><span class="hljs-built_in">print</span>(site.specie.number) <span class="hljs-comment"># 原子序数 (22)</span><br><span class="hljs-built_in">print</span>(site.specie.symbol) <span class="hljs-comment"># 元素符号 (&quot;Ti&quot;)</span><br><span class="hljs-built_in">print</span>(site.coords)        <span class="hljs-comment"># 笛卡尔坐标 [x, y, z] (Å)</span><br><span class="hljs-built_in">print</span>(site.frac_coords)   <span class="hljs-comment"># 分数坐标 [a, b, c]</span><br><span class="hljs-built_in">print</span>(site.properties)    <span class="hljs-comment"># 附加属性字典</span><br></code></pre></td></tr></table></figure><h4 id="3-化学组成分析"><a href="#3-化学组成分析" class="headerlink" title="3. 化学组成分析"></a>3. 化学组成分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 元素组成</span><br><span class="hljs-built_in">print</span>(crystal.composition)          <span class="hljs-comment"># Composition对象 (如 Composition(&quot;Ti2O3&quot;))</span><br><span class="hljs-built_in">print</span>(crystal.composition.reduced_formula)  <span class="hljs-comment"># 最简化学式 (&quot;Ti2O3&quot;)</span><br><span class="hljs-built_in">print</span>(crystal.composition.num_atoms) <span class="hljs-comment"># 总原子数</span><br><span class="hljs-built_in">print</span>(crystal.composition[<span class="hljs-string">&quot;Ti&quot;</span>])     <span class="hljs-comment"># Ti原子数量 (2)</span><br><br><span class="hljs-comment"># 元素分布</span><br><span class="hljs-built_in">print</span>(crystal.atomic_numbers)  <span class="hljs-comment"># 所有原子序数列表 [22, 22, 8, 8, 8]</span><br><span class="hljs-built_in">print</span>(crystal.species)         <span class="hljs-comment"># 所有元素对象列表</span><br></code></pre></td></tr></table></figure><h4 id="4-对称性分析-需要spglib"><a href="#4-对称性分析-需要spglib" class="headerlink" title="4. 对称性分析 (需要spglib)"></a>4. 对称性分析 (需要spglib)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 空间群分析</span><br><span class="hljs-built_in">print</span>(crystal.get_space_group_info())  <span class="hljs-comment"># (空间群符号, 国际表编号)</span><br><br><span class="hljs-comment"># 对称操作</span><br><span class="hljs-built_in">print</span>(crystal.get_symmetry_operations())<br><br><span class="hljs-comment"># 等效原子</span><br><span class="hljs-built_in">print</span>(crystal.find_equivalent_sites())<br></code></pre></td></tr></table></figure><h4 id="5-结构操作"><a href="#5-结构操作" class="headerlink" title="5. 结构操作"></a>5. 结构操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 结构转换</span><br>crystal.to(fmt=<span class="hljs-string">&quot;poscar&quot;</span>)  <span class="hljs-comment"># 转为VASP POSCAR格式字符串</span><br>crystal.to(filename=<span class="hljs-string">&quot;output.cif&quot;</span>)  <span class="hljs-comment"># 保存为CIF文件</span><br><br><span class="hljs-comment"># 结构操作</span><br>crystal.make_supercell([<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>])  <span class="hljs-comment"># 创建超胞</span><br>crystal.add_site_property(<span class="hljs-string">&quot;charge&quot;</span>, [<span class="hljs-number">0.5</span>]*<span class="hljs-built_in">len</span>(crystal))  <span class="hljs-comment"># 添加自定义属性</span><br></code></pre></td></tr></table></figure><h4 id="6-物理性质计算"><a href="#6-物理性质计算" class="headerlink" title="6. 物理性质计算"></a>6. 物理性质计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 距离/角度计算</span><br><span class="hljs-built_in">print</span>(crystal.get_distance(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 原子0和1之间的距离</span><br><span class="hljs-built_in">print</span>(crystal.get_angle(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 原子0-1-2之间的角度</span><br><br><span class="hljs-comment"># 邻居分析</span><br>neighbors = crystal.get_neighbors(site, r=<span class="hljs-number">3.0</span>)  <span class="hljs-comment"># 3Å内的邻居</span><br><span class="hljs-keyword">for</span> neighbor, distance, index <span class="hljs-keyword">in</span> neighbors:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;原子<span class="hljs-subst">&#123;index&#125;</span>(<span class="hljs-subst">&#123;neighbor.specie&#125;</span>) 距离: <span class="hljs-subst">&#123;distance:<span class="hljs-number">.3</span>f&#125;</span>Å&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="7-高级特征"><a href="#7-高级特征" class="headerlink" title="7. 高级特征"></a>7. 高级特征</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 倒易晶格</span><br><span class="hljs-built_in">print</span>(crystal.lattice.reciprocal_lattice)<br><br><span class="hljs-comment"># 磁性分析 (若有自旋信息)</span><br><span class="hljs-built_in">print</span>(crystal.is_ordered)  <span class="hljs-comment"># 是否所有位点有序</span><br><span class="hljs-built_in">print</span>(crystal.spin_states)  <span class="hljs-comment"># 自旋状态</span><br><br><span class="hljs-comment"># 缺陷分析</span><br><span class="hljs-built_in">print</span>(crystal.frac_coords % <span class="hljs-number">1</span>)  <span class="hljs-comment"># 所有原子分数坐标</span><br></code></pre></td></tr></table></figure><h4 id="示例应用：获取所有原子坐标"><a href="#示例应用：获取所有原子坐标" class="headerlink" title="示例应用：获取所有原子坐标"></a>示例应用：获取所有原子坐标</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取所有原子的元素符号和笛卡尔坐标</span><br>atom_data = []<br><span class="hljs-keyword">for</span> i, site <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(crystal):<br>    atom_data.append(&#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: i,<br>        <span class="hljs-string">&quot;element&quot;</span>: site.specie.symbol,<br>        <span class="hljs-string">&quot;atomic_number&quot;</span>: site.specie.number,<br>        <span class="hljs-string">&quot;cartesian_coords&quot;</span>: site.coords.tolist(),<br>        <span class="hljs-string">&quot;fractional_coords&quot;</span>: site.frac_coords.tolist()<br>    &#125;)<br><span class="hljs-built_in">print</span>(json.dumps(atom_data, indent=<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>熟悉了以上之后，便可以获取其原子磁矩了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(crystal)):<br>    <span class="hljs-built_in">print</span>(crystal[i].specie.symbol)<br>    <span class="hljs-built_in">print</span>(crystal.site_properties[<span class="hljs-string">&#x27;magmom&#x27;</span>][i])<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Ti</span><br><span class="hljs-string">0.5139999999963609</span><br><span class="hljs-string">Ti</span><br><span class="hljs-string">-0.11199999999920497</span><br><span class="hljs-string">Ti</span><br><span class="hljs-string">0.9059999999935977</span><br><span class="hljs-string">Ti</span><br><span class="hljs-string">0.9059999999935977</span><br><span class="hljs-string">Ti</span><br><span class="hljs-string">0.5139999999963609</span><br><span class="hljs-string">Ti</span><br><span class="hljs-string">-0.11199999999920497</span><br><span class="hljs-string">Ti</span><br><span class="hljs-string">0.5139999999963609</span><br><span class="hljs-string">Ti</span><br><span class="hljs-string">0.5139999999963609</span><br><span class="hljs-string">O</span><br><span class="hljs-string">-0.006999999999953593</span><br><span class="hljs-string">O</span><br><span class="hljs-string">-0.006999999999953593</span><br><span class="hljs-string">O</span><br><span class="hljs-string">-0.006999999999953593</span><br><span class="hljs-string">O</span><br><span class="hljs-string">-0.006999999999953593</span><br><span class="hljs-string">O</span><br><span class="hljs-string">...</span><br><span class="hljs-string">O</span><br><span class="hljs-string">-0.006999999999953593</span><br><span class="hljs-string">O</span><br><span class="hljs-string">-0.006999999999953593</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>现在就要把他加入进编码后的原子特征中，也就是 atom_fea。</p><p>首先把磁矩加入单个原子的特征中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">atom_fea_list = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(crystal)):<br>    base_fea = ari.get_atom_fea(crystal[i].specie.number)<br>    magmom  = crystal.site_properties[<span class="hljs-string">&#x27;magmom&#x27;</span>][i] <span class="hljs-comment"># 添加磁矩</span><br>    magmom = <span class="hljs-built_in">float</span>(magmom)  <span class="hljs-comment"># 确保磁矩是浮点数类型</span><br>    <span class="hljs-comment"># 将磁矩作为新特征追加</span><br>    extended_fea = np.append(base_fea, magmom)<br>    <br>    atom_fea_list.append(extended_fea)<br>    <span class="hljs-built_in">print</span>(extended_fea)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[0.    0.    0.    0.    1.    0.    0.    0.    0.    0.    0.    0.</span><br><span class="hljs-string"> 0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    1.    0.</span><br><span class="hljs-string"> 0.    0.    0.    0.    1.    0.    0.    0.    0.    0.    0.    0.</span><br><span class="hljs-string"> 0.    0.    0.    0.    1.    0.    0.    0.    0.    0.    0.    0.</span><br><span class="hljs-string"> 0.    1.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.</span><br><span class="hljs-string"> 0.    1.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.</span><br><span class="hljs-string"> 1.    0.    0.    0.    0.    0.    0.    0.    1.    0.    0.    0.</span><br><span class="hljs-string"> 0.    1.    0.    0.    0.    0.    0.    0.    0.514]</span><br><span class="hljs-string"> &#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>再统一封装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">atom_fea = np.vstack(atom_fea_list)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是扩展后的原子特征&#x27;</span>)<br>atom_fea = torch.Tensor(atom_fea)<br><span class="hljs-built_in">print</span>(atom_fea)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor([[ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.5140],</span><br><span class="hljs-string">        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000, -0.1120],</span><br><span class="hljs-string">        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.9060],</span><br><span class="hljs-string">        ...,</span><br><span class="hljs-string">        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000, -0.0070],</span><br><span class="hljs-string">        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000, -0.0070],</span><br><span class="hljs-string">        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000, -0.0070]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>凝聚态物理与人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MP</tag>
      
      <tag>CSAT</tag>
      
      <tag>科研</tag>
      
      <tag>凝聚态物理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构第二章：顺序表</title>
    <link href="/2025/07/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <url>/2025/07/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="基本顺序表"><a href="#基本顺序表" class="headerlink" title="基本顺序表"></a>基本顺序表</h1><p>基本数据 int &#x3D; 1,2,3 对应 3 个存储单元，</p><p>但是他们是连续的整数，那么在存储的时候就可以将它们连续储存。</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E8%A1%A8/yuque_mind.jpeg" alt="画板"></p><p>按此顺序存放的数据，其地址也是连续的，且每个位置存储数据存储的数据大小也是一样的。</p><p>要想获取往后元素的位置，只需要按照第一个为参考系进行一次运算得出。</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E8%A1%A8/0.png"></p><p>这就是<strong>顺序表。</strong></p><p>此时 list 的存储地址，指向的就是第一个元素的地址；在读取 list[2] 的时候，他的地址是通过 0x01 进行推算的。例如：2 的位置是由 0x01+4Byte &#x3D; 0x05 得出，4Byte 是因为存储的是 int 占位 4 字节。</p><p>对于任意 list[n] &#x3D; 0x01 +4n</p><p>假如，list &#x3D; [1, “ab”]，字符串”ab”与 整数 1 所占位的存储空间大小不一样，那么就不能够使用上述公式来计算出 list[n] 的存储位置。但是我们发现，每个元素对应的地址都是固定字节的，是不变的、可以计算得出的，于是这个时候，我们可以把元素进行外置，将存储地址存入表中，见右图。</p><p>例如：list&#x3D;[12,”ab”,1.324,999]，在存储时，将每个元素随机存储一个物理地址，然后把四个存储地址变成一个顺序表，这样的话顺序表中的数据地址就是连续的了。</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E8%A1%A8/yuque_mind_1.jpeg" alt="画板"></p><p>这个时候，去索引 list[2] 的读取步骤就是：</p><p><strong>0x200 + 4x2 &#x3D; 0x208—–&gt;0x007—–&gt;1.324</strong></p><p>在 python 语言种已经对该顺序表进行封装了，就不用考虑用 python 实现了。</p><h1 id="顺序表的结构与实现"><a href="#顺序表的结构与实现" class="headerlink" title="顺序表的结构与实现"></a>顺序表的结构与实现</h1><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E8%A1%A8/1.png"></p><p>一个顺序表的完整信息包括两部分，一部分是表中的元素集合，另一部分是为实现正确操作而需记录的信息，即有关表的整体情况的信息，这部分信息主要包括元素存储区的** 容量** 和当前表中已有的** 元素个数** 两项。</p><h2 id="两种实现方式"><a href="#两种实现方式" class="headerlink" title="两种实现方式"></a>两种实现方式</h2><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E8%A1%A8/2.png"></p><p>图a为一体式结构，存储表信息的单元与元素存储区以连续的方式安排在一块存储区里，两部分数据的整体形成一个完整的顺序表对象。一体式结构整体性强，易于管理。但是由于数据元素存储区域是表对象的一部分，顺序表创建后，元素存储区就固定了。</p><p>图b为分离式结构，表对象里只保存与整个表有关的信息（即容量和元素个数），实际数据元素存放在另一个独立的元素存储区里，通过链接与基本表对象关联。</p><p>在构建顺序表的时候，要对存储空间大小和元素数量有一个预估。</p><p>一体式结构由于顺序表信息区与数据区连续存储在一起，所以若想更换数据区，则只能整体搬迁，即整个顺序表对象（指存储顺序表的结构信息的区域）改变了。分离式结构若想更换数据区，只需将表信息区中的数据区链接地址更新即可，而该顺序表对象不变。</p><p>采用分离式结构的顺序表，若将数据区更换为存储空间更大的区域，则可以在不改变表对象的前提下对其数据存储区进行了扩充，所有使用这个表的地方都不必修改。只要程序的运行环境（计算机系统）还有空闲存储，这种表结构就不会因为满了而导致操作无法进行。人们把采用这种技术实现的顺序表称为动态顺序表，因为其容量可以在使用中动态变化。</p><p>扩充的两种策略：</p><ul><li>每次扩充增加固定数目的存储位置，如每次扩充增加10个元素位置，这种策略可称为线性增长。<ul><li>特点：节省空间，但是扩充操作频繁，操作次数多。</li></ul></li><li>每次扩充容量加倍，如每次扩充增加一倍存储空间。<ul><li>特点：减少了扩充操作的执行次数，但可能会浪费空间资源。以空间换时间，推荐的方式。</li></ul></li></ul><h1 id="顺序表的操作"><a href="#顺序表的操作" class="headerlink" title="顺序表的操作"></a>顺序表的操作</h1><h2 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h2><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E8%A1%A8/3.png"></p><p>a. 尾端加入元素，时间复杂度为O(1)；</p><p>b. 非保序的加入元素（不常见），时间复杂度为O(1)；</p><p>c. 保序的元素加入，时间复杂度为O(n)。</p><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E8%A1%A8/4.png"></p><p>a. 删除表尾元素，时间复杂度为O(1)；</p><p>b. 非保序的元素删除（不常见），时间复杂度为O(1)；</p><p>c. 保序的元素删除，时间复杂度为O(n)。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构第一章：概念与引入</title>
    <link href="/2025/07/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%BC%95%E5%85%A5/"/>
    <url>/2025/07/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%BC%95%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p><strong>题目：如果 a+b+c&#x3D;1000，且 a^2 + b^2&#x3D;c^2（a,b,c 为自然数），如何求出 a,b,c 可能的组合？</strong></p><hr><p><em>方法一：枚举法</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a:<span class="hljs-number">0</span>-----&gt;<span class="hljs-number">10000</span><br>    b: <span class="hljs-number">0</span>-----&gt;<span class="hljs-number">1000</span><br>        c:<span class="hljs-number">0</span>-----&gt;<span class="hljs-number">1000</span><br>            <span class="hljs-keyword">if</span> a+b+c==<span class="hljs-number">1000</span> <span class="hljs-keyword">and</span> a**<span class="hljs-number">2</span> + b**<span class="hljs-number">2</span> == c**<span class="hljs-number">2</span>:<br>                <span class="hljs-built_in">print</span>(a,b,c)<br></code></pre></td></tr></table></figure><p>这样枚举的耗时约 244 秒，非常浪费时间·，于是我们需要调整我们的计算方法来优化这个程序。</p><p><strong>算法的五大特性</strong></p><ol><li><strong>输入：有 0 个或者多个输入；</strong></li><li><strong>输出：至少有 1 个或多个输出；</strong></li><li><strong>有穷性：需要在有限的步骤之后运行完成而非无限循环；每一个步骤要在可接受的时间范围之内完成；</strong></li><li><strong>确定性：每一个步骤都要有确定的含义；</strong></li><li><strong>可行性：每一步都能够被有限次数地执行。</strong></li></ol><p><em>改进 ：将 c 优化</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a:<span class="hljs-number">0</span>-----&gt;<span class="hljs-number">10000</span><br>    b: <span class="hljs-number">0</span>-----&gt;<span class="hljs-number">1000</span><br>        c= <span class="hljs-number">1000</span>-a-b<br>        <span class="hljs-keyword">if</span> a**<span class="hljs-number">2</span> + b**<span class="hljs-number">2</span> == c**<span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">print</span>(a,b,c)<br></code></pre></td></tr></table></figure><p>这样枚举耗时 1 秒，有明显的改进。</p><p>改进后的程序和改进前的程序执行的步骤不一样，改进前明显运算更多。</p><p>可见，解决同一个问题，不同的算法耗费的时间和资源是不同的，那么我们该如何评价一个算法的好坏呢？</p><h1 id="时间复杂度与“大-O-记法”"><a href="#时间复杂度与“大-O-记法”" class="headerlink" title="时间复杂度与“大 O 记法”"></a>时间复杂度与“大 O 记法”</h1><p>假定每执行一个基本运算所消耗的时间为一个固定时间单位，那么有多少个基本运算就代表有多少个时间单位，一个程序执行的基本运算数量便可以称之为<strong>时间复杂度</strong>。</p><p>对于一开始的枚举法：</p><p>基本运算的数量为 1000<em>1000</em>1000*2&#x3D;T，</p><p>那么如果 a+b+c&#x3D;N，T&#x3D;N<em>N</em>N*2，</p><p>那就可以说，对于该算法，其时间复杂度 T(N) &#x3D; n^3 * 2。</p><p>在分析一个问题的时候，我们可以忽略系数，只需要关心数量级，那么 T(N)&#x3D;n^3，就可以称这个为_ O(N)。_</p><h2 id="最坏时间复杂度"><a href="#最坏时间复杂度" class="headerlink" title="最坏时间复杂度"></a>最坏时间复杂度</h2><p>在改进后的算法中，O(N)&#x3D;N^2。</p><p>假设说，这个 N 很凑巧，我们的程序只执行了 N 边以内就解决了问题，并退出程序，他的时间复杂度就达不到 N^2，这个时候 O(N)&#x3D;N 就是<strong>最优时间复杂度</strong>，而 O(N)&#x3D;N^2 就是<strong>最坏时间复杂度</strong>。</p><p>而我们在计算时间复杂度的时候，只考虑最坏的情况，也就是 O(N)&#x3D;N^2。</p><h2 id="时间复杂度的基本计算"><a href="#时间复杂度的基本计算" class="headerlink" title="时间复杂度的基本计算"></a>时间复杂度的基本计算</h2><ol><li>基本运算+_*&#x2F;bool，即使只有常数项，也认为其时间复杂度为 O(1)；</li><li>顺序结构，按加法运算；</li><li>循环结构，按乘法运算；</li><li>分支结构，取分支时间复杂度的最大值；</li><li>判断一个算法效率时，只关注数量级，系数、常数项可以忽略，也就是侧重循环结构；</li><li>判断一个算法的时间复杂度，一般取最坏时间复杂度。</li></ol><h2 id="常见时间复杂度"><a href="#常见时间复杂度" class="headerlink" title="常见时间复杂度"></a>常见时间复杂度</h2><table><thead><tr><th align="center"><strong>执行次数函数</strong></th><th align="center"><strong>阶数</strong></th><th align="center"><strong>非正式术语</strong></th></tr></thead><tbody><tr><td align="center">2</td><td align="center">O(1)</td><td align="center">常数阶</td></tr><tr><td align="center">123n+12</td><td align="center">O(n)</td><td align="center">线性阶</td></tr><tr><td align="center">n^2+2n+12</td><td align="center">O(n^2)</td><td align="center">平方阶</td></tr><tr><td align="center">5log2(n)+12</td><td align="center">O(log(n))</td><td align="center">对数阶</td></tr><tr><td align="center">2n+3nlog2(n)+12</td><td align="center">O(nlog(n))</td><td align="center">nlogn 阶</td></tr><tr><td align="center">6n^3+3n^2+n+12</td><td align="center">O(n^3)</td><td align="center">立方阶</td></tr><tr><td align="center">2^n</td><td align="center">O(2^n)</td><td align="center">指数阶</td></tr></tbody></table><p><strong>大小关系</strong></p><p><strong>1&lt;log(n)&lt;n&lt;nlog(n)&lt;n^2&lt;n^3&lt;2^n&lt;n!&lt;n^n</strong></p><h1 id="代码进行时间测量的模块-timeit"><a href="#代码进行时间测量的模块-timeit" class="headerlink" title="代码进行时间测量的模块 timeit"></a>代码进行时间测量的模块 timeit</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">timeit</span>.Timer(stmt=<span class="hljs-string">&#x27;pass&#x27;</span>,setup=<span class="hljs-string">&#x27;pass&#x27;</span>,timer=&lt;timer function&gt;)<br></code></pre></td></tr></table></figure><p>stmt 参数是要测试的代码语句；</p><p>setup 参数是要运行的代码时需要的设置；</p><p>timer 参数是一个定期函数，与平台有关。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> timeit <span class="hljs-keyword">import</span> Timer<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test1</span>()<br>    li = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br>        li.append(i)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test2</span>()<br>    li = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br>        li += [i]<br><br>timer1 = Timer(<span class="hljs-string">&quot;test1()&quot;</span>, <span class="hljs-string">&quot;from __main__import test1&quot;</span>)<br>timer2 = Timer(<span class="hljs-string">&quot;test2()&quot;</span>, <span class="hljs-string">&quot;from __main__import test2&quot;</span>)<br><span class="hljs-built_in">print</span>(timer1.timeit&#123;<span class="hljs-number">1000</span>&#125;) <span class="hljs-comment"># 测算1000次</span><br></code></pre></td></tr></table></figure><h1 id="Python-中常用操作的复杂度"><a href="#Python-中常用操作的复杂度" class="headerlink" title="Python 中常用操作的复杂度"></a>Python 中常用操作的复杂度</h1><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>))<br>l1 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>,<span class="hljs-number">105</span>))<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">操作</th><th align="left">时间复杂度</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">lst[2]</td><td align="left">O(1)</td><td align="left">访问元素</td></tr><tr><td align="left">lst.pop()</td><td align="left">O(1)</td><td align="left">弹出最后一个值</td></tr><tr><td align="left">lst.append(l1)</td><td align="left">O(1)</td><td align="left">在末尾添加元素</td></tr><tr><td align="left">lst.extend(l1)</td><td align="left">O(K)</td><td align="left">在末尾逐个添加元素</td></tr><tr><td align="left">lst.clear()</td><td align="left">O(1)</td><td align="left">清空list</td></tr><tr><td align="left">lst.copy()</td><td align="left">O(N)</td><td align="left">列表拷贝</td></tr><tr><td align="left">lst.count(15)</td><td align="left">O(N)</td><td align="left">元素计数</td></tr><tr><td align="left">lst.remove(15)</td><td align="left">O(N)</td><td align="left">删除一个元素</td></tr><tr><td align="left">lst.reverse()</td><td align="left">O(N)</td><td align="left">反序</td></tr><tr><td align="left">lst.sort()</td><td align="left">O(N*log(N))</td><td align="left">排序</td></tr><tr><td align="left">lst.insert(1,200)</td><td align="left">O(N)</td><td align="left">在某一位置插入元素</td></tr><tr><td align="left">del lst[0]</td><td align="left">O(N)</td><td align="left">删除某个位置的元素</td></tr><tr><td align="left">lst.index(15)</td><td align="left">O(N)</td><td align="left">查找元素，并返回元素位置</td></tr><tr><td align="left"><a href="https://zhida.zhihu.com/search?content_id=159512488&content_type=Article&match_order=1&q=bisect&zhida_source=entity"><font style="color:rgb(9, 64, 142);">bisect</a>.bisect_left(lst, 15)</td><td align="left">O(log(N))</td><td align="left">有序列表使用bisect查找元素</td></tr></tbody></table><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tpl = <span class="hljs-built_in">tuple</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">操作</th><th align="left">时间复杂度</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">tpl[2]</td><td align="left">O(1)</td><td align="left">访问元素</td></tr><tr><td align="left">tpl.count(2)</td><td align="left">O(N)</td><td align="left">元素计数</td></tr><tr><td align="left">tpl.index(2)</td><td align="left">O(N)</td><td align="left">查找元素，并返回元素位置</td></tr></tbody></table><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ss1 = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br>ss2 = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>,<span class="hljs-number">15</span>))<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">操作</th><th align="left">时间复杂度</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">5 in ss1</td><td align="left">O(1)</td><td align="left">判断元素是否在set中</td></tr><tr><td align="left">ss1</td><td align="left">ss2</td><td align="left">O(len(ss1)+len(ss2))</td></tr><tr><td align="left">ss1 &amp; ss2</td><td align="left">O(len(s)*len(t))</td><td align="left">取交集，等同于ss1.intersection(ss2)</td></tr><tr><td align="left">ss1 - ss2</td><td align="left">O(len(ss1))</td><td align="left">取差集，等同于ss1.difference(ss2)</td></tr><tr><td align="left">ss1 ^ ss2</td><td align="left">O(len(ss1)*len(ss2))</td><td align="left">取异或集，等同于</td></tr><tr><td align="left">ss1.add(11)</td><td align="left">O(1)</td><td align="left">增加元素</td></tr><tr><td align="left">ss1.pop()</td><td align="left">O(1)</td><td align="left">弹出一个元素</td></tr><tr><td align="left">ss1.remove(5)</td><td align="left">O(1)</td><td align="left">删除指定元素</td></tr></tbody></table><h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">dd = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;d&#x27;</span>:<span class="hljs-number">40</span>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">操作</th><th align="left">时间复杂度</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">dd[‘e’] &#x3D; 50</td><td align="left">O(1)</td><td align="left">插入元素</td></tr><tr><td align="left">dd[‘a’]</td><td align="left">O(1)</td><td align="left">访问元素，等同于dd.get(‘a’)</td></tr><tr><td align="left">del dd[‘a’]</td><td align="left">O(1)</td><td align="left">删除元素</td></tr><tr><td align="left">dd[‘b’] &#x3D; 100</td><td align="left">O(1)</td><td align="left">修改元素</td></tr><tr><td align="left">dd.pop(‘b’)</td><td align="left">O(1)</td><td align="left">弹出一个元素</td></tr><tr><td align="left">dd.clear()</td><td align="left">O(1)</td><td align="left">清空字典</td></tr></tbody></table><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br>deq = deque(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br>ll = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">操作</th><th align="left">时间复杂度</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">deq.pop()</td><td align="left">O(1)</td><td align="left">弹出最右侧的元素</td></tr><tr><td align="left">deq.popleft()</td><td align="left">O(1)</td><td align="left">弹出最左侧的元素</td></tr><tr><td align="left">deq.append(1)</td><td align="left">O(1)</td><td align="left">在右侧增加一个元素</td></tr><tr><td align="left">deq.appendleft(1)</td><td align="left">O(1)</td><td align="left">在左侧增加一个元素</td></tr><tr><td align="left">deq.extend(ll)</td><td align="left">O(K)</td><td align="left">在右侧逐个添加元素</td></tr><tr><td align="left">deq.extendleft(ll)</td><td align="left">O(K)</td><td align="left">在左侧逐个添加元素</td></tr><tr><td align="left">deq.rotate(K)</td><td align="left">O(K)</td><td align="left">旋转</td></tr><tr><td align="left">deq.remove(5)</td><td align="left">O(N)</td><td align="left">删除指定元素</td></tr><tr><td align="left">deq[0]</td><td align="left">O(1)</td><td align="left">访问第一个元素</td></tr><tr><td align="left">deq[N-1]</td><td align="left">O(1)</td><td align="left">访问最后一个元素</td></tr><tr><td align="left">deq[N&#x2F;2]</td><td align="left">O(N)</td><td align="left">访问中间元素</td></tr></tbody></table><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>本质上是指如何把数据组合在一起，是对基本数据 int，float，str，char 的封装。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">[<br>    (<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;beijing&quot;</span>),<br>    (<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;beijing&quot;</span>),<br>    (<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;beijing&quot;</span>),<br>]<br>[<br>    &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">23</span>,<br>    <span class="hljs-string">&quot;hometown&quot;</span>:<span class="hljs-string">&quot;beijing&quot;</span><br>    &#125;,<br>]<br>&#123;<br>    <span class="hljs-string">&quot;zhangsan&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">23</span>,<br>        <span class="hljs-string">&quot;hometown&quot;</span>:<span class="hljs-string">&quot;beijing&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>程序 &#x3D; 数据结构 + 算法</strong></p><p>算法是为了解决实际问题，数据结构是算法需要处理的问题的载体。</p><h2 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fun1</span>()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fun2</span>()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fun3</span>()<br></code></pre></td></tr></table></figure><p>不展示具体的数据类型和运算方法，只告诉封装好的数据使用方法，就是一个抽象的数据，它只能使用设定好的 def。</p><p>5 种常用数据运算：</p><ol><li>插入</li><li>删除</li><li>修改</li><li>查找</li><li>排序</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国内网络无法访问的问题</title>
    <link href="/2025/07/05/%E5%9B%BD%E5%86%85%E7%BD%91%E7%BB%9C%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2025/07/05/%E5%9B%BD%E5%86%85%E7%BD%91%E7%BB%9C%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="问题的发现"><a href="#问题的发现" class="headerlink" title="问题的发现"></a>问题的发现</h1><p>最近发现一个问题，就是我身边的很多朋友无法打开我的网站： <a href="https://baikelwang.github.io/">baikelwang.github.io</a></p><p>但是我自己无论是电脑、平板还是手机都能打开，而且没有翻墙。所以我以为是他们DNS有问题，还让他们修改为8.8.8.8，结果发现还是没有用。</p><p>在昨天晚上上厕所的时候，一不留意间发现了问题所在。厕所里信号不好，频段没有5G信号，它自动切换为4G了，结果就变成这样：</p><p><img src="/img/%E5%9B%BD%E5%86%85%E7%BD%91%E7%BB%9C%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98/4.jpg" alt="无法访问"></p><p>这就奇怪了，我之前明明还可以访问的，现在怎么突然不可以了？</p><p>上完厕所之后，手机自动切回到5G频段，又加载出来了：</p><p><img src="/img/%E5%9B%BD%E5%86%85%E7%BD%91%E7%BB%9C%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98/5.jpg" alt="访问成功"></p><p>这就奇怪了，然后我一查IP，发现</p><p><img src="/img/%E5%9B%BD%E5%86%85%E7%BD%91%E7%BB%9C%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98/4g.jpg" alt="4G IP"></p><p><img src="/img/%E5%9B%BD%E5%86%85%E7%BD%91%E7%BB%9C%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98/5g.jpg" alt="5G IP"></p><p>学校电脑连接的是校园网WiFi，也可以在不翻墙状态下访问，于是我就检查校园网的频段，果然是5G的：</p><p><img src="/img/%E5%9B%BD%E5%86%85%E7%BD%91%E7%BB%9C%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98/njupt.png" alt="校园网"></p><p>这不由得让我思考：4G和5G分配的IP在对国外网站的访问许可管理上是否有不同？</p><p>以下是查阅资料得出的总结：</p><h1 id="查阅资料"><a href="#查阅资料" class="headerlink" title="查阅资料"></a>查阅资料</h1><h3 id="🔧-一、核心差异机制：4G-与-5G-的-IP-分配与路由策略"><a href="#🔧-一、核心差异机制：4G-与-5G-的-IP-分配与路由策略" class="headerlink" title="🔧 一、核心差异机制：4G 与 5G 的 IP 分配与路由策略"></a>🔧 <strong>一、核心差异机制：4G 与 5G 的 IP 分配与路由策略</strong></h3><h4 id="1-IP-地址池的隔离性"><a href="#1-IP-地址池的隔离性" class="headerlink" title="1. IP 地址池的隔离性"></a>1. <strong>IP 地址池的隔离性</strong></h4><ul><li><strong>4G 网络</strong>：通常使用大规模共享 IP 池，这些 IP 因长期被滥用（如爬虫、批量注册）易被海外网站标记为高风险，尤其 GitHub 等平台会主动屏蔽频繁触发风控的 IP 段。</li><li><strong>5G 网络</strong>：运营商为 5G 独立分配<strong>新 IP 段</strong>，且因商用时间短、用户基数小，IP 历史“清白度”更高，被目标网站拦截的概率显著降低。</li></ul><h4 id="2-国际出口路由的差异"><a href="#2-国际出口路由的差异" class="headerlink" title="2. 国际出口路由的差异"></a>2. <strong>国际出口路由的差异</strong></h4><ul><li><strong>4G 出口</strong>：多经过运营商集中式网关，易受<strong>深度包检测（DPI）</strong> 干扰，对未备案境外域名（如 <code>github.io</code>）实施 QoS 限速或直接重置连接。</li><li><strong>5G 核心网（SA 模式）</strong>：支持 <strong>本地分流（Local Breakout）</strong>，部分流量可绕过传统国际关口局，直接通过跨境专线优化路由，降低干扰概率。</li></ul><h4 id="3-协议支持与传输优化"><a href="#3-协议支持与传输优化" class="headerlink" title="3. 协议支持与传输优化"></a>3. <strong>协议支持与传输优化</strong></h4><ul><li><strong>5G 原生优势</strong>：低延迟（1–10ms）和高带宽（1Gbps+）更适应 <strong>TLS 1.3&#x2F;HTTP3</strong> 等现代协议，减少因网络抖动导致的握手失败；而 4G 高延迟（30–50ms）易触发 TLS 超时，被误判为访问失败。</li><li><strong>IPv6 兼容性</strong>：5G 默认启用 IPv6，但若网站或本地网络 IPv6 支持不全（如 CDN 未优化），反而可能引发访问问题。部分运营商对 IPv6 国际流量施加更严格过滤。</li></ul><hr><h3 id="📊-二、运营商策略差异：访问权限的分级管理"><a href="#📊-二、运营商策略差异：访问权限的分级管理" class="headerlink" title="📊 二、运营商策略差异：访问权限的分级管理"></a>📊 <strong>二、运营商策略差异：访问权限的分级管理</strong></h3><table><thead><tr><th><strong>策略维度</strong></th><th><strong>4G 网络</strong></th><th><strong>5G 网络</strong></th><th><strong>对访问 GitHub 的影响</strong></th></tr></thead><tbody><tr><td><strong>IP 信誉库更新</strong></td><td>旧 IP 段，被屏蔽率高</td><td>新 IP 段，风控系统信任度高</td><td>5G 更易绕过黑名单</td></tr><tr><td><strong>国际带宽分配</strong></td><td>低优先级，易拥堵</td><td>高优先级保障，专线优化</td><td>5G 加载速度更快，不易超时</td></tr><tr><td><strong>协议干扰强度</strong></td><td>对未备案域名主动干扰</td><td>干扰较少（试验期政策宽松）</td><td>4G 可能遭遇 RST 阻断</td></tr><tr><td><strong>地理位置模拟</strong></td><td>国内出口 IP，易被识别</td><td>可能分配“混合定位”IP</td><td>5G 更易伪装为本地用户访问</td></tr></tbody></table><h3 id="🌐-三、哪些网站易现-4G-5G-访问差异？"><a href="#🌐-三、哪些网站易现-4G-5G-访问差异？" class="headerlink" title="🌐 三、哪些网站易现 4G&#x2F;5G 访问差异？"></a>🌐 <strong>三、哪些网站易现 4G&#x2F;5G 访问差异？</strong></h3><p>以下类型网站因依赖境外服务或敏感域名，易受网络类型影响：  </p><ol><li><strong>开源平台</strong>：GitHub Pages、GitLab Pages、Netlify（<code>*.netlify.app</code>）  </li><li><strong>文档服务</strong>：ReadTheDocs（<code>*.readthedocs.io</code>）、Vercel（<code>*.vercel.app</code>）  </li><li><strong>轻量 API 服务</strong>：JSONPlaceholder、httpbin.org  </li><li><strong>学术资源</strong>：arXiv、Internet Archive（部分镜像）</li></ol><blockquote><p>💡 特征：未备案境外域名、HTTPS 证书未托管于国内 CA、服务端部署在 AWS&#x2F;GCP 等国际云平台。</p></blockquote><h3 id="🛠️-四、针对性解决方案：突破-4G-访问限制"><a href="#🛠️-四、针对性解决方案：突破-4G-访问限制" class="headerlink" title="🛠️ 四、针对性解决方案：突破 4G 访问限制"></a>🛠️ <strong>四、针对性解决方案：突破 4G 访问限制</strong></h3><h4 id="1-基础优化：DNS-与协议层调整"><a href="#1-基础优化：DNS-与协议层调整" class="headerlink" title="1. 基础优化：DNS 与协议层调整"></a>1. <strong>基础优化：DNS 与协议层调整</strong></h4><ul><li><strong>切换 DNS</strong>：在 4G 网络设置中指定 <code>8.8.8.8</code>（Google）或 <code>1.1.1.1</code>（Cloudflare），避开运营商 DNS 污染。</li><li><strong>强制 HTTPS</strong>：手动输入 <code>https://</code> 开头的 URL，避免运营商对 HTTP 的中间人干扰。</li><li><strong>关闭 IPv6</strong>：若开启后访问异常，在手机网络设置中禁用 IPv6。</li></ul><h4 id="2-高阶方案：代理与路由优化"><a href="#2-高阶方案：代理与路由优化" class="headerlink" title="2. 高阶方案：代理与路由优化"></a>2. <strong>高阶方案：代理与路由优化</strong></h4><ul><li><strong>VPN&#x2F;代理 IP</strong>：使用 <strong>住宅代理 IP</strong>（如 IPIPGO 的 4G&#x2F;5G 动态 IP）模拟真实本地用户，直接绕过 IP 黑名单。</li><li><strong>协议选择</strong>：优先支持 <strong>WireGuard 或 Shadowsocks</strong> 的 VPN 服务，其流量特征更难被识别。</li><li><strong>路由工具</strong>：配置 <strong>Clash 规则</strong>，仅对受限网站走代理，国内流量直连提升速度。</li></ul><h4 id="3-替代访问路径"><a href="#3-替代访问路径" class="headerlink" title="3. 替代访问路径"></a>3. <strong>替代访问路径</strong></h4><ul><li><strong>官方 App</strong>：GitHub Mobile App 对网络波动容忍度更高，部分场景可替代网页访问。</li><li><strong>镜像加速</strong>：通过 <strong>FastGit</strong> 或 <strong>Gitee 同步</strong> 间接获取 GitHub 资源。</li></ul><h3 id="💎-总结：5G-的“访问红利”是暂时的，但可主动利用"><a href="#💎-总结：5G-的“访问红利”是暂时的，但可主动利用" class="headerlink" title="💎 总结：5G 的“访问红利”是暂时的，但可主动利用"></a>💎 <strong>总结：5G 的“访问红利”是暂时的，但可主动利用</strong></h3><p>当前 5G 的访问优势源于 <strong>IP 池的新鲜度、路由优先级及宽松政策</strong>，但随着 5G 用户增长和风控系统升级，这一红利可能逐渐消失。建议：  </p><ul><li><strong>短期</strong>：在 4G 下切换 DNS 或启用 VPN 解决访问问题；  </li><li><strong>长期</strong>：若需高频访问境外资源，优先使用 5G 网络，并配置 <strong>动态代理池+协议混淆</strong> 组合（如 IPIPGO + Clash），实现稳定访问。  </li><li>若问题持续，可补充所在城市、运营商（如移动&#x2F;电信）及具体错误代码，我会进一步定制方案。</li></ul>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>5G</tag>
      
      <tag>IP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unet神经网络图像分割研究与应用</title>
    <link href="/2025/07/04/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <url>/2025/07/04/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Unet神经网络图像分割研究与应用"><a href="#Unet神经网络图像分割研究与应用" class="headerlink" title="Unet神经网络图像分割研究与应用"></a>Unet神经网络图像分割研究与应用</h1><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>语义分割(Semantic Segmentation)是图像处理和机器视觉一个重要分支。与分类任务不同，语义分割需要判断图像每个像素点的类别，进行精确分割。语义分割目前在自动驾驶、自动抠图、医疗影像等领域有着比较广泛的应用。</p><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/0.png"></p><p>上图是基本的语义分割任务。</p><p>Unet可以说是最常用、最简单的一种分割模型了，它简单、高效、易懂、容易构建、可以从小数据集中训练。Unet已经是非常老的分割模型了，是2015年《U-Net: Convolutional Networks for Biomedical Image Segmentation》提出的模型，附件中会给出文章文件。</p><p>在Unet之前，则是更老的FCN网络，FCN是Fully Convolutional Netowkrs的碎屑，不过这个基本上是一个框架，到现在的分割网络，谁敢说用不到卷积层呢。 不过FCN网络的准确度较低，不比Unet好用。</p><h1 id="二、Unet网络结构与优势"><a href="#二、Unet网络结构与优势" class="headerlink" title="二、Unet网络结构与优势"></a>二、Unet网络结构与优势</h1><h2 id="1、Encoder-Part"><a href="#1、Encoder-Part" class="headerlink" title="1、Encoder Part"></a>1、Encoder Part</h2><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/1.png"></p><p><strong><font style="color:rgb(18, 18, 18);">蓝&#x2F;白色框表示 feature map；蓝色箭头表示 3x3 卷积，用于特征提取；</font></strong></p><p><strong><font style="color:rgb(18, 18, 18);">灰色箭头表示 skip-connection，用于特征融合；</font></strong></p><p><strong><font style="color:rgb(18, 18, 18);">红色箭头表示池化 pooling，用于降低维度；</font></strong></p><p><strong><font style="color:rgb(18, 18, 18);">绿色箭头表示上采样 upsample，用于恢复维度；</font></strong></p><p><strong><font style="color:rgb(18, 18, 18);">青色箭头表示 1x1 卷积，用于输出结果。</font></strong></p><p><font style="color:rgb(18, 18, 18);">Encoder 由卷积操作和下采样操作组成，文中所用的卷积结构统一为 </font><strong><font style="color:rgb(18, 18, 18);">3x3 的卷积核，padding 为 0 ，striding 为 1</font></strong><font style="color:rgb(18, 18, 18);">。没有 padding 所以每次卷积之后 feature map 的 H 和 W 变小了，在 skip-connection 时要注意 feature map 的维度(其实也可以将 padding 设置为 1 避免维度不对应问题)，pytorch 代码：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">nn.Sequential(nn.Conv2d(in_channels, out_channels, <span class="hljs-number">3</span>),<br>              nn.BatchNorm2d(out_channels),<br>              nn.ReLU(inplace=<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure><p><font style="color:rgb(18, 18, 18);">上述的两次卷积之后是一个 </font><strong><font style="color:rgb(18, 18, 18);">stride 为 2 的 max pooling</font></strong><font style="color:rgb(18, 18, 18);">，输出大小变为 1&#x2F;2 *(H, W)：</font></p><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/2.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">nn.MaxPool2d(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="2、Decoder-Part"><a href="#2、Decoder-Part" class="headerlink" title="2、Decoder Part"></a>2、Decoder Part</h2><p><font style="color:rgb(18, 18, 18);">feature map 经过 Decoder 恢复原始分辨率，该过程除了卷积比较关键的步骤就是 upsampling 与 skip-connection。</font></p><p><font style="color:rgb(18, 18, 18);">Upsampling 上采样常用的方式有两种：1.</font><a href="https://zhuanlan.zhihu.com/p/77201674">FCN</a><font style="color:rgb(18, 18, 18);"> </font><strong><font style="color:rgb(18, 18, 18);">中介绍的反卷积</font></strong><font style="color:rgb(18, 18, 18);">；2. </font><strong><font style="color:rgb(18, 18, 18);">插值</font></strong><font style="color:rgb(18, 18, 18);">。在插值实现方式中，bilinear 双线性插值的综合表现较好也较为常见 。</font></p><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/3.png"></p><p><font style="color:rgb(18, 18, 18);">例子中是将一个 2x2 的矩阵通过插值的方式得到 4x4 的矩阵，那么将 2x2 的矩阵称为源矩阵，4x4 的矩阵称为目标矩阵。双线性插值中，目标点的值是由离他最近的 4 个点的值计算得到的，我们首先介绍如何找到目标点周围的 4 个点，以 P2 为例。</font></p><p><font style="color:rgb(18, 18, 18);"></font></p><p><font style="color:rgb(18, 18, 18);">第一个公式，目标矩阵到源矩阵的坐标映射：</font></p><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/4.png"></p><p><font style="color:rgb(18, 18, 18);">为了找到那 4 个点，首先要找到目标点在源矩阵中的</font><strong><font style="color:rgb(18, 18, 18);">相对位置</font></strong><font style="color:rgb(18, 18, 18);">，上面的公式就是用来算这个的。P2 在目标矩阵中的坐标是 (0, 1)，对应到源矩阵中的坐标就是 (-0.25, 0.25)。坐标里面居然有小数跟负数，不急我们一个一个来处理。我们知道双线性插值是从坐标周围的 4 个点来计算该坐标的值，(-0.25, 0.25) 这个点周围的 4 个点是(-1, 0), (-1, 1), (0, 0), (0, 1)。为了找到负数坐标点，我们将源矩阵扩展为下面的形式，中间红色的部分为源矩阵。</font></p><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/5.png"></p><p><font style="color:rgb(18, 18, 18);">我们规定 f(i, j) 表示 (i, j)坐标点处的像素值，对于计算出来的对应的坐标，我们统一写成 (i+u, j+v) 的形式。那么这时 i&#x3D;-1, u&#x3D;0.75, j&#x3D;0, v&#x3D;0.25。把这 4 个点单独画出来，可以看到目标点 P2 对应到源矩阵中的</font><strong><font style="color:rgb(18, 18, 18);">相对位置</font></strong><font style="color:rgb(18, 18, 18);">。</font></p><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/6.png"><br><font style="color:rgb(18, 18, 18);">第二个公式，也是最后一个。</font></p><p>$ f(i + u, j + v) &#x3D; (1 - u) (1 - v) f(i, j) + (1 - u) v f(i, j + 1) + u (1 - v) f(i + 1, j) + u v f(i + 1, j + 1) $</p><p><font style="color:rgb(18, 18, 18);">目标点的像素值就是周围 4 个点像素值的加权和，明显可以看出离得近的权值比较大例如 (0, 0) 点的权值就是 0.75<em>0.75，离得远的如 (-1, 1) 权值就比较小，为 0.25</em>0.25，这也比较符合常理吧。把值带入计算就可以得到 P2 点的值了，结果是 12.5 与代码吻合上了，nice。</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">nn.Upsample(scale_factor=<span class="hljs-number">2</span>, mode=<span class="hljs-string">&#x27;bilinear&#x27;</span>)<br></code></pre></td></tr></table></figure><p><font style="color:rgb(18, 18, 18);">CNN 网络要想获得好效果，skip-connection 基本必不可少。Unet 中这一关键步骤融合了底层信息的位置信息与深层特征的语义信息，</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.cat([low_layer_features, deep_layer_features], dim=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><font style="color:rgb(18, 18, 18);">这里需要注意的是</font><strong><font style="color:rgb(18, 18, 18);">，FCN 中深层信息与浅层信息融合是通过对应像素相加的方式，而 Unet 是通过拼接的方式。</font></strong></p><p><font style="color:rgb(18, 18, 18);">那么这两者有什么区别呢，其实 在 ResNet 与 DenseNet 中也有一样的区别，Resnet 使用了对应值相加，DenseNet 使用了拼接。</font><strong><font style="color:rgb(18, 18, 18);">个人理解在相加的方式下，feature map 的维度没有变化，但每个维度都包含了更多特征，对于普通的分类任务这种不需要从 feature map 复原到原始分辨率的任务来说，这是一个高效的选择；而拼接则保留了更多的维度&#x2F;位置 信息，这使得后面的 layer 可以在浅层特征与深层特征自由选择，这对语义分割任务来说更有优势。</font></strong></p><h2 id="3、上述模型结构在医疗影像中的优势"><a href="#3、上述模型结构在医疗影像中的优势" class="headerlink" title="3、上述模型结构在医疗影像中的优势"></a><font style="color:rgb(18, 18, 18);">3、上述模型结构在医疗影像中的优势</font></h2><p><font style="color:rgb(18, 18, 18);">深度学习用于医学影像处理的一个挑战在于，提供的样本往往比较少，而 U-Net 则在这个限制下依然有很好的表现：</font></p><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/7.png"></p><p>根据网友对Unet医疗领域应用的讨论，得到的结果：</p><blockquote><p><font style="color:rgb(18, 18, 18);">1、医疗影像语义较为简单、结构固定。因此语义信息相比自动驾驶等较为单一，因此并不需要去筛选过滤无用的信息。</font><strong><font style="color:rgb(18, 18, 18);">医疗影像的所有特征都很重要，因此低级特征和高级语义特征都很重要，所以U型结构的skip connection结构（特征拼接）更好派上用场</font></strong></p><p>2、医学影像的数据较少，获取难度大，数据量可能只有几百甚至不到100，因此如果使用大型的网络例如DeepLabv3+等模型，很容易过拟合。大型网络的优点是更强的图像表述能力，而较为简单、数量少的医学影像并没有那么多的内容需要表述，因此也有人发现在小数量级中，分割的SOTA模型与轻量的Unet并没有神恶魔优势</p><p>3、医学影像往往是多模态的。比方说ISLES脑梗竞赛中，官方提供了CBF，MTT，CBV等多中模态的数据（这一点听不懂也无妨）。因此医学影像任务中，往往需要自己设计网络去提取不同的模态特征，因此轻量结构简单的Unet可以有更大的操作空间。</p></blockquote><h1 id="三、网络模型搭建与案例探索"><a href="#三、网络模型搭建与案例探索" class="headerlink" title="三、网络模型搭建与案例探索"></a>三、网络模型搭建与案例探索</h1><h2 id="1、net搭建"><a href="#1、net搭建" class="headerlink" title="1、net搭建"></a>1、net搭建</h2><p>根据上一节我们所讲的unet网络结构，我们可以把net归结为4个功能类模块：卷积、上沉采样、下沉池化以及前向传播，以下逐一分析。</p><h3 id="1-1卷积模块"><a href="#1-1卷积模块" class="headerlink" title="1.1卷积模块"></a>1.1卷积模块</h3><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/8.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Conv_Block</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,in_channel,out_channel</span>):<br>        <span class="hljs-built_in">super</span>(Conv_Block, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.layer=nn.Sequential(<br>            nn.Conv2d(in_channel,out_channel,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,padding_mode=<span class="hljs-string">&#x27;reflect&#x27;</span>,bias=<span class="hljs-literal">False</span>),<br>            nn.BatchNorm2d(out_channel),<br>            nn.Dropout2d(<span class="hljs-number">0.3</span>),<br>            nn.LeakyReLU(),<br>            nn.Conv2d(out_channel, out_channel, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, padding_mode=<span class="hljs-string">&#x27;reflect&#x27;</span>, bias=<span class="hljs-literal">False</span>),<br>            nn.BatchNorm2d(out_channel),<br>            nn.Dropout2d(<span class="hljs-number">0.3</span>),<br>            nn.LeakyReLU()<br>        )<br></code></pre></td></tr></table></figure><p>在一次卷积中，上层数据通过inchannel输入，outchannel输出。卷积核是3x3，stride、padding值为1的矩阵，而reflect则是对称加强特征提取。在卷积层之后将对数据进行归一化处理，将彩色图像数据的一个通道里的每一个通道维度C按概率赋值为0.</p><h3 id="1-2上沉采样"><a href="#1-2上沉采样" class="headerlink" title="1.2上沉采样"></a>1.2上沉采样</h3><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/9.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UpSample</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,channel</span>):<br>        <span class="hljs-built_in">super</span>(UpSample, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.layer=nn.Conv2d(channel,channel//<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>以1x1，步长为1的卷积将数据进行降通道传输。</p><h3 id="1-3下沉池化"><a href="#1-3下沉池化" class="headerlink" title="1.3下沉池化"></a>1.3下沉池化</h3><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/10.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DownSample</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,channel</span>):<br>        <span class="hljs-built_in">super</span>(DownSample, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.layer=nn.Sequential(<br>            nn.Conv2d(channel,channel,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,padding_mode=<span class="hljs-string">&#x27;reflect&#x27;</span>,bias=<span class="hljs-literal">False</span>),<br>            nn.BatchNorm2d(channel),<br>            nn.LeakyReLU()<br>        )<br></code></pre></td></tr></table></figure><p>将自身数据卷积处理后在进行传输。</p><h3 id="1-4前向传播"><a href="#1-4前向传播" class="headerlink" title="1.4前向传播"></a>1.4前向传播</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.layer(x)<br></code></pre></td></tr></table></figure><p>值得注意的是，在上沉采样用前向传播中需要将图片进行重构拼接,在NCHW通道中运行.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,x,feature_map</span>):<br>    up=F.interpolate(x,scale_factor=<span class="hljs-number">2</span>,mode=<span class="hljs-string">&#x27;nearest&#x27;</span>)<br>    out=<span class="hljs-variable language_">self</span>.layer(up)<br>    <span class="hljs-keyword">return</span> torch.cat((out,feature_map),dim=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="2、实例测试"><a href="#2、实例测试" class="headerlink" title="2、实例测试"></a>2、实例测试</h2><p>数据集:</p><p>原图个例:</p><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/11.png"></p><p>标签个例:</p><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/12.png"></p><p>整体是对原图进行了暗化来保留高亮部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 导入数据集</span><br>    data_loader = DataLoader(MyDataset(data_path), batch_size=<span class="hljs-number">1</span>, shuffle=<span class="hljs-literal">False</span>)<br>    net = Unet().to(device)<br><br>    <span class="hljs-comment"># 导入权重参数</span><br>    <span class="hljs-keyword">if</span> os.path.exists(weight_path):<br>        net.load_state_dict(torch.load(weight_path))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;成功加载！&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加载失败！&#x27;</span>)<br><br>    <span class="hljs-comment"># 优化器</span><br>    opt = optim.Adam(net.parameters())<br>    loss_fun = nn.BCELoss()<br><br>    epoch = <span class="hljs-number">1</span><br>    <span class="hljs-comment"># Train图片有689张</span><br>    <span class="hljs-keyword">while</span> epoch &lt;= <span class="hljs-number">689</span>:<br>        <span class="hljs-keyword">for</span> i, (image, label) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data_loader):<br>            image, label = image.to(device), label.to(device)<br><br>            out_image = net(image)<br>            train_loss = loss_fun(out_image, label)<br><br>            opt.zero_grad()<br>            train_loss.backward()<br>            opt.step()<br><br>            <span class="hljs-comment"># 每间隔5次更新一下梯度</span><br>            <span class="hljs-keyword">if</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;epoch&#125;</span>--<span class="hljs-subst">&#123;i&#125;</span>-train_loss===&gt;&gt;<span class="hljs-subst">&#123;train_loss.item()&#125;</span>&#x27;</span>)<br><br>            <span class="hljs-comment"># 每间隔50次保存一次权重</span><br>            <span class="hljs-keyword">if</span> i % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>                torch.save(net.state_dict(), weight_path)<br><br>            _image = image[<span class="hljs-number">0</span>]<br>            _label = label[<span class="hljs-number">0</span>]<br>            _out_image = out_image[<span class="hljs-number">0</span>]<br><br>            <span class="hljs-comment"># 将三个图片进行拼接</span><br>            img = torch.stack([_image, _label, _out_image], dim=<span class="hljs-number">0</span>)<br>            save_image(img, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;save_path&#125;</span>/<span class="hljs-subst">&#123;i&#125;</span>.png&#x27;</span>)<br><br>        epoch = epoch+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>在经过7h的训练之后得到model权重参数，我们对其进行test，最终输出结果：</p><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/13.png"></p><p>从左到右依次是：原图，暗化图片，预测结果。</p><p>说明模型效果良好。</p><h1 id="四、医疗影像分割的项目运用"><a href="#四、医疗影像分割的项目运用" class="headerlink" title="四、医疗影像分割的项目运用"></a>四、医疗影像分割的项目运用</h1><p>在进行了上述实例测试后，我们对其进行X光医疗图像的分割应用。</p><p>首先导入数据集来训练：</p><p>训练集：</p><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/14.png"></p><p>标签：</p><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/15.png"><br>在模型训练结束之后，我们可以用一些指标来测试模型性能，语义分割常用的指标是MIOU</p><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/16.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(pred_dir):<br>    os.makedirs(pred_dir)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Load model.&quot;</span>)<br>device = torch.device(<span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span>)<br><span class="hljs-comment"># 加载网络，图片单通道，分类为1。</span><br>net = UNet(n_channels=<span class="hljs-number">1</span>, n_classes=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 将网络拷贝到deivce中</span><br>net.to(device=device)<br><span class="hljs-comment"># 加载模型参数</span><br>net.load_state_dict(torch.load(<span class="hljs-string">&#x27;best_model.pth&#x27;</span>, map_location=device)) <span class="hljs-comment"># todo</span><br><span class="hljs-comment"># 测试模式</span><br>net.<span class="hljs-built_in">eval</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Load model done.&quot;</span>)<br><br>img_names = os.listdir(test_dir)<br>image_ids = [image_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> image_name <span class="hljs-keyword">in</span> img_names]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Get predict result.&quot;</span>)<br><span class="hljs-keyword">for</span> image_id <span class="hljs-keyword">in</span> tqdm(image_ids):<br>    image_path = os.path.join(test_dir, image_id + <span class="hljs-string">&quot;.jpg&quot;</span>)<br>    img = cv2.imread(image_path)<br>    origin_shape = img.shape<br>    <span class="hljs-comment"># print(origin_shape)</span><br>    <span class="hljs-comment"># 转为灰度图</span><br>    img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)<br>    img = cv2.resize(img, (<span class="hljs-number">512</span>, <span class="hljs-number">512</span>))<br>    <span class="hljs-comment"># 转为batch为1，通道为1，大小为512*512的数组</span><br>    img = img.reshape(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, img.shape[<span class="hljs-number">0</span>], img.shape[<span class="hljs-number">1</span>])<br>    <span class="hljs-comment"># 转为tensor</span><br>    img_tensor = torch.from_numpy(img)<br>    <span class="hljs-comment"># 将tensor拷贝到device中，只用cpu就是拷贝到cpu中，用cuda就是拷贝到cuda中。</span><br>    img_tensor = img_tensor.to(device=device, dtype=torch.float32)<br>    <span class="hljs-comment"># 预测</span><br>    pred = net(img_tensor)<br>    <span class="hljs-comment"># 提取结果</span><br>    pred = np.array(pred.data.cpu()[<span class="hljs-number">0</span>])[<span class="hljs-number">0</span>]<br>    pred[pred &gt;= <span class="hljs-number">0.5</span>] = <span class="hljs-number">255</span><br>    pred[pred &lt; <span class="hljs-number">0.5</span>] = <span class="hljs-number">0</span><br>    pred = cv2.resize(pred, (origin_shape[<span class="hljs-number">1</span>], origin_shape[<span class="hljs-number">0</span>]), interpolation=cv2.INTER_NEAREST)<br>    cv2.imwrite(os.path.join(pred_dir, image_id + <span class="hljs-string">&quot;.png&quot;</span>), pred)<br></code></pre></td></tr></table></figure><p>最后得出测试结果，以下展示其一：</p><p><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/17.png"></p><h1 id="五、总结体会"><a href="#五、总结体会" class="headerlink" title="五、总结体会"></a>五、总结体会</h1><ol><li>神经网络的搭建是核心步骤，要对应着论文中不能有偏差，尤其是前向传播不能掉以轻心。</li><li>在数据准备好了之后，数据的预处里很关键，也很困难，特别是对于大量的图片文件，在转化为张量之前要对其进行大量数学处理，来减小训练时特征提取以及模型的计算压力。<br><img src="/img/Unet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/18.png"></li><li>一块高性能的显卡很重要，我的笔记本是GTX1050的老显卡，在跑7h数据集的时候差点烧了，以后这种还是尽量租服务器跑。</li><li>测试集也很重要，最后结果要对训练数据进行反向传播，来提高模型准确度，测试集的数据尽量不要与训练集交叉过多。</li></ol>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unet</tag>
      
      <tag>DeepLearning</tag>
      
      <tag>CV</tag>
      
      <tag>深度学习</tag>
      
      <tag>医学影像</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单摆锤强化学习实例</title>
    <link href="/2025/07/03/%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/"/>
    <url>/2025/07/03/%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">gym                 <span class="hljs-number">0.26</span><span class="hljs-number">.2</span><br>gym-notices         <span class="hljs-number">0.0</span><span class="hljs-number">.8</span><br>pygame              <span class="hljs-number">2.1</span><span class="hljs-number">.0</span><br>torch               <span class="hljs-number">1.9</span><span class="hljs-number">.0</span>+cu111<br></code></pre></td></tr></table></figure><h1 id="游戏搭建与测试"><a href="#游戏搭建与测试" class="headerlink" title="游戏搭建与测试"></a>游戏搭建与测试</h1><p>测试游戏使用的是 gym 库的<font style="color:#080808;">CartPole-v1 游戏模型。</font></p><p><img src="/img/%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/0.png"></p><p>首先要对游戏环境进行初始化和启动：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 初始化pygame</span><br>pygame.init()<br><span class="hljs-comment"># 生成环境</span><br>env = gym.make(<span class="hljs-string">&#x27;CartPole-v1&#x27;</span>, render_mode=<span class="hljs-string">&#x27;human&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后，是人类玩家通过键盘来玩游戏，测试和了解游戏的规则以及难度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 人类</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">human_play</span>(<span class="hljs-params">action_max</span>):<br>    <span class="hljs-comment"># 游戏初始化</span><br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;游戏开始！&quot;</span>)<br>    state, _ = env.reset()<br>    start_time = time.time()  <span class="hljs-comment"># 设定游戏开始时间</span><br>    step = <span class="hljs-number">0</span><br>    fail = <span class="hljs-literal">False</span><br><br>    <span class="hljs-comment"># 小车的信息参数</span><br>    car_position = state[<span class="hljs-number">0</span>] <span class="hljs-comment"># 小车位置</span><br>    car_speed = state[<span class="hljs-number">1</span>]    <span class="hljs-comment"># 小车速度</span><br>    pole_angle = state[<span class="hljs-number">2</span>]   <span class="hljs-comment"># 杆子的角度</span><br>    pole_speed = state[<span class="hljs-number">3</span>]   <span class="hljs-comment"># 杆子的尖端速度</span><br><br>    <span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, action_max + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 渲染画面</span><br>        env.render()<br><br>        time.sleep(<span class="hljs-number">0.2</span>)<br>        <span class="hljs-comment"># 以非阻塞方式获取键盘的输入值</span><br>        key = pygame.key.get_pressed()<br>        action = <span class="hljs-number">0</span><br><br>        <span class="hljs-comment"># 如果键盘没有输入，那么游戏也继续执行下去，输入值将随机选择</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> key[pygame.K_LEFT] <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> key[pygame.K_RIGHT]:<br>            action = env.action_space.sample()<br><br>        <span class="hljs-comment"># 键盘左箭头为0，右箭头为1</span><br>        <span class="hljs-keyword">if</span> key[pygame.K_LEFT]:<br>            action = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">elif</span> key[pygame.K_RIGHT]:<br>            action = <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># agent与环境进行一步交互</span><br>        state, _, terminated, _, _ = env.step(action)<br>        <span class="hljs-comment"># print(&#x27;state = &#123;0&#125;:.2f; reward = &#123;1&#125;&#x27;.format(state, reward))</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;步骤=<span class="hljs-subst">&#123;step&#125;</span> 行为=<span class="hljs-subst">&#123;action&#125;</span>&quot;</span><br>              <span class="hljs-string">f&quot; 车速=<span class="hljs-subst">&#123;car_speed:<span class="hljs-number">.2</span>f&#125;</span> 位置=<span class="hljs-subst">&#123;car_position:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span><br>              <span class="hljs-string">f&quot; 角度=<span class="hljs-subst">&#123;pole_angle:<span class="hljs-number">.2</span>f&#125;</span> 尖端速度=<span class="hljs-subst">&#123;pole_speed:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br><br>        <span class="hljs-comment"># 判断当前episode 是否完成</span><br>        <span class="hljs-keyword">if</span> terminated:<br>            fail = <span class="hljs-literal">True</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Done!&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-comment"># 游戏结束后，计算游戏时间和步骤总数</span><br>    end_time = time.time()<br>    game_time = end_time - start_time<br>    <span class="hljs-keyword">if</span> fail:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;游戏失败！你坚持了 <span class="hljs-subst">&#123;game_time:<span class="hljs-number">.2</span>f&#125;</span> 秒 <span class="hljs-subst">&#123;step&#125;</span> 步。&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;游戏通关！你坚持了 <span class="hljs-subst">&#123;game_time:<span class="hljs-number">.2</span>f&#125;</span> 秒 <span class="hljs-subst">&#123;step&#125;</span> 步。&quot;</span>)<br></code></pre></td></tr></table></figure><p>游戏结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">步骤=<span class="hljs-number">1</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">2</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">3</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">4</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">5</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">6</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">7</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">8</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">9</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">10</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">11</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">12</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">13</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">14</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">15</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">16</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.03</span> 位置=-<span class="hljs-number">0.04</span> 角度=-<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>Done!<br>游戏失败！你坚持了 <span class="hljs-number">3.63</span> 秒 <span class="hljs-number">16</span> 步。<br></code></pre></td></tr></table></figure><p>于是，定义一个简易的神经网络来玩游戏。</p><h1 id="强化学习模型"><a href="#强化学习模型" class="headerlink" title="强化学习模型"></a>强化学习模型</h1><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p><img src="/img/%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/1.png"></p><p>定义的神经网络如上图，输入小车的<strong>四个实时特征</strong>，输入一个 128 神经元的隐藏层神经网络，最后再输出为<strong>向左、向右的概率大小</strong>，让神经网络决定小车的向左&#x2F;向右。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 神经网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CartPolePolicy</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(CartPolePolicy, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-comment"># 定义两个线性层，大小分别是4*128与128*2</span><br>        <span class="hljs-variable language_">self</span>.fc1 = nn.Linear(in_features=<span class="hljs-number">4</span>, out_features=<span class="hljs-number">128</span>)<br>        <span class="hljs-variable language_">self</span>.fc2 = nn.Linear(in_features=<span class="hljs-number">128</span>, out_features=<span class="hljs-number">2</span>)<br>        <span class="hljs-comment"># 定义一个dropout层，丢弃比率是60%</span><br>        <span class="hljs-variable language_">self</span>.drop = nn.Dropout(p=<span class="hljs-number">0.6</span>)<br><br>    <span class="hljs-comment"># 前向传播函数，输入X</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = <span class="hljs-variable language_">self</span>.fc1(x)<br>        x = <span class="hljs-variable language_">self</span>.drop(x)<br>        <span class="hljs-comment"># 隐藏层的激活函数；在输入数据通过线性层后，ReLU激活函数将其转换为非线性形式，供下一层使用。</span><br>        x = F.relu(x)<br>        x = <span class="hljs-variable language_">self</span>.fc2(x)<br><br>        <span class="hljs-comment"># 使用softmax决策最终的行动，决定是向左还是向右</span><br>        <span class="hljs-keyword">return</span> F.softmax(x, dim=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="强化学习算法"><a href="#强化学习算法" class="headerlink" title="强化学习算法"></a>强化学习算法</h2><p><img src="/img/%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/2.png"></p><p>基于策略的强化学习模型其算法而结构如下：</p><p><img src="/img/%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/3.png"></p><p>在此处，我们假设 Cartpole 游戏执行了 n 步：</p><p>神经网络的行动：$ a1,a2,…….an\in0、1 $</p><p>选择动作的概率：$ p1,p2,……pn<br> $</p><p>动作对应的奖励：$ r1,r2,……rn $ </p><p>总奖励为：$ R&#x3D;p1<em>r1+p2</em>r2+……+pn*rn $</p><p>于是，我们神经网络的参数优化目标为：<strong>总奖励 R 最大</strong>。</p><p>也就是说，增加神经网络输出高奖励动作的概率，减少输出低奖励动作的概率。</p><p>问题就在于：<strong>如何分配奖励？</strong></p><h3 id="奖励策略"><a href="#奖励策略" class="headerlink" title="奖励策略"></a>奖励策略</h3><p>对于 Cartpole 游戏而言：</p><p>如果游戏没有结束 ——&gt;正奖励</p><p>如果游戏结束     ——&gt;不再奖励</p><p><img src="/img/%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/4.png"></p><p>由于第 1 步做出了正确的决定，才有了第 2 步，所以应该给第一步更多的奖励。</p><p>所设定奖励策略如下：</p><p><img src="/img/%E5%8D%95%E6%91%86%E9%94%A4%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E4%BE%8B/5.png"></p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>定义损失函数为：$ loss&#x3D;-\sum_{i&#x3D;1}^{n} log(p_i)\cdot r_i $</p><p>第 i 步的行动为：$ p_i &#x3D; \pi(a_i|s_i) $</p><p>第 i 步的奖励为：$ r_i&#x3D;n-i+1 $</p><p>神经网络的训练目标即为：使 loss 函数最小的参数模型，即使总奖励 R 最大，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 实现损失函数的计算方法，函数传入步数n和这n步对应的概率log_p</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_policy_loss</span>(<span class="hljs-params">n, log_p</span>):<br>    r = <span class="hljs-built_in">list</span>()<br>    <span class="hljs-comment"># 构造奖励列表r</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        r.append(i * <span class="hljs-number">1.0</span>)<br>    r = torch.tensor(r)<br>    r = (r - r.mean()) / r.std()  <span class="hljs-comment"># 进行标准化处理</span><br>    loss = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 计算损失函数</span><br>    <span class="hljs-keyword">for</span> pi, ri <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(log_p, r):<br>        loss += -pi * ri<br>    <span class="hljs-keyword">return</span> loss<br></code></pre></td></tr></table></figure><h2 id="进行训练"><a href="#进行训练" class="headerlink" title="进行训练"></a>进行训练</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 训练的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>():<br>    env.reset(seed=<span class="hljs-number">543</span>)<br>    torch.manual_seed(<span class="hljs-number">543</span>)<br><br>    <span class="hljs-comment"># 定义模型</span><br>    policy = CartPolePolicy()<br>    optimizer = optim.Adam(policy.parameters(), lr = <span class="hljs-number">0.01</span>)<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    一共训练最多1000回合</span><br><span class="hljs-string">    每回合罪多行动10000次</span><br><span class="hljs-string">    当某一回合的游戏步数超过5000，就认为训练完成</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    max_episode = <span class="hljs-number">1000</span><br>    max_actions = <span class="hljs-number">10000</span><br>    max_steps = <span class="hljs-number">5000</span><br><br>    <span class="hljs-keyword">for</span> episode <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, max_episode + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 对于每一轮循环，都要重新启动一次游戏</span><br>        state, _ = env.reset()<br>        step = <span class="hljs-number">0</span><br>        log_p = <span class="hljs-built_in">list</span>()<br>        <br>        <span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, max_actions + <span class="hljs-number">1</span>):<br>            state = torch.from_numpy(state).<span class="hljs-built_in">float</span>().unsqueeze(<span class="hljs-number">0</span>)<br>            <span class="hljs-comment"># print(state)</span><br>            probs = policy(state) <span class="hljs-comment"># 计算神经网络给出的行动概率</span><br><br>            <span class="hljs-comment"># 基于网络给出的概率分布，随机选择行动</span><br>            m = Categorical(probs)<br>            action = m.sample()<br>            <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            这里不是直接使用概率较大的行动，而是通过概率分布生成action，</span><br><span class="hljs-string">            这样可以进一步探索低概率的行动。</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            <span class="hljs-comment"># agent与环境进行一步交互</span><br>            state, _, done, _, _ = env.step(action.item())<br>            <span class="hljs-keyword">if</span> done:<br>                <span class="hljs-keyword">break</span><br>            log_p.append(m.log_prob(action)) <span class="hljs-comment"># 保存每次行动对应的概率分布</span><br><br>        <span class="hljs-keyword">if</span> step &gt; max_steps:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;完成！上一轮训练为<span class="hljs-subst">&#123;episode&#125;</span>，步数为<span class="hljs-subst">&#123;step&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-comment"># 每一回合游戏，都会做一次梯度下降算法</span><br>        optimizer.zero_grad()<br>        loss = compute_policy_loss(step, log_p)<br>        loss.backward()<br>        optimizer.step()<br>        <span class="hljs-keyword">if</span> episode %<span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Episode<span class="hljs-subst">&#123;episode&#125;</span> Run steps<span class="hljs-subst">&#123;step&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-comment"># 保存模型</span><br>    torch.save(policy.state_dict(), <span class="hljs-string">f&#x27;catpole_policy.pth&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="AI-测试"><a href="#AI-测试" class="headerlink" title="AI 测试"></a>AI 测试</h1><p>接下来让训练生成的模型去玩游戏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ai_play</span>(<span class="hljs-params">action_max</span>):<br>    <span class="hljs-comment"># 游戏初始化</span><br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;游戏开始！&quot;</span>)<br><br>    state, _ = env.reset()<br>    start_time = time.time()  <span class="hljs-comment"># 设定游戏开始时间</span><br>    step = <span class="hljs-number">0</span><br>    fail = <span class="hljs-literal">False</span><br><br>    <span class="hljs-comment"># 小车的信息参数</span><br>    car_position = state[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 小车位置</span><br>    car_speed = state[<span class="hljs-number">1</span>]  <span class="hljs-comment"># 小车速度</span><br>    pole_angle = state[<span class="hljs-number">2</span>]  <span class="hljs-comment"># 杆子的角度</span><br>    pole_speed = state[<span class="hljs-number">3</span>]  <span class="hljs-comment"># 杆子的尖端速度</span><br><br>    <span class="hljs-comment"># 在环境中，创建神经网络</span><br>    policy = CartPolePolicy()<br>    <span class="hljs-comment"># 由于网络还有训练，将读取模型的代码load_state_dict注释</span><br>    policy.load_state_dict(torch.load(<span class="hljs-string">&#x27;catpole_policy.pth&#x27;</span>))<br>    policy.<span class="hljs-built_in">eval</span>() <span class="hljs-comment"># 将模型设置为评估模式</span><br><br>    <span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, action_max + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 渲染画面</span><br>        env.render()<br><br>        time.sleep(<span class="hljs-number">0.1</span>)<br><br>        <span class="hljs-string">&#x27;&#x27;&#x27;小车控制的方式&#x27;&#x27;&#x27;</span><br>        <span class="hljs-comment"># 将环境参数state转化为张量</span><br>        state = torch.from_numpy(state).<span class="hljs-built_in">float</span>().unsqueeze(<span class="hljs-number">0</span>)<br>        <span class="hljs-comment"># 输入至模型policy，计算行动概率probs</span><br>        probs = policy(state)<br><br>        action = torch.argmax(probs, dim=<span class="hljs-number">1</span>).item()<br><br>        <span class="hljs-comment"># agent与环境进行一步交互</span><br>        state, _, done, _, _ = env.step(action)<br>        <span class="hljs-comment"># print(&#x27;state = &#123;0&#125;:.2f; reward = &#123;1&#125;&#x27;.format(state, reward))</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;步骤=<span class="hljs-subst">&#123;step&#125;</span> 行为=<span class="hljs-subst">&#123;action&#125;</span>&quot;</span><br>              <span class="hljs-string">f&quot; 车速=<span class="hljs-subst">&#123;car_speed:<span class="hljs-number">.2</span>f&#125;</span> 位置=<span class="hljs-subst">&#123;car_position:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span><br>              <span class="hljs-string">f&quot; 角度=<span class="hljs-subst">&#123;pole_angle:<span class="hljs-number">.2</span>f&#125;</span> 尖端速度=<span class="hljs-subst">&#123;pole_speed:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br><br>        <span class="hljs-comment"># 判断当前episode 是否完成</span><br>        <span class="hljs-keyword">if</span> done:<br>            fail = <span class="hljs-literal">True</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Done!&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-comment"># 游戏结束后，计算游戏时间和步骤总数</span><br>    end_time = time.time()<br>    game_time = end_time - start_time<br>    <span class="hljs-keyword">if</span> fail:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;游戏失败！你坚持了 <span class="hljs-subst">&#123;game_time:<span class="hljs-number">.2</span>f&#125;</span> 秒 <span class="hljs-subst">&#123;step&#125;</span> 步。&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;游戏通关！你坚持了 <span class="hljs-subst">&#123;game_time:<span class="hljs-number">.2</span>f&#125;</span> 秒 <span class="hljs-subst">&#123;step&#125;</span> 步。&quot;</span>)<br></code></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">步骤=<span class="hljs-number">995</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.02</span> 位置=-<span class="hljs-number">0.03</span> 角度=<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">996</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.02</span> 位置=-<span class="hljs-number">0.03</span> 角度=<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">997</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.02</span> 位置=-<span class="hljs-number">0.03</span> 角度=<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">998</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.02</span> 位置=-<span class="hljs-number">0.03</span> 角度=<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">999</span> 行为=<span class="hljs-number">0</span> 车速=<span class="hljs-number">0.02</span> 位置=-<span class="hljs-number">0.03</span> 角度=<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>步骤=<span class="hljs-number">1000</span> 行为=<span class="hljs-number">1</span> 车速=<span class="hljs-number">0.02</span> 位置=-<span class="hljs-number">0.03</span> 角度=<span class="hljs-number">0.01</span> 尖端速度=-<span class="hljs-number">0.03</span><br>游戏通关！你坚持了 <span class="hljs-number">42.00</span> 秒 <span class="hljs-number">1000</span> 步。<br></code></pre></td></tr></table></figure><p>截取部分结果，可见 AI 成功的完成了 1000 步，说明模型很成功。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>强化学习</tag>
      
      <tag>ReinforceLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
